# ГЛАВА 2

# АРХИТЕКТУРА ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE ARCHITECTURE)

### АКРОНИМЫ (ACRONYMS)

|     |                                         |                                        |
|-----|-----------------------------------------|----------------------------------------|
| AD  | architecture description                | описание архитектуры                   |
| ADL | architecture description language       | язык описания архитектуры              |
| API | application programming interface       | интерфейс прикладного программирования |
| ASR | architecturally significant requirement | архитектурно значимые требования       |
| IDL | interface description language          | язык описания интерфейса               |
| MVC | model view controller                   | контроллер представления модели        |

## ВВЕДЕНИЕ (INTRODUCTION)

В этой главе архитектура программного обеспечения рассматривается с нескольких точек зрения: концепции; представление и рабочие продукты; контекст, процессы и методы; а также анализ и оценка.

В отличие от предыдущего издания, в этом издании создается область знаний об архитектуре программного обеспечения (КА), отдельная от КА проектирования программного обеспечения, что обусловлено значительным интересом и ростом этой дисциплины с 1990-х годов.

## РАЗБИВКА ТЕМ ПО АРХИТЕКТУРЕ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ

Распределение тем по программной архитектуре показано на рис. 1.

<div style="text-align:center">
<img src="Images/Chapter 2/Рисунок 2.1. Разбивка тем по программной архитектуре KA.bmp"
alt="Рисунок 2.1. Разбивка тем по программной архитектуре.">
<br>Рисунок 2.1. Разбивка тем по программной архитектуре.
</div>

### 1 ОСНОВЫ АРХИТЕКТУРЫ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ

#### 1.1 Понятие “архитектура” (The Senses of “Architecture”)

В программной инженерии и смежных дисциплинах используется множество значений термина “архитектура”. Во—первых, “архитектура” часто относится к дисциплине: искусству и науке конструирования объектов - в данном случае систем, требующих большого количества программного обеспечения. Эта дисциплина включает в себя концепции, принципы, процессы и методы, которые были открыты и приняты сообществом.

Во-вторых, архитектура относится к различным процессам, посредством которых реализуется эта дисциплина. В этом разделе мы рассматриваем архитектурное проектирование как особую фазу жизненного цикла, охватывающую определенный набор действий, и отличаем его от более широких процессов проектирования, охватывающих жизненный цикл. И то, и другое обсуждается в разделе "Процессы архитектуры программного обеспечения".

В-третьих, “архитектура” означает результат применения дисциплины и процессов архитектурного проектирования для разработки архитектур программных систем. Архитектуры как результаты представлены в описаниях архитектуры. Это обсуждается в разделе Описание архитектуры программного обеспечения. Концепция архитектуры эволюционировала, и сегодня используется множество определений. В одном из ранних определений архитектуры, датированном 1990 годом, особое внимание уделялось структуре программного обеспечения:

**Архитектура.** Организационная структура системы или компонента. [из стандарта IEEE Std 610.12–1990, Глоссарий терминологии разработки программного обеспечения IEEE]

Это определение не отражает эволюцию представлений об архитектуре; например, это определение не позволяет нам отличить детальный дизайн модуля от его Makefile. Оба примера отражают организационную структуру программной системы или компонента, но не должны рассматриваться как архитектура. Более того, акцент на структуре часто ограничивался структурой кода и не охватывал все структуры программной системы:

Программная архитектура системы - это набор структур, необходимых для работы с системой. Эти структуры включают в себя программные элементы, отношения между ними и свойства обоих.

Однако в середине 1990-х годов архитектура программного обеспечения стала более широкой дисциплиной, включающей в себя более общее изучение программных структур и архитектур. Структуры многих программных систем напрямую не отражаются в структуре кода. Оба типа структуры влияют на систему в целом: на какое поведение способна система? Как она взаимодействует с другими системами? Как обрабатываются такие свойства, как безопасность? Признание того факта, что программное обеспечение содержит множество различных структур, побудило к обсуждению ряда интересных концепций, касающихся архитектуры программного обеспечения (и разработки программного обеспечения в целом), что привело к появлению современных определений, таких как:

**архитектура** (системы). фундаментальные концепции или свойства системы в ее окружении, воплощенные в ее элементах, взаимосвязях и принципах ее проектирования и эволюции

Ключевыми идеями в этом определении являются следующие:
(1) Архитектура - это то, что является фундаментальным для программной системы; не каждый элемент, взаимосвязь или интерфейс считается фундаментальным. (2) Архитектура рассматривает систему в ее окружении. Как и архитектура здания, архитектура программного обеспечения направлена вовне; она рассматривает контекст системы за ее пределами, принимая во внимание людей, организации, программное обеспечение, аппаратное обеспечение и другие устройства, с которыми система должна взаимодействовать.

#### 1.2 Заинтересованные стороны и проблемы (Stakeholders and Concerns)

У программной системы есть множество заинтересованных сторон с различными ролями и интересами по отношению к этой системе. Эти различные интересы называются проблемами, в соответствии с разделением проблем, предложенным Дейкстрой:

Позвольте мне попытаться объяснить вам, что, на мой вкус, характерно для любого разумного мышления. Это означает, что человек готов углубленно изучать какой-либо аспект своего предмета изолированно ради его собственной последовательности, все время зная, что он занимается только одним из аспектов. Мы знаем, что программа должна быть правильной, и мы можем изучать ее только с этой точки зрения; мы также знаем, что она должна быть эффективной, и мы можем, так сказать, изучить ее эффективность в другой день. В другом настроении мы можем спросить себя, является ли программа желательной, и если да, то почему. Но ничего не добьешься — наоборот! — занимаясь этими различными аспектами одновременно. Это то, что я иногда называю “разделением интересов”, которое, даже если и не совсем возможно, все же является единственным доступным методом эффективного упорядочивания своих мыслей, о котором я знаю. Вот что я подразумеваю под “[сосредоточением] внимания на каком-то аспекте”: это не означает игнорирование других аспектов, это просто признание того факта, что с точки зрения этого аспекта, другой не имеет значения. Это значит быть мыслящим в одном направлении и в нескольких направлениях одновременно.

То, что является фундаментальным в системе, зависит от интересов и ролей заинтересованных сторон. Следовательно, структура программного обеспечения также зависит от ролей и интересов заинтересованных сторон. (Смотрите также раздел "Методы проектирования" в разделе <a href="/4_Software Construction.markdown">"Разработка программного обеспечения"</a>).

Заказчика программной системы больше всего интересует, когда система будет готова и сколько будет стоить ее создание и эксплуатация. Пользователей больше всего интересует, что она делает и как ее использовать. У проектировщиков и программистов, создающих систему, есть свои проблемы, например, будет ли алгоритм соответствовать системным требованиям. У тех, кто отвечает за обеспечение безопасности работы системы, другие проблемы.

Проблемы охватывают широкий круг вопросов, возможно, связанных с любым воздействием на систему в ее окружающей среде, включая влияние на развитие, технологическое, деловое, операционное, организационное, политическое, экономическое, правовое, регулирующее, экологическое и социальное воздействие. Как и требования к программному обеспечению, они могут быть классифицированы с точки зрения функциональности, нефункциональности или ограничений. См. раздел <a href="/1_Software Requirements.markdown">"Требования к программному обеспечению"</a>. Проблемы проявляются в различных привычных формах, включая требования, атрибуты качества или “недочеты”, возникающие свойства (которые могут быть как желательными, так и запрещенными) и различного рода ограничения (перечисленные выше). Смотрите раздел "Качество программного обеспечения". В разделе <a href="/2_Software Architecture.markdown">"Описание архитектуры программного обеспечения"</a> показано, как проблемы формируют архитектуру и рабочие продукты, описывающие эти архитектуры. Примеры проблем приведены на рис. 2.

<div style="text-align:center">
<img src="Images/Chapter 2/Рисунок 2.2. Примеры архитектурных проблем.bmp"
alt="Рисунок 2.2. Примеры архитектурных проблем.">
<br>Рисунок 2.2. Примеры архитектурных проблем.
</div>

#### 1.3 Использование архитектуры (Uses of Architecture)

Основное назначение архитектуры программной системы заключается в том, чтобы дать тем, кто с ней работает, общее представление о системе, которое поможет в ее проектировании и конструировании. Архитектура также служит предварительной концепцией программной системы, которая обеспечивает основу для анализа и оценки альтернатив. Третье распространенное применение заключается в обеспечении обратного проектирования (или обратной архитектуры), помогая тем, кто работает с ИТ, разобраться в существующей программной системе, прежде чем приступать к техническому обслуживанию, усовершенствованию или модификации. Для поддержки такого использования архитектура должна быть задокументирована (см. раздел <a href="/2_Software Architecture.markdown">"Описание архитектуры программного обеспечения"</a>).

Закон Конвея гласит, что “организации, разрабатывающие системы... вынуждены создавать проекты, которые являются копиями коммуникационных структур этих организаций”. Это говорит о том, что архитектуры часто отражают структуру организаций, которые их разработали. В зависимости от системы программного обеспечения и организации, это может быть как преимуществом, так и недостатком. Архитектура может улучшить взаимодействие в большой команде или нарушить его. Каждое подразделение организации может основывать свои действия по планированию, калькуляции затрат и составлению графиков на знании архитектуры. Создание хорошо спланированной и документированной архитектуры является одним из подходов к повышению применимости и возможности повторного использования проектов программного обеспечения и компонентов. Архитектура формирует основу для разработки семейств программ или линейки программных продуктов. Это можно сделать, выявив общие черты между членами таких семейств и разработав повторно используемые и настраиваемые компоненты, учитывающие различия между членами семейства.

### 2 ОПИСАНИЕ АРХИТЕКТУРЫ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE ARCHITECTURE DESCRIPTION)

В разделе 1 <a href="/1_Software Requirements.markdown">"Основы архитектуры программного обеспечения"</a> архитектура программного обеспечения была определена как фундаментальные концепции или свойства программной системы в ее среде. Но у каждой заинтересованной стороны может быть свое представление о том, что является фундаментальным для этой программной системы, с учетом их точки зрения. Наличие мысленной модели архитектуры системы, возможно, подходит для небольших систем и для отдельных людей, работающих в одиночку. Однако для больших и сложных систем, разрабатываемых и эксплуатируемых командами, наглядное представление имеет неоценимое значение, особенно по мере развития концепции системы и по мере того, как люди присоединяются к команде или покидают ее. Конкретное представление в виде рабочего продукта также может служить основой для анализа архитектуры, организации ее проектирования и руководства ее внедрением. Эти рабочие продукты называются описаниями архитектуры (ADS).

AD документирует архитектуру программной системы. Он предназначен для тех заинтересованных сторон системы, которые имеют

проблемы, связанные с программной системой, решаются с помощью архитектуры. Как отмечалось в разделе 1 <a href="/1_Software Requirements.markdown">"Основы архитектуры программного обеспечения"</a>, основная аудитория состоит из дизайнеров, инженеров и программистов, чьи интересы связаны с созданием системы. Для этих заинтересованных сторон AD служит основой для разработки программной системы. Для других AD является основой для их работы — например, тестирования и обеспечения качества, сертификации, развертывания, эксплуатации и сопровождения, а также дальнейшего развития.

Исторически сложилось так, что в рекламе использовались текст и неформальные диаграммы для представления архитектуры. Однако разнообразие аудитории заинтересованных сторон и их различные интересы привели к разнообразию представлений об архитектуре. Часто эти представления являются специализированными, основанными на существующей практике сообществ или дисциплин, участвующих в эффективном решении различных проблем заинтересованных сторон (см. раздел <a href="/3_Software Design.markdown">"Проектирование программного обеспечения"</a> и <a>"Модели и методы разработки программного обеспечения"</a>). Эти различные представления называются архитектурными представлениями.

#### 2.1 Архитектурные представления и точки зрения (Architecture Views and Viewpoints)

Архитектурное представление представляет один или несколько аспектов архитектуры для решения одной или нескольких проблем. Представления решают различные задачи — например, логическое представление (показывает, как система будет удовлетворять функциональным требованиям); представление процесса (показывает, как система будет использовать параллелизм); физическое представление (показывает, как система будет развертываться и распространяться) и представление разработки (показывает, как верхний уровень-дизайн уровней разбит на блоки реализации, зависимости между этими блоками и то, как должна быть построена реализация). Разделение задач по точкам зрения позволяет заинтересованным сторонам сосредоточиться на нескольких вещах одновременно и обеспечивает средства управления понятностью архитектуры и ее общей сложностью.

По мере того, как архитектурная практика эволюционировала от использования текста и неформальных диаграмм к использованию более строгих представлений. Каждое архитектурное представление отображает архитектурные элементы системы с использованием четко определенных соглашений, обозначений и моделей. Соглашения для каждого вида задокументированы как архитектурная точка зрения. Точки зрения определяют создание, интерпретацию и использование архитектурных представлений. Каждая точка зрения связывает интересы заинтересованных сторон и аудитории с набором соглашений. При проектировании на основе модели каждый вид может быть автоматически сверен с соответствующей точкой обзора.

Общие точки зрения включают модульную точку зрения, используемую для описания реализации программной системы в терминах ее модулей и их организации; точку зрения компонентов и соединителей, используемую для описания крупномасштабной организации и взаимодействий во время выполнения программного обеспечения; логическую точку зрения, используемую для выражения фундаментальных принципов. концепции предметной области и возможностей программного обеспечения; точка зрения сценариев/вариантов использования, используемая для выражения того, как пользователи взаимодействуют с системой; информационная точка зрения, используемая для выражения ключевых информационных элементов системы и способов доступа к ним и их хранения; и точка зрения развертывания, используемая для описания того, как система настраивается и развертывается для работы. Другие документированные точки зрения включают в себя точки зрения доступности, поведения, обмена данными, обработки исключений, производительности, надежности, надежности охраны и защищенности от несанкционированного доступа.

Каждая точка зрения предоставляет словарь или язык для обсуждения ряда проблем и механизмов их решения. Язык точек зрения предоставляет заинтересованным сторонам общие средства выражения. Точки зрения не обязательно должны ограничиваться одной программной системой, они могут быть повторно использованы организацией или сообществом разработчиков для многих аналогичных систем. При использовании универсальных представлений, таких как Unified Modeling Language (UML), они могут быть специализированы для системы, ее предметной области или участвующих организаций. (см. раздел <a href="#23-языки-описания-архитектуры-и-архитектурные-фреймворки-architecture-description-languages-and-architecture-frameworks">2.3 Языки описания архитектуры и архитектурные фреймворки</a>).

Помимо определения форм представления, архитектурная точка зрения может охватывать способы работы в рамках дисциплины или сообщества практиков. Например, точка зрения надежности программного обеспечения отражает существующие практики сообщества специалистов по надежности программного обеспечения для выявления и анализа проблем надежности, формулирования альтернатив, синтеза и представления решений. Подобно техническим справочникам, общие и специализированные точки зрения предоставляют средства для документирования повторяющихся или повторно используемых подходов к решению повторяющихся проблем с программным обеспечением. Клементс и др. были введены типы представлений, которые устанавливают трехстороннюю классификацию точек зрения. Этими категориями являются модуль, компонент и соединитель, а также типы представлений распределения.

В описаниях архитектуры часто используется несколько архитектурных представлений для представления различных структур, необходимых для решения различных проблем различных заинтересованных сторон. Существует два общих подхода к построению представлений: синтетический подход и проективный подход. При синтетическом подходе архитекторы создают представления интересующей системы и интегрируют эти представления в описание архитектуры, используя правила соответствия. При проектном подходе архитектор создает каждый вид с помощью некоторой рутинной, возможно, механической, процедуры извлечения из базовой “модели uber”. Следствием использования нескольких видов в РЕКЛАМЕ является потенциальное несоответствие между видами. Согласованы ли они? Описывают ли они одну и ту же систему? Это называется проблемой множественных представлений. Проективный подход ограничивает возможные несоответствия, поскольку представления основаны на единой (предположительно непротиворечивой) модели, но за счет выразительности: базовая модель может оказаться неспособной отразить произвольные проблемы. В рамках синтетического подхода архитекторы объединяют виды в единое целое, используя связи или другие формы прослеживаемости для перекрестных ссылок на элементы вида для достижения согласованности. Точки зрения часто включают правила для установления согласованности или других взаимосвязей между видами.

#### 2.2 Архитектурные стили и шаблоны (Architecture Styles and Patterns)

Архитектурный стиль, основанный на его использовании в долгой истории архитектуры зданий, представляет собой особый способ построения, придающий программной системе характерные черты. Архитектурный стиль часто отражает масштабную организацию программной системы. В отличие от этого, архитектурный шаблон выражает общее решение повторяющейся проблемы в контексте программной системы. Шаблоны обсуждаются в разделе <a href="#44-показатели-архитектуры-architecture-metrics">4.4 раздела Software Design</a>.

Были задокументированы различные архитектурные стили и шаблоны:
- Общие структуры (например, многоуровневые, call-and-return, каналы и фильтры, blackboard, сервисы и микросервисы)
- Распределенные системы (например, клиент-серверные, многоуровневые, посреднические, с публикацией и подпиской, двухточечные, мастер-реплики)
- Управляемые методами (например, объектно-ориентированные, управляемые событиями, потоками данных)
- Взаимодействие пользователя с компьютером (например, модель-представление- контроллер, представление-абстракция-управление)
- Адаптивные системы (например микроядро, рефлексивные и метауровневые архитектуры)
- Виртуальные машины (например, интерпретаторы, основанные на правилах, для управления процессами)

Строгой границы между архитектурными стилями и паттернами не существует. Архитектурный стиль описывает общую структуру системы или подсистемы и, таким образом, определяет основные части (под) системы и способы их взаимодействия. Архитектурные шаблоны существуют в различных масштабах и могут многократно применяться в архитектуре программного обеспечения. Оба они обеспечивают решение конкретной вычислительной задачи в данном контексте. Фактически, любой архитектурный стиль можно описать как архитектурный шаблон.

Что касается точек зрения на архитектуру, которые предоставляют языки для описания различных аспектов программных систем, то объединяющим понятием является то, что и шаблоны, и стили являются идиомами в этих языках для выражения конкретных аспектов архитектуры (и дизайна, см. раздел <a href="#44-показатели-архитектуры-architecture-metrics">4.4 Шаблоны проектирования в Software Design</a>). Архитектурный шаблон или стиль использует словарь, взятый из языка viewpoint, определенным образом, чтобы рассказать об элементах представления, включая типы элементов и связей и их экземпляры, а также ограничения на их комбинирование. Таким образом, точки зрения, шаблоны и стили являются механизмами кодификации рекомендуемых практик для облегчения повторного использования.

#### 2.3 Языки описания архитектуры и архитектурные фреймворки (Architecture Description Languages and Architecture Frameworks)

Язык описания архитектуры (ADL) - это специализированный язык для описания архитектуры программного обеспечения. ADL возник из языков взаимодействия модулей для программирования в целом. Некоторые ADL ориентированы на одну прикладную область или архитектурный стиль (например, MetaH для систем авионики в стиле, управляемом событиями), другие - на широкий спектр задач, решаемых на предприятии (например, ArchiMate ™ ). В качестве ADL часто используется UML. ADLS часто предоставляют не поддающиеся описанию возможности для анализа архитектуры или генерации кода.

Архитектурный фреймворк отражает “соглашения, принципы и практики для описания архитектур, разработанных в конкретной области применения и/или сообществе заинтересованных сторон”. Фреймворки кодифицируют рекомендуемые практики в рамках конкретной области и реализуются в виде взаимосвязанного набора точек зрения или ADL. Примерами могут служить платформа унифицированной архитектуры OMG (UAF ® ) и эталонная модель ISO для открытой распределенной обработки (RM-ODP).

#### 2.4 Архитектура как важные решения (Architecture as Significant Decisions)

Архитектурное проектирование - это творческий процесс. В ходе этой деятельности архитекторы принимают множество решений, которые оказывают глубокое влияние на архитектуру, последующий процесс разработки и систему программного обеспечения. На принятие решений влияют многие факторы, в том числе серьезные опасения заинтересованных сторон в отношении системы программного обеспечения, ее требований и доступных ресурсов в ходе разработки и на протяжении всего жизненного цикла. Влияние на параметры качества и компромиссы между конкурирующими параметрами качества часто являются основой для принятия проектных решений.

Результатом деятельности по архитектурному проектированию является принятие ряда решений, некоторые из которых вытекают из предыдущих решений. Анализ решений обеспечивает один из подходов к оценке архитектуры. Решения должны быть четко задокументированы вместе с объяснением логического обоснования каждого нетривиального решения.

Архитектурное обоснование отражает причины, по которым было принято то или иное архитектурное решение. Оно включает предположения, сделанные до принятия решения, рассмотренные альтернативы и компромиссы или критерии, использованные для выбора одного подхода и отклонения других. Запись отклоненных решений и причин их отклонения также может быть полезной. В будущем это может либо предотвратить принятие неверного решения разработчиком программного обеспечения — того, которое было отклонено ранее по забытым причинам, — либо позволить разработчику осознать, что соответствующие условия изменились и что он может пересмотреть свое решение.

Архитектурно-технический долг был введен для того, чтобы отразить тот факт, что сегодняшние решения в отношении архитектуры могут иметь значительные последствия на более позднем этапе жизненного цикла программной системы. Отложенные решения могут поставить под угрозу ее ремонтопригодность или возможность дальнейшего развития, и этот долг придется выплачивать — как правило, другим лицам, не обязательно тем, кто стал причиной возникновения задолженности. Такая задолженность оказывает экономическое воздействие на будущее развитие и функционирование системы. Например, когда на разработку программного обеспечения уходит мало времени, проектируется начальная система с небольшой модульностью для ее первого выпуска. Отсутствие модульности влияет на время разработки последующих версий, влияет на других разработчиков и, возможно, на будущую ремонтопригодность системы. Дополнительные функциональные возможности могут быть добавлены позже только путем проведения обширного рефакторинга, который повлияет на будущие сроки и приведет к появлению дополнительных дефектов. Архитектурно-технический долг можно анализировать и управлять им, как и другими проблемами, используя модели и точки зрения.

### 3. ПРОЦЕСС СОЗДАНИЯ АРХИТЕКТУРЫ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE ARCHITECTURE PROCESS)

В этом разделе описывается общая модель процесса архитектурного проектирования. Он используется для демонстрации того, как архитектурное проектирование вписывается в общий контекст процессов разработки программного обеспечения (см. раздел <a href="/4_Software Construction.markdown">"Процесс разработки программного обеспечения"</a>), а также в качестве основы для понимания многих методов архитектуры, используемых в настоящее время. В нем также признается, что архитектурное проектирование может осуществляться в различных контекстах.

#### 3.1 Архитектура в контексте (Architecture in Context)

Архитектура существует в нескольких контекстах. В традиционном жизненном цикле существует стадия архитектурного проектирования, определяемая требованиями к программной системе (см. раздел <a href="/1_Software Requirements.markdown">Требования к программному обеспечению</a>). Некоторые требования будут являться архитектурными факторами, влияющими на основные решения об архитектуре, в то время как другие требования будут перенесены на последующие этапы процесса разработки программного обеспечения, такие как проектирование или конструирование.

В настройках линейки продуктов или семейства продуктов архитектура линейки продуктов/семейства продуктов разрабатывается с учетом базового набора потребностей, требований и других факторов. Эта архитектура будет отправной точкой для одного или нескольких экземпляров продукта, разработанных с учетом конкретных требований к продукту, на основе базового продукта.

В гибких подходах обычно нет стадии проектирования архитектуры. Единственным описанием архитектуры может быть сам код. В некоторых гибких практиках говорят, что архитектура программного обеспечения “возникает” в результате кодирования системы на основе пользовательских историй в ходе быстрой серии циклов разработки. Хотя этот подход и принес определенный успех в информационных системах, ориентированных на пользователя, трудно обеспечить создание адекватной архитектуры для других классов приложений, таких как встраиваемые и киберфизические системы, когда критические архитектурные свойства могут не отражаться в каких-либо пользовательских историях.

В контексте предприятия и системы систем, а также в линейках продуктов и семействах, общая архитектура (предприятия, системы или линейки продуктов/семейства) обеспечивает основные требования и рекомендации в отношении формы и ограничений, накладываемых на архитектуру программного обеспечения. Этот базовый уровень может быть реализован с помощью спецификаций, дополнительных требований, интерфейсов прикладного программирования (API) или комплектов для обеспечения соответствия.

#### 3.1.1 Связь архитектуры с дизайном (Relation of Architecture to Design)

Дизайн и архитектура часто неразличимы. Иногда говорят, что архитектура - это набор решений, которые нельзя доверять дизайнерам. На самом деле архитектура возникла из разработки программного обеспечения по мере развития этой дисциплины, в основном с 1990-х годов. Существуют различные различия: дизайн часто фокусируется на установленном наборе требований, в то время как архитектура часто должна формировать требования путем переговоров с заинтересованными сторонами и анализа требований. Кроме того, архитектура часто должна учитывать и решать более широкий спектр проблем, которые могут в конечном итоге стать требованиями к интересующей программной системе.

#### 3.2 Архитектурное проектирование (Architectural Design)

Архитектурное проектирование - это применение принципов и методов проектирования в процессе создания и документирования архитектуры программного обеспечения. Существует множество архитектурных методов для выполнения этой работы. В этом разделе описывается общая модель архитектурного проектирования, лежащая в основе различных архитектурных методов, основанных на.

Архитектурное проектирование включает в себя определение основных компонентов системы, их функций, свойств и интерфейсов, а также взаимосвязей и взаимодействий между ними и с окружающей средой. При архитектурном проектировании определяются основные принципы системы, но другие аспекты, такие как внутренние детали основных компонентов, откладываются.

Типичные проблемы, возникающие при архитектурном проектировании, включают в себя следующее:

- Общие архитектурные стили и компьютерные парадигмы
- Масштабное разделение системы на ключевые компоненты
- Связь и взаимодействие между компонентами
- Распределение задач и обязанностей по проектированию между компонентами
- Интерфейсы компонентов
- Понимание и анализ характеристик масштабирования и производительности, потребления ресурсов и надежности
- Крупномасштабные/общесистемные подходы к решению основных задач (таких как безопасность, где это применимо)

Общий обзор архитектурного проекта представлен на рис. 3.

<div style="text-align:center">
<img src="Images/Chapter 2/Рисунок 2.3. Общая модель архитектурного проектирования.bmp"
alt="Рисунок 2.3. Общая модель архитектурного проектирования">
<br>Рисунок 2.3. Общая модель архитектурного проектирования
</div>

#### 3.2.1 Анализ архитектуры (Architecture Analysis)

Анализ архитектуры собирает и формулирует требования к архитектуре (иногда называемые “архитектурно значимыми требованиями” или ASR): любые ‘требования к программной системе, которые влияют на ее архитектуру’. Анализ архитектуры основан на выявленных проблемах и понимании контекста программного обеспечения, включая известные требования, потребности заинтересованных сторон и окружающей среды.

ограничения. ASR отражают проблемы проектирования, которые должна решить архитектура. Часто сочетание первоначальных требований и известных ограничений не может быть выполнено без последствий для затрат, графика и т.д. В таких случаях для изменения поступающих потребностей, требований и ожиданий, чтобы сделать решения возможными, используются переговоры. Архитектурный анализ позволяет получить ASR, первоначальные общесистемные решения и любые общие системные принципы, вытекающие из контекста (см. раздел <a href="#31-архитектура-в-контексте-architecture-in-context">Архитектура в контексте</a>).

#### 3.2.2 Синтез архитектуры (Architecture Synthesis)

Architecture synthesis разрабатывает возможные решения в соответствии с результатами архитектурного анализа. В процессе синтеза разрабатываются подробные решения проблем проектирования, выявленных ASR, и принимаются компромиссные решения, учитывающие взаимодействие между этими решениями. Эти результаты учитываются при анализе архитектуры, что приводит к разработке ASR, принципов и решений, которые затем приводят к дальнейшим подробным элементам решения.

#### 3.2.3 Оценка архитектуры (Architecture Evaluation)

Оценка архитектуры позволяет определить, удовлетворяют ли выбранные решения требованиям ASR и когда и где требуется доработка. Методы оценки архитектуры обсуждаются в разделе 4 <a href="/4_Software Construction.markdown">"Оценка архитектуры программного обеспечения"</a>.

#### 3.3 Практика, методы и тактика разработки архитектуры (Architecture Practices, Methods and Tactics)

Существует ряд документированных методов разработки архитектуры.

#### 3.4 Проектирование в крупном масштабе (Architecting in the Large)

Архитектурное проектирование - это особый этап жизненного цикла, но это только одна часть разработки программного обеспечения. Разработка программного обеспечения происходит не в вакууме, как указано в разделе <a href="#31-архитектура-в-контексте-architecture-in-context">3.1 "Архитектура в контексте"</a>, а в среде, которая часто включает в себя другие архитектуры. Например, архитектура приложения должна соответствовать архитектуре предприятия; чтобы “хорошо работать” в системе систем, архитектура каждой составляющей системы должна соответствовать архитектуре системы систем. В таких случаях эти взаимосвязи должны быть отражены в виде ASR в разрабатываемом программном обеспечении. Многие виды деятельности и принципы разработки программного обеспечения не ограничиваются программным обеспечением, но в равной степени применимы к системной и корпоративной архитектуре. Вайнрайх и Бухгехер расширили модель Хофмайстера и др., использованную в разделе <a href="#32-архитектурное-проектирование-architectural-design">3.2 "Архитектурное проектирование"</a>, включив в нее следующие виды деятельности:

- внедрение архитектуры: контроль за внедрением и сертификация соответствия реализаций архитектуре
- сопровождение архитектуры: управление и расширение архитектуры после ее внедрения
- управление архитектурой: управление
портфелем взаимосвязанных архитектур организации.
- управление знаниями об архитектуре: извлечение, поддержка, совместное использование и эксплуатация повторно используемых архитектурных ресурсов, включая решения, извлеченные уроки, спецификации и документацию по всей организации

### 4 ОЦЕНКА АРХИТЕКТУРЫ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE ARCHITECTURE EVALUATION)

#### 4.1 Качество архитектуры (Goodness in Architecture)

Архитектурный анализ проводится на протяжении всего процесса создания и поддержки архитектуры. Оценка архитектуры, как правило, проводится третьими сторонами на определенных этапах в качестве одной из форм оценки.

Учитывая многогранный и междисциплинарный характер архитектуры программного обеспечения, существует множество аспектов того, что делает архитектуру “хорошей”. Римский архитектор Витрувий утверждал, что все здания должны обладать качествами firmitas, utilitas и venustas (в переводе с латыни - прочность, полезность и красота).

Что касается программной системы и ее архитектуры, то можно задать следующие вопросы:

- Надежна ли она на протяжении всего срока службы и возможно ли ее развитие?
- Подходит ли она для использования по назначению?
- Возможно ли и рентабельно ли создавать программные системы с использованием этой архитектуры?
- Является ли это если не красивым, то, по крайней мере, понятным для тех, кто должен создавать, использовать и поддерживать программное обеспечение?

Каждая архитектурная проблема может быть основой для оценки. Оценка проводится с учетом требований (если таковые имеются) или потребностей, ожиданий и норм (в других ситуациях). “Хорошая” архитектура должна учитывать не только конкретные интересы заинтересованных сторон, но и последствия их взаимодействия. Например: создание и проверка защищенной архитектуры могут быть чрезмерно дорогостоящими; простая в использовании архитектура может оказаться непригодной для обслуживания в течение всего срока службы системы, если в нее не могут быть встроены новые технологии. Отчет SARA предоставляет общую основу для оценки архитектуры программного обеспечения.

#### 4.2 Рассуждения об архитектурах (Reasoning about Architectures)

Каждая архитектурная проблема имеет свою основу для оценки. Оценка наиболее эффективна, когда она основана на надежных описаниях существующей архитектуры. Объявления можно запрашивать, проверять и анализировать. Например, оценка функциональности или поведения выигрывает от наличия четкого представления архитектуры или другого представления этого аспекта системы для изучения. Специализированные проблемы, такие как надежность, надежность и защищенность, часто зависят от специализированных представлений из соответствующей дисциплины.

Часто архитектурная документация является незавершенной, неполноценной, устаревшей или вообще несуществующей. В таких случаях при оценке необходимо опираться на знания участников в качестве основного источника информации.

Сценарии использования часто используются для проверки полноты и согласованности архитектуры (см. раздел <a>Модели и методы разработки программного обеспечения</a>) путем сравнения шагов в сценарии использования с элементами архитектуры программного обеспечения, которые были бы задействованы при выполнении этих шагов.

#### 4.3 Обзоры архитектуры (Architecture Reviews)

Архитектурные обзоры - это эффективный подход к оценке состояния и качества архитектуры и выявлению рисков путем оценки одной или нескольких архитектурных проблем. Многие обзоры носят неформальный характер или основаны на опыте, а некоторые более структурированы и организованы вокруг контрольного списка тем, которые необходимо охватить. Парнас и Вайс предложили эффективный подход к проведению обзоров, называемый активными обзорами, при котором вместо контрольных списков каждый пункт оценки предполагает выполнение рецензентом определенных действий для получения необходимой информации.

Многие организации внедрили практику анализа архитектуры. Например, отраслевая группа разработала структуру для определения, проведения и документирования обзоров архитектуры и их результатов.

#### 4.4 Показатели архитектуры (Architecture Metrics)

Архитектурная метрика - это количественная мера характеристики архитектуры. Были определены различные архитектурные метрики. Многие из них возникли как метрики дизайна или кода, которые были “изменены” для применения к архитектуре. Показатели включают в себя зависимость компонентов, цикличность и цикломатическую сложность, внутреннюю сложность модуля, взаимосвязь модулей, уровни вложенности и соответствие использованию шаблонов, стилей и (обязательно) API.

В парадигмах непрерывной разработки (таких как DevOps) появились другие показатели, которые фокусируются не непосредственно на архитектуре, а на быстродействии процесса, такие как показатели времени выполнения изменений, частоты развертывания, среднего времени восстановления обслуживания и частоты отказов при изменении — как показатели состояния архитектуры.