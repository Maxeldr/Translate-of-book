# ГЛАВА 3

# ПРОЕКТИРОВАНИЕ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE DESIGN)

### АКРОНИМЫ (ACRONYMS)

|      |                                                        |                                                              |
|------|--------------------------------------------------------|--------------------------------------------------------------|
| API  | Application programming interface                      | Интерфейс прикладного программирования                       |
| AOD  | Aspect-oriented design                                 | Аспектно-ориентированный дизайн                              |
| CBD  | Component-based design                                 | Проектирование на основе компонентов                         |
| CRC  | Class responsibility collaborator (or collaboration)   | Сотрудник по групповой ответственности (или коллаборация)    |
| DFD  | Data flow diagram                                      | Схема потока данных                                          |
| DSL  | Domain-specific language                               | Язык, зависящий от предметной области                        |
| ERD  | Entity relationship diagram                            | Диаграмма взаимосвязей сущностей                             |
| FOSS | Free and open source software                          | Бесплатное программное обеспечение с открытым исходным кодом |
| IDL  | Interface description language                         | Язык описания интерфейса                                     |
| MBD  | Model-based design                                     | Проектирование на основе модели                              |
| MDD  | Model-driven design                                    | Дизайн, основанный на моделировании                          |
| OO   | Object-oriented                                        | Объектно-ориентированный                                     |
| PDL  | Program design language                                | Язык разработки программы                                    |
| SDD  | Software design description                            | Описание разработки программного обеспечения                 |
| UML  | Unified Modeling Language                              | Унифицированный язык моделирования                           |

## ВВЕДЕНИЕ (INTRODUCTION)

В этой главе разработка программного обеспечения рассматривается с нескольких точек зрения — основное внимание уделяется базовым концепциям, контексту и процессам, качествам и стратегиям разработки программного обеспечения, а также регистрации и оценке проектов.

Понятие “дизайн” используется различными, но тесно связанными способами для обозначения
(1) дисциплины ("использование научных принципов, технической информации и воображения при определении программной системы для выполнения [заранее определенных] функций с максимальной экономией и эффективностью"); (2) процессов выполнения в рамках этой дисциплины; (3) результат применения этой дисциплины; и (4) стадия жизненного цикла программной системы, в течение которой эти процессы дают эти результаты.

Проектирование программного обеспечения, рассматриваемое как деятельность жизненного цикла, представляет собой применение дисциплины программной инженерии, в рамках которой анализируются требования к программному обеспечению для определения внешних характеристик программного обеспечения и его внутренней структуры в качестве основы для создания программного обеспечения.

Описание разработки программного обеспечения (SDD) документирует результат разработки программного обеспечения. Это “представление программного обеспечения, созданного для облегчения анализа, планирования, внедрения и принятия решений". Описание дизайна программного обеспечения используется как средство передачи информации о дизайне программного обеспечения и может рассматриваться как схема или модель системы”.

SDD, который может принимать различные формы, включает в себя разбиение программного обеспечения на компоненты, организацию этих компонентов и определение интерфейсов между ними и между программным обеспечением и внешним миром — до уровня детализации, позволяющего их создавать.

Разработка программного обеспечения осуществляется в три этапа:

- архитектурное проектирование программной системы
- высокоуровневое или внешнее проектирование системы и ее компонентов
- детальное или внутреннее проектирование

Архитектурное проектирование - это часть проектирования, которая рассматривается в разделе "Архитектура программного обеспечения".

## РАЗБИВКА ТЕМ ДЛЯ РАЗРАБОТКИ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ

Распределение тем для КА по разработке программного обеспечения показано на рис. 1.

<div style="text-align:center">
<img src="Images/Chapter 3/Рисунок 3.1. Разбивка тем для КА по разработке программного обеспечения.png"
alt="Рисунок 3.1. Разбивка тем для КА по разработке программного обеспечения">
<br>Рисунок 3.1. Разбивка тем для КА по разработке программного обеспечения.
</div>

### 1 ОСНОВЫ ПРОЕКТИРОВАНИЯ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE DESIGN FUNDAMENTALS)

Представленные здесь концепции и терминология формируют основу для понимания роли и сферы применения разработки программного обеспечения.
#### 1.1 Дизайн-мышление (Design Thinking)

Дизайн окружает нас повсюду, в вещах и организациях, которые были созданы для удовлетворения потребностей или решения проблем.

В общем смысле дизайн можно рассматривать как форму решения проблем. Например, концепция порочной проблемы — проблемы, не имеющей окончательного решения, — интересна с точки зрения понимания пределов возможностей дизайна. Многие другие понятия и концепты помогают нам понять дизайн в его общем смысле: цели, ограничения, альтернативы, представления и решения. (Смотрите также методы решения проблем в разделе Основы вычислительной техники КА.)

Дизайн-мышление включает в себя две основные составляющие: (1) понимание потребности или проблемы и (2) разработку решения. Росс, Гуденаф и Ирвин предлагают разработку дизайн-мышления, соответствующего программному обеспечению:

Этот процесс состоит из пяти основных этапов: (1) сформулировать цель; (2) сформулировать концепцию того, как эта цель может быть достигнута; (3) разработать механизм, реализующий концептуальную структуру; (4) ввести обозначение для выражения возможностей механизма и вызова его использования; (5) описать использование обозначения в контексте конкретной проблемы для вызова механизма таким образом, чтобы цель была достигнута.

Это особенно уместно, поскольку большая часть разработки программного обеспечения заключается в создании необходимого словаря для выражения сформулируйте проблему, сформулируйте ее решение и реализуйте это решение. Эти шаги подчеркивают лингвистическую природу решения проблем при разработке программного обеспечения. Это повторяющаяся схема, которую мы наблюдаем на протяжении всего проектирования высокого уровня, детального проектирования и проектирования архитектуры (см. раздел "Проектирование" в разделе "Архитектура программного обеспечения"). Таким образом, разработка программного обеспечения - это практический процесс преобразования формулировки проблемы в формулировку решения. Разработка программного обеспечения имеет общие черты с другими видами проектирования. Более глубокое понимание дизайна можно получить с помощью теории проектирования.

#### 1.2 Контекст разработки программного обеспечения (Context of Software Design)

Проектирование программного обеспечения является важной частью процесса разработки программного обеспечения. Чтобы понять роль проектирования программного обеспечения, необходимо увидеть, как оно вписывается в жизненный цикл разработки программного обеспечения (см. раздел <a href="/4_Software Construction.markdown">процесса разработки программного обеспечения</a>). Чтобы понять этот контекст, важно понимать основные характеристики и роли требований к программному обеспечению, разработки программного обеспечения, тестирования программного обеспечения и сопровождения программного обеспечения. Контекст зависит от многих факторов, включая степень формальности и стадию жизненного цикла.

Разработка программного обеспечения - это преобразование требований заказчика и других факторов, в том числе потребностей и озабоченностей, в реализуемые технические условия разработки. Его контекст включает в себя следующее:

- Интерфейс проектирования с требованиями к программному обеспечению: Требования определяют набор проблем, которые должен решить проект программного обеспечения.
- Интерфейс проектирования с архитектурой программного обеспечения: В тех случаях, когда архитектура уже разработана, она ограничивает проектирование, охватывая фундаментальные аспекты системы: ее основные компоненты и их взаимосвязи, интерфейсы прикладного программирования (API), используемые стили и шаблоны, а также архитектурные принципы, которые необходимо соблюдать и применять.
- Интерфейс проектирования с разработкой программного обеспечения: Разработка программного обеспечения должна служить руководством для разработчиков по созданию системы.
- Интерфейс проектирования с тестированием программного обеспечения: Разработка программного обеспечения обеспечивает основу для общей стратегии тестирования и тестовых примеров, которые гарантируют, что проект будет правильно реализован и будет работать так, как задумано.

#### 1.3 Ключевые вопросы проектирования программного обеспечения (Key Issues in Software Design)

При разработке программного обеспечения необходимо учитывать множество ключевых вопросов. Некоторые из них относятся к проблемам качества, которые должны быть решены в любом программном обеспечении (производительность, безопасность, надежность, удобство использования и т.д.). Другой важный вопрос заключается в том, как усовершенствовать, организовать, соединить и упаковать программные компоненты. Эти проблемы настолько фундаментальны, что все подходы к проектированию так или иначе направлены на их решение. (Смотрите раздел <a href="/2_Software Architecture.markdown#12-заинтересованные-стороны-и-проблемы-stakeholders-and-concerns">"Заинтересованные стороны и проблемы"</a> в разделе <a href="/2_Software Architecture.markdown">"Архитектура программного обеспечения"</a>, раздел <a href="#14-принципы-разработки-программного-обеспечения-software-design-principles">1.4 "Принципы проектирования программного обеспечения"</a> и раздел <a href="#5-стратегии-и-методы-проектирования-программного-обеспечения-software-design-strategies-and-methods">5 "Стратегии и методы проектирования программного обеспечения"</a>).

Напротив, другие проблемы “связаны с некоторым аспектом поведения программного обеспечения, который не относится к прикладной области, но который затрагивает некоторые из поддерживающих доменов”. Такие проблемы, которые часто затрагивают функциональность системы, называются аспектами, которые “как правило, являются не единицами функциональной декомпозиции программного обеспечения, а скорее свойствами, которые системным образом влияют на производительность или семантику компонентов”.

#### 1.4 Принципы разработки программного обеспечения (Software Design Principles)

Принцип - это “фундаментальная истина или утверждение, которое служит основой для системы убеждений, поведения или цепочки рассуждений”. [Оксфордский словарь английского языка]

Принципы проектирования служат руководством для принятия решений в процессе проектирования. Некоторые принципы возникли на заре разработки программного обеспечения, другие даже предшествовали этой дисциплине, вытекая из лучших практик в области проектирования, не связанных с программным обеспечением. (См. раздел <a>Основы инженерного дела</a>.) Принятию решений также могут способствовать количественные методы, которые обсуждаются в разделе Экономика разработки программного обеспечения, КА. Принципы проектирования программного обеспечения - это ключевые понятия, которые лежат в основе многих различных концепций, подходов и методов проектирования программного обеспечения. Перечисленные ниже принципы применимы к любому из трех этапов проектирования. Многие из этих принципов взаимосвязаны. Независимо от того, используются ли они сами по себе или в сочетании с другими принципами, они находят отражение в других областях проектирования программного обеспечения, создавая множество концепций и конструкций, которые можно найти в описании дизайна, стратегиях и методах. Это само по себе является применением процесса дизайн-мышления, описанного выше. Принципы разработки программного обеспечения включают следующее:

- Абстракция - это “взгляд на объект, который фокусируется на информации, относящейся к определенной цели, и игнорирует остальную информацию”. “Принцип абстракции...
помогает выявить существенные свойства, общие для внешне различных объектов”. (Смотрите также раздел <a>"Абстракция"</a> в разделе <a>"Основы вычислительной техники"</a>.)
- Разделение задач (SoC). Задача проектирования - это “область интересов в отношении разработки программного обеспечения”, которая имеет отношение к одной или нескольким заинтересованным сторонам. Выявляя и разделяя проблемы, проектировщик может сосредоточиться на каждой проблеме системы в отдельности, о которой Дейкстра говорит, что “даже если она не идеальна возможно, [SoC] пока является единственным доступным методом эффективного упорядочения своих мыслей” (см. также раздел <a href="/2_Software Architecture.markdown#12-заинтересованные-стороны-и-проблемы-stakeholders-and-concerns">"Заинтересованные стороны и проблемы в программной архитектуре</a>").
- Модульность (или уточнение, или декомпозиция) структурирует большое программное обеспечение как состоящее из более мелких компонентов или блоков. Каждый компонент имеет название и четко определенные интерфейсы для взаимодействия с другими компонентами. Компоненты меньшего размера легче понять и, следовательно, обслуживать. Существует множество стратегий модульности. (См. раздел <a href="#5-стратегии-и-методы-проектирования-программного-обеспечения-software-design-strategies-and-methods">5 "Стратегии и методы разработки программного обеспечения"</a>.)
- Традиционно цель состоит в том, чтобы распределить различные функциональные возможности и обязанности по различным компонентам. Парнас настаивал на том, что каждый модуль в системе должен нести единую ответственность. Можно рассматривать модульность как частный случай более общих стратегий, таких как разделение задач или "разделяй и властвуй". (смотрите раздел <a>"Методы решения проблем" в разделе "Основы вычислительной техники"</a>).
- Инкапсуляция (или сокрытие информации) основана на принципах абстракции и модульности, так что несущественная информация становится менее доступной, позволяя пользователям модуля сосредоточиться на важных элементах интерфейса.
- Разделение интерфейса и реализации - это применение инкапсуляции, которое включает в себя определение компонента путем указания его общедоступных интерфейсов, которые известны клиентам и доступны для них; изолируя использование компонента от деталей того, как этот компонент построен. (см. <a>Инкапсуляцию</a> (или сокрытие информации) выше.)
- Взаимосвязь определяется как “мера взаимозависимости между модулями в компьютерной программе”. Большинство методов проектирования предполагают, что модули должны быть слабо связаны.
- Сплоченность (или локализация) определяется как “мера силы взаимосвязи элементов внутри модуля”. Сплоченность подчеркивает организацию составляющих модуля на основе их взаимосвязанности. Большинство методов проектирования предполагают, что модули должны максимально сочетать в себе элементы/локальность.
- Единообразие — это принцип согласованности всех компонентов программного обеспечения. Для решения общих или повторяющихся проблем следует разрабатывать общие решения. К ним относятся схемы именования, обозначения и синтаксис, интерфейсы, которые определяют доступ к службам и механизмам, а также порядок элементов и параметров. Этого можно достичь с помощью таких условностей, как правила, форматы и стили.
- Полнота (или достаточность) означает обеспечение того, чтобы программный компонент отражал важные характеристики абстракции и ничего не упускал из виду. Полнота может принимать различные формы, возможно, наиболее важной из которых является соответствие проекта требованиям: дизайн должен быть достаточным для того, чтобы разработчики могли продемонстрировать, как будут выполнены требования и как последующая работа будет соответствовать этим требованиям. Дизайн должен быть завершенным в отношении режимов и состояний программного обеспечения.
- Подтверждаемость означает, что информация, необходимая для подтверждения правильности, полноты и пригодности программного обеспечения к использованию, доступна. Это относится к любому программному обеспечению, но особенно важно для программного обеспечения с высокой степенью надежности, такого как программное обеспечение, требующее обеспечения безопасности, надежность или вопросы, имеющие решающее значение для безопасности. SDD должен быть достаточным в качестве основы для проверки проекта.
- Другие принципы проектирования. В последнее время, с появлением все большего числа автономных систем, использованием машинного обучения и искусственного интеллекта и, в целом, систем с расширяющимся социальным воздействием, были разработаны подходы к этически выверенному проектированию, направленные на решение таких проблем, как общечеловеческие ценности, политическое самоопределение, а также надежность агентств обработки данных и технических средств. Общими принципами этически выверенного дизайна являются права человека, благополучие, управление данными, эффективность, прозрачность, подотчетность, осведомленность о злоупотреблениях и компетентность.

### 2 ПРОЦЕССЫ РАЗРАБОТКИ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE DESIGN PROCESSES)

Разработка программного обеспечения обычно считается многоэтапным процессом или деятельностью. Разработка программного обеспечения может быть разделена на следующие этапы или фазы. При необходимости мы выделяем этот этап из общей деятельности:

- Этап архитектурного проектирования
- Этап высокоуровневого проектирования
- Этап детального проектирования

На этапе архитектурного проектирования рассматриваются основы системы в целом и ее окружения (см. раздел <a href="/2_Software Architecture.markdown">Архитектура программного обеспечения</a>).

Этап проектирования высокого уровня направлен вовне - разработка структуры и организации программного обеспечения верхнего уровня, определение его различных компонентов и того, как эта программная система и ее компоненты взаимодействуют с окружающей средой и ее элементами.

Этап детального проектирования направлен внутрь компании - на детализацию каждого компонента, чтобы облегчить его создание и выполнить его внешние обязательства, включая дальнейшую переработку компонентов программного обеспечения в модули и агрегаты.

Каждый этап отражает основную схему, описанную в разделе 1.1 Дизайн-мышление.
Не все этапы присутствуют в каждом процессе разработки программного обеспечения. Однако, если они присутствуют, каждый этап накладывает обязательства на следующий этап в отношении программного обеспечения, которое находится в стадии разработки.

Хотя разработчики программного обеспечения обычно следуют схожим рекомендациям относительно того, что происходит на каждом этапе, между этапами нет строгих границ в отношении того, что должно быть сделано и когда. Например, для многих программных систем выбор алгоритма сортировки данных возлагается на программистов в рамках ограничений и рекомендаций, предусмотренных требованиями к системе, описанием ее архитектуры или спецификациями проектирования. Однако для другой программной системы наличие подходящего алгоритма может иметь архитектурное значение и должно быть определено на ранней стадии жизненного цикла. Без этого алгоритма невозможно создать программное обеспечение, соответствующее его требованиям.

Некоторые практические правила для каждого этапа включают в себя следующее:

- На этапе архитектурного проектирования определяется вычислительная модель, основные вычислительные элементы и важные протоколы и взаимосвязи между ними. На этом этапе разрабатываются стратегии для решения сквозных проблем, таких как производительность, надежность, защищенность, а также формулирование сквозных решений, включая общесистемные стили (например, стиль "Модель-представление- контроллер" в сравнении со стилем "Каналы и фильтры", а также обоснование таких решений).
- Этап высокоуровневого проектирования включает в себя определение основных вычислительных элементов и значимых взаимосвязей между ними с акцентом на существование, роль и интерфейсы каждого основного компонента. Это определение должно быть достаточно подробным, чтобы позволить разработчикам или программистам клиентских компонентов корректно и эффективно получать доступ к возможностям каждого сервера без необходимости чтения его кода.
- На этапе детального проектирования определяется внутренняя структура каждого модуля, основное внимание уделяется детализации и обоснованию выбора алгоритмов, доступа к данным и их представления. Спецификации детального проектирования должны быть достаточными для того, чтобы программисты могли кодировать каждый модуль в процессе разработки (см. раздел <a href="/4_Software Construction.markdown">"Разработка программного обеспечения"</a>). Код - это представление решения, которое является достаточно подробным и полным, чтобы компилятор (или интерпретатор) мог его выполнить.

#### 2.1 Высокоуровневое проектирование (High-Level Design)

Высокоуровневый дизайн определяет взаимодействие основных компонентов системы друг с другом и с окружающей средой, включая пользователей, устройства и другие системы. Высокоуровневый дизайн учитывает следующее:

- Внешние события и сообщения, на которые система должна реагировать
- События и сообщения, которые система должна генерировать
- Определение форматов данных и протоколов для событий и сообщений
- Определение порядка и временных связей между входными событиями и сообщениями, а также выходными событиями и сообщениями
- Сохранение данных (способ хранения данных и управления ими)

Высокоуровневое проектирование выполняется в рамках, установленных архитектурой программного обеспечения системы (если таковая имеется). Каждое из вышеперечисленных действий может регулироваться или ограничиваться директивами архитектуры. Например, для сигнализации событий и обмена сообщениями будут использоваться протоколы и режимы взаимодействия, установленные архитектурой. Форматы данных и протоколы будут использовать стандарты передачи данных и коммуникации, определенные архитектурой. При отсутствии четкой стадии проектирования архитектуры некоторые из этих директив будут установлены требованиями к программному обеспечению или определены в ходе проектирования на высоком уровне.

#### 2.2 Детальное проектирование (Detailed Design)

Стадия детального проектирования протекает в рамках ограничений, установленных высокоуровневым проектированием. В нем определяются внутренние характеристики основных компонентов системы, внутренних модулей и их взаимосвязей с другими модулями, службами и процессами, которые они используют. предоставляйте вычислительные свойства, алгоритмы, правила доступа к данным и структуры данных. Это включает в себя следующее:

- Преобразование основных компонентов системы в модули или программные блоки, включая возможности использования готовых компонентов и прикладных платформ.
- Распределение обязанностей по проектированию между модулями и программными блоками
- Взаимодействие между модулями
- Область применения и наглядность компонентов, модулей и программных блоков
- Модели компонентов, состояния компонентов и переходы между ними
- Взаимозависимость данных и управления
- Организация, упаковка и внедрение данных
- Пользовательские интерфейсы
- Необходимые алгоритмы и структуры данных

### 3 КАЧЕСТВА РАЗРАБОТКИ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE DESIGN QUALITIES)

Требования к программному обеспечению и директивы по архитектуре предназначены для того, чтобы ориентировать программное обеспечение на определенные характеристики или конструктивные качества. Конструктивные качества являются важным подклассом проблем (см. раздел <a href="/2_Software Architecture.markdown#12-заинтересованные-стороны-и-проблемы-stakeholders-and-concerns">Заинтересованные стороны и проблемы</a> в разделе <a href="/2_Software Architecture.markdown">Архитектура программного обеспечения</a>). Одна из функций принципов проектирования (см. раздел <a href="#14-принципы-разработки-программного-обеспечения-software-design-principles">1.4 Принципы проектирования программного обеспечения</a>) заключается в том, чтобы помочь программному обеспечению достичь этих качеств. Среди характеристик, представляющих интерес для разработчиков, можно выделить следующие:

#### 3.1 Параллелизм (Concurrency)

Проектирование с учетом параллелизма касается того, как программное обеспечение преобразуется в параллельные элементы, такие как процессы, задачи и потоки, и последствий этих решений в отношении эффективности, атомарности, синхронизации и планирования.

#### 3.2 Управление и обработка событий (Control and Event Handling)

Обработка событий связана с организацией потока управления, а также с обработкой реактивных и временных событий с помощью различных механизмов, включая синхронизацию, неявный вызов и обратные вызовы.

#### 3.3 Сохранение данных (Data Persistence)

Сохранение данных связано с хранением данных в системе и управлением ими.

#### 3.4 Распределение компонентов (Distribution of Components)

Распределение касается того, как программные компоненты распределяются по аппаратным средствам (включая компьютеры, сети и другие устройства) и как эти компоненты взаимодействуют, обеспечивая при этом производительность, надежность, масштабируемость, доступность, возможность мониторинга, непрерывность бизнеса и другие требования.

#### 3.5 Обработка ошибок и исключений, отказоустойчивость (Errors and Exception Handling, Fault Tolerance)

Это касается того, как предупреждать, избегать, смягчать, допускать и обрабатывать ошибки и исключительные условия.
#### 3.6 Интеграция и интероперабельность (Integration and Interoperability)

Эта проблема возникает на уровне предприятия или системы из систем или для любого сложного программного обеспечения, когда разнородным системам или приложениям необходимо взаимодействовать посредством обмена данными или доступа к сервисам друг друга. В рамках программной системы проблема возникает, когда компоненты разрабатываются с использованием различных платформ, библиотек или протоколов.

#### 3.7 Гарантия, надежность и предохранитель (Assurance, Security and Safety)

Высокая надежность охватывает целый ряд качеств программного обеспечения, включая безопасность, относящуюся к тому, ведет ли программное обеспечение себя должным образом в критических ситуациях, например, перед лицом опасностей. Разработка с учетом соображений безопасности способов предотвращения несанкционированного раскрытия, создания, изменения, удаления или отказа в доступе к информации и другим ресурсам в случае атак на систему или нарушений системных политик для ограничения ущерба; обеспечения непрерывности обслуживания; а также содействия ремонту и восстановлению. Проектирование в целях обеспечения безопасности относится к управлению поведением программного обеспечения в обстоятельствах, которые могут привести к причинению вреда или гибели людей, нанесению ущерба имуществу или окружающей среде.

#### 3.8 Вариативность (Variability)

Вариативность касается допустимых изменений в программном обеспечении, которые возникают, например, в линейках программных продуктов и семействах систем, для размещения и управления множеством различных развертываний, например, для разных организаций или рынков.

### 4. РЕГИСТРАЦИЯ ПРОЕКТОВ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (RECORDING SOFTWARE DESIGNS)

Результатом процессов проектирования являются накопленные знания и рабочие продукты, фиксирующие эти знания. Рабочие продукты разработки программного обеспечения отражают (1) аспекты проблем, которые необходимо решить, с использованием словаря предметной области; (2) словарь решений для решения проблем проектирования (см. раздел <a href="#11-дизайн-мышление-design-thinking">1.1 Дизайн-мышление</a>); (3) основные решения, которые были приняты; и (4) объяснение логического обоснования каждого нетривиального решения. Запись логического обоснования важных решений повышает надежность программного продукта в долгосрочной перспективе при рассмотрении модификаций или улучшений (см. раздел <a href="#46-обоснование-разработки-design-rationale">4.6 "Обоснование разработки"</a>). Эти рабочие продукты, часто называемые описаниями дизайна или спецификациями дизайна, могут принимать форму текстов, диаграмм, моделей и прототипов, которые составляют основу программного обеспечения, подлежащего внедрению.

Фундаментальным аспектом разработки программного обеспечения является информирование о нем заказчиков, других разработчиков, исполнителей и других заинтересованных сторон. Это справедливо независимо от того, разрабатывается ли программное обеспечение с использованием гибких, традиционных или формальных методов. Коммуникация будет варьироваться в зависимости от целевой аудитории, уровня детализации информации и соответствия интересам заинтересованных сторон. В то время как разработчики являются важной аудиторией для получения проектных спецификаций, специалисты по тестированию и обеспечению качества, органы сертификации и аналитики требований также будут использовать проектные спецификации в своей работе. Таким образом, проектные спецификации должны иметь четко определенную аудиторию, тематику и предполагаемое использование.

Проектировщики могут проанализировать и оценить эти рабочие продукты, чтобы определить, соответствует ли проект требованиям и ограничениям, предъявляемым к программному обеспечению. При проектировании программного обеспечения также рассматриваются и оцениваются альтернативные решения и компромиссы. Помимо использования их в качестве исходных данных и отправной точки для разработки кроме того, заинтересованные стороны могут использовать результаты проектирования для планирования последующих мероприятий, таких как проверка и валидация системы.

По мере развития концепций дизайна меняются и их представления (см. раздел <a href="#11-дизайн-мышление-design-thinking">1.1 "Дизайн-мышление"</a>); часть процесса проектирования включает в себя создание соответствующих словарей для описания проблем и решений. Неформальный эскиз может быть наиболее подходящим для ранних стадий. Полезно отличать текущие (“рабочие”) спецификации от конечных продуктов проектирования. Первые разрабатываются командой разработчиков для команды разработчиков; вторые могут быть разработаны для известных заинтересованных сторон или даже для неизвестной будущей аудитории.

Существует множество обозначений для представления артефактов разработки программного обеспечения. При разработке программного обеспечения часто используется несколько типов обозначений. Две основные области, вызывающие озабоченность, - это структуры программного обеспечения и поведение программного обеспечения. Одни используются для описания структурной организации проекта, другие - для представления предполагаемого поведения программного обеспечения. Ниже они классифицированы как обозначения структурных и поведенческих проблем (см. раздел <a href="#42-описания-структурного-проектирования-structural-design-descriptions">4.2 Описания структурного проектирования</a> и раздел <a href="#43-описания-поведенческого-дизайна-behavioral-design-descriptions">4.3 Описания поведенческого проектирования</a> соответственно). Некоторые обозначения используются в основном при архитектурном проектировании, а другие - в основном при детальном проектировании; некоторые из них полезны на всех этапах разработки программного обеспечения. Некоторые обозначения тесно связаны с контекстом конкретных методов проектирования (см. раздел <a>Стратегии и методы проектирования программного обеспечения</a>).

Унифицированный язык моделирования (UML) - это широко используемое семейство нотаций, которые решают как структурные, так и поведенческие проблемы и используются на всех этапах проектирования, от архитектурного до детального проектирования.

#### 4.1 Проектирование на основе моделей (Model-Based Design)

За всю историю разработки программного обеспечения, включая архитектуру и дизайн, произошла эволюция от артефактов, основанных на документах, к артефактам, основанным на моделях. Проектирование на основе моделей (MBD) - это подход к записи проектов, в котором модели играют важную роль.

Эта тенденция отражает ограничения артефактов, основанных на документах, и расширенные возможности автоматизированных инструментов. Артефакты, основанные на документах, используют естественный язык и неформальные диаграммы для передачи намерений разработчиков, что может привести к двусмысленности и неполноте. Даже если в документах используются четко определенные форматы, соответствующая информация может быть распределена по документам, что затрудняет понимание и анализ. С помощью MBD соответствующие инструменты могут собирать и систематизировать соответствующую информацию для использования разработчиками и другими заинтересованными сторонами в доступной форме.

Современные инструменты ускорили переход от создания артефактов на основе документов к созданию моделей. Инструментарий позволяет анимировать или моделировать различные аспекты программного обеспечения, анализировать сценарии "что, если" и находить компромиссы, а также быстро создавать прототипы. Инструментарий также облегчает непрерывное тестирование и интеграцию, расширенную и интерактивную отслеживаемость, а также сбор знаний и управление ими, что неэффективно или даже неосуществимо при использовании подходов, основанных на документах.
Разработка, управляемая моделями (MDD) - это парадигма разработки, которая использует модели в качестве основных артефактов процесса разработки (см. раздел <a>Модели и методы разработки программного обеспечения</a>).

#### 4.2 Описания структурного проектирования (Structural Design Descriptions)

Следующие типы обозначений, большинство из которых являются графическими, используются для представления структурных аспектов разработки программного обеспечения, то есть для описания основных компонентов и того, как они взаимосвязаны (статический вид), а также распределения обязанностей между компонентами и модулями:

- Диаграммы классов и объектов используются для представления набора классов и объектов и их взаимосвязей.
- Диаграммы компонентов используются для представления набора компонентов (“физических и заменяемых частей системы, которые [соответствуют] набору интерфейсов и [обеспечивают] их реализацию”) и их взаимосвязей. Компонентные модели эволюционировали из более ранних языков взаимодействия модулей в пакетные системы языков программирования, таких как Ada и Java, и в сложные модульные системы современных функциональных языковых систем, таких как Haskell и Coq.
- Карточки сотрудников с классовой ответственностью (CRC) используются для обозначения названий компонентов (классов), их обязанностей и компонентов, с которыми они взаимодействуют для выполнения этих обязанностей.
- Диаграммы развертывания используются для представления набора физических узлов и их взаимосвязей для моделирования физических аспектов программного обеспечения, развернутого на аппаратном обеспечении.
- Диаграммы взаимосвязей сущностей (ERD) используются для представления концептуальных, логических и физических моделей данных, хранящихся в информационных хранилищах, или как часть описаний интерфейсов.
- Языки описания интерфейсов (IDL) - это языки, похожие на языки программирования, используемые для определения интерфейсов (названий и типов экспортируемых операций) программных компонентов.
- Структурные диаграммы используются для описания структуры вызывающих программ (то есть они показывают, какие модули вызываются и с помощью каких других модулей вызываются).

#### 4.3 Описания поведенческого дизайна (Behavioral Design Descriptions)

Следующие обозначения и языки, в том числе графические и текстовые, используются для описания динамического поведения программных систем и их компонентов. Многие из этих обозначений в основном, но не исключительно, полезны при детальном проектировании. Более того, описания поведения могут включать обоснование проектных решений (см. раздел <a href="#46-обоснование-разработки-design-rationale">4.6 "Обоснование проекта"</a>).

- Диаграммы действий используются для отображения последовательности вычислений от действия к действию. Они также могут представлять параллельные действия, их входные и выходные данные и возможности для параллелизма.
- Коммуникационные диаграммы используются для отображения взаимодействий между группой объектов; основное внимание уделяется объектам, их связям и сообщениям, которыми они обмениваются по этим связям.
- Диаграммы потоков данных (DFD) используются для отображения потоков данных между вычислительными элементами. DFD предоставляет “описание, основанное на моделировании потока информации вокруг сети операционных элементов, при этом каждый элемент использует или модифицирует информацию, поступающую в этот элемент”. DFD могут использоваться и в других целях, таких как анализ безопасности, поскольку они определяют возможные пути атаки и раскрытия конфиденциальной информации.
- Таблицы и диаграммы принятия решений используются для представления сложных комбинаций условий и действий.
- Блок-схемы используются для представления потока управления и последовательности связанных действий.
- Диаграммы последовательности используются для отображения взаимодействий между группами объектов, отображая временной порядок сообщений, передаваемых между объектами.
- Диаграммы состояний (transition) и statechartcharts используются для отображения переходов от состояния к состоянию и того, как меняется поведение компонента в зависимости от его текущего состояния и реакции на входные события.
- Языки формальных спецификаций - это преимущественно текстовые языки, основанные на базовых понятиях из математики (например, тип, множество, последовательность, логическое предложение) для строгого и абстрактного определения интерфейсов и поведения программных компонентов, часто в терминах предварительных и последующих условий, инвариантов, проверки типов и вычислительных моделей (см. раздел <a>Формальные методы в моделях и методах разработки программного обеспечения</a>).
- Языки псевдокода и разработки программ (PDL) - это структурированные обозначения, подобные языкам программирования, используемые для описания поведения процедуры при обработке, как правило, на стадии детального проектирования. Сегодня эти языки используются реже, но все еще встречаются в документации к алгоритмам.

#### 4.4 Шаблоны и стили проектирования (Design Patterns and Styles)

Кратко говоря, шаблон - это “общее решение общей проблемы в данном контексте” [6]. Архитектурные стили можно рассматривать как шаблоны “в целом”, описывающие общие решения проблем архитектурного уровня, которые пронизывают программное обеспечение. Шаблоны проектирования включают следующее:

- Шаблоны создания (например, конструктор, фабрика, прототип, синглтон)
- Структурные шаблоны (например, адаптер, мост, композит, декоратор, фасад, подвесной модуль, прокси)
- Поведенческие паттерны (например, команда, интерпретатор, итератор, посредник, памятка, наблюдатель, одноранговая сеть, публикация-подписка, состояние, стратегия, шаблон, посетитель)

Шаблоны и стили проектирования отражают идиомы, которые в прошлом доказали свою полезность при решении конкретных задач проектирования. Они возникают на всех этапах проектирования, включая архитектуру (см. также раздел <a href="/2_Software Architecture.markdown#22-архитектурные-стили-и-шаблоны-architecture-styles-and-patterns">2.2 Архитектурные стили и шаблоны</2>, в разделе <a href="/2_Software Architecture.markdown">Архитектура программного обеспечения</a>).

#### 4.5 Специализированные языки и языки, зависящие от предметной области (Specialized and Domain-specific languages)

Не каждое дизайнерское представление легко вписывается в дихотомию структура/поведение. Например, при разработке пользовательского интерфейса структурное оформление того, что пользователь может увидеть, сочетается с поведенческая логика экранов управления последовательностью действий основана на действиях пользователя. Специализированные проблемы, такие как безопасность и надежность, часто имеют свои собственные формы представления, которые сложились среди специалистов в этих сообществах.

Недавней тенденцией стало развитие предметно-ориентированных языков (DSL) и широко доступных инструментов для их разработки. При таком подходе частью процесса проектирования является кодификация концепций и конструкций конкретной предметной области приложения для создания компьютерного языка для этой предметной области, чтобы представление проекта с использованием этих конструкций приводило к анимированной или исполняемой реализации. При таком подходе DSL размывают границы между языками моделирования, проектирования и программирования.
Существуют DSL и вспомогательные инструменты для таких областей, как моделирование; системы реального времени, реактивные и распределенные системы; разработка игр; пользовательские интерфейсы; разработка тестов; и средства обработки языковых данных. Развитию DSL способствовали все более мощные инструменты, основанные на грамматике, которые, учитывая определение языка, могут создавать графический пользовательский интерфейс, средства проверки синтаксиса, генераторы кода, компиляторы и компоновщики для специализированного языка.

#### 4.6 Обоснование разработки (Design Rationale)

Полезным результатом проектирования является понимание и подробное документирование основных принятых решений, а также объяснение обоснования каждого решения. Обоснование проекта отражает причины, по которым было принято то или иное проектное решение. Это включает в себя сделанные ранее предположения, рассмотренные альтернативы, а также проанализированные компромиссы и критерии для выбора одного подхода и отказа от других.

Хотя причины принятия решений, скорее всего, очевидны для текущей команды разработчиков, они могут быть менее очевидны для тех, кто модифицирует или обслуживает систему после развертывания. Запись обоснования повышает надежность программного продукта в долгосрочной перспективе. Постоянное отслеживание обоснования изменений во время технического обслуживания также способствует повышению жизнеспособности программного обеспечения.

Также может быть полезно фиксировать отклоненные решения и причины их отклонения. Фиксация этих обоснований может позволить команде вернуться к ранее отклоненному решению при изменении предположений, требований или ограничений. Важность обоснования очевидна, например, в проектах по разработке свободного программного обеспечения с открытым исходным кодом (FOSS), в которых часто участвуют большие распределенные команды разработчиков с частой сменяемостью.

Логическое обоснование проекта может быть представлено как часть описания проекта программного обеспечения или как сопутствующий артефакт. Часто логическое обоснование приводится в тексте, но также могут использоваться другие формы представления, такие как графики, которые представляют проект как взаимосвязанную сеть решений.

### 5. СТРАТЕГИИ И МЕТОДЫ ПРОЕКТИРОВАНИЯ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE DESIGN STRATEGIES AND METHODS)
Существуют различные стратегии и методы, позволяющие структурировать процесс проектирования и направлять его; многие из них развились из стилей программирования или парадигм. В дополнение к воплощению одной или нескольких общих стратегий, большинство методов проектирования направлены на то, чтобы сделать одну или несколько концепций дизайна (будь то объекты, методы или события) заметными в качестве организующих тем для программного обеспечения. Затем эти темы помогают разработчикам определить, на чем следует сосредоточиться в первую очередь, как действовать дальше и как структурировать модули.

#### 5.1 Общие стратегии (General Strategies)

Некоторые часто приводимые примеры общих стратегий, полезных в процессе проектирования, включают стратегии "разделяй и властвуй" и поэтапной доработки; стратегии "сверху вниз" и "снизу вверх"; стратегии, использующие эвристику, шаблоны и языки шаблонов; а также итеративный и инкрементальный подходы.

#### 5.2 Функционально-ориентированный (или структурированный) дизайн (Function-Oriented (or Structured) Design)

Это один из классических методов проектирования программного обеспечения. Он фокусируется на уточнении (или декомпозиции) основных функций программного обеспечения, разрабатывая их по принципу "сверху вниз". Структурированное проектирование часто следует за структурированным анализом, создавая DFD и соответствующие описания процессов. Различные инструменты позволяют автоматически преобразовывать DFD в высокоуровневые проекты.

#### 5.3 Проектирование, ориентированное на данные (Data-Centered Design)

Проектирование, ориентированное на данные, начинается со структур данных, которыми манипулирует программа, а не с функций, которые она выполняет. Разработчик программного обеспечения определяет структуры входных и выходных данных, а затем разрабатывает программные модули, которые преобразуют входные данные в выходные. Для решения особых случаев, таких как несоответствие между входными и выходными данными, были предложены различные эвристические методы.

#### 5.4 Объектно-ориентированное проектирование (Object-Oriented Design)

Было предложено множество методов проектирования программного обеспечения, основанных на объектах. Эта область эволюционировала от раннего объектно-ориентированного проектирования середины 1980-х годов (где существительные обозначают объекты, глаголы - методы, а прилагательные - атрибуты), где наследование и полиморфизм играют ключевую роль, к проектированию на основе компонентов (CBD), где метаинформация может быть определена и доступна (например, через рефлексию). Несмотря на то, что в основе OOD лежит концепция абстрагирования данных, в качестве альтернативного основополагающего принципа был предложен дизайн, основанный на ответственности.

#### 5.5 Дизайн, ориентированный на пользователя (User-Centered Design)

Дизайн, ориентированный на пользователя, - это нечто большее, чем просто метод проектирования; это междисциплинарный подход, основанный на глубоком понимании пользователей и их потребностей в качестве основы для разработки пользовательского опыта в контексте их организации и задач, которые необходимо выполнить. Он включает в себя сбор пользовательских требований, создание пользовательского потока задач и решений, создание прототипов или макетов, представляющих пользовательские интерфейсы, и оценку проектного решения в соответствии с первоначальными требованиями.

#### 5.6 Проектирование на основе компонентов (CBD) (Component-Based Design (CBD))

CBD разбивает программную систему на один или несколько автономных компонентов, которые взаимодействуют только через четко определенные интерфейсы и соответствуют общесистемной стандартной модели компонентов. Программный компонент - это независимая единица, имеющая четко определенные интерфейсы и зависимости, которые могут быть созданы и развернуты независимо. CBD решает вопросы, связанные с предоставлением, разработкой и интеграцией таких компонентов для улучшения повторного использования. CBD часто делает упор на общие API для всех компонентов и специализированные API для конкретных служб или обязанностей.

#### 5.7 Разработка на основе событий (Event-Driven Design)

Событийно-ориентированный дизайн - это подход, при котором система или компонент запускает свои операции в ответ на события (косвенные вызовы). Публикация/подписка на рассылку сообщений (broadcasting) часто используется как средство передачи событий по сети всем заинтересованным подписчикам. Публикация/подписка позволяет отделить производителей от потребителей с помощью посредника сообщений с каналами, называемыми темами. Это отличается от обмена сообщениями типа "точка-точка", когда отправители и получатели должны знать друг друга, чтобы доставить и получить сообщение. Существуют различные типы обработки событий: простая обработка событий, потоковая обработка событий и сложная обработка событий. Системы, основанные на сообщениях, часто включают в свой дизайн идентифицируемых отправителей и получателей. Системы, управляемые событиями, могут не идентифицировать отправителей и получателей явно - вместо этого каждый модуль генерирует события, отслеживая любые события, которые им интересны или на которые необходимо отреагировать. “Анонимная” асинхронная обработка сообщений и событий - хорошие стратегии для масштабируемых систем.

#### 5.8 Аспектно-ориентированный дизайн (AOD) (Aspect-Oriented Design (AOD))

AOD - это метод, с помощью которого программное обеспечение создается с использованием аспектов для реализации сквозных задач и расширений, указанных в требованиях к программному обеспечению. AOD развился из объектно-ориентированного проектирования и программирования. Хотя аспектно-ориентированная перспектива еще не стала широко распространенной парадигмой проектирования или программирования, она часто используется в прикладных платформах и программных библиотеках, где параметры платформы или библиотеки могут быть сконфигурированы с помощью описания аспектов.

#### 5.9 Проектирование на основе ограничений (Constraint-Based Design)

Роль ограничений в процессе проектирования заключается в ограничении размера проектного пространства для исключения неосуществимых или неприемлемых альтернатив. Ограничения ускоряют проектирование, поскольку требуют принятия нескольких ранних решений. Ограничения могут отражать ограничения, налагаемые на аппаратное обеспечение, программное обеспечение, данные, операционные процедуры, интерфейсы или что-либо, что влияет на программное обеспечение. Ограниченное пространство проектирования может быть исследовано с помощью методов поиска или обратного отслеживания. Подходы к проектированию, основанные на ограничениях, используются при разработке пользовательского интерфейса, в играх и других приложениях. В целом, задачи, связанные с выполнением ограничений, могут быть NP-сложными; однако для аппроксимации или решения задач с ограничениями можно использовать различные виды программирования на основе ограничений.

#### 5.10 Другие методы (Other Methods)

Существуют и другие подходы к проектированию (см. раздел <a>Модели и методы разработки программного обеспечения</a>). Например, итеративные и адаптивные методы реализуют приращения программного обеспечения и снижают акцент на строгих требованиях к программному обеспечению и его проектированию.

Сервис-ориентированные методы позволяют создавать распределенное программное обеспечение с использованием веб-сервисов, выполняемых на распределенных компьютерах. Программные системы часто создаются с использованием сервисов от разных поставщиков, соединенных стандартными протоколами (например, HTTP, HTTPS, SOAP), предназначенными для поддержки служебной связи и обмена служебной информацией.

### 6. АНАЛИЗ КАЧЕСТВА ПРОЕКТИРОВАНИЯ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ И ОЦЕНКА (SOFTWARE DESIGN QUALITY ANALYSIS AND EVALUATION)

#### 6.1 Обзоры и аудиты проекта (Design Reviews and Audits)

Обзоры проекта представляют собой комплексные исследования проекта для оценки таких проблем, как статус или степень завершенности, соответствие требованиям, открытые или нерешенные вопросы и потенциальные проблемы. Обзор проекта может быть проведен по адресу на любом этапе проектирования. Анализ проекта может проводиться командой разработчиков, независимой третьей стороной или другим заинтересованным лицом. Аудит проекта более узко ориентирован на определенный перечень характеристик (например, функциональный аудит). (Смотрите также раздел 2.3 Обзоры и аудиты в системе контроля качества программного обеспечения).

#### 6.2 Характеристики качества (Quality Attributes)

На качество разработки программного обеспечения влияют различные атрибуты, в том числе различные “сложности” (ремонтопригодность, переносимость, тестируемость, удобство использования) и “особенности” (корректность, надежность). Качества - это основная группа факторов, вызывающих озабоченность (см. раздел <a href="/2_Software Architecture.markdown#12-заинтересованные-стороны-и-проблемы-stakeholders-and-concerns">"Заинтересованные стороны и проблемы"</a> в разделе <a href="/2_Software Architecture.markdown">"Архитектура программного обеспечения"</a>). Некоторые качества можно наблюдать во время выполнения (например, производительность, безопасность, доступность, функциональность, удобство использования); другие - нет (например, модифицируемость, переносимость, возможность повторного использования, тестируемость); некоторые (например, концептуальная целостность, корректность, завершенность) присущи программному обеспечению.

#### 6.3 Методы анализа и оценки качества (Quality Analysis and Evaluation Techniques)

Различные инструменты и методики могут помочь в анализе и оценке качества разработки программного обеспечения. (Смотрите также раздел "Инструменты контроля качества программного обеспечения" в разделе "Управление качеством программного обеспечения").

- Обзоры разработки программного обеспечения включают неформальные и строгие методы определения качества программного обеспечения на основе SDD и других артефактов проектирования, например, обзоры архитектуры, обзоры дизайна и инспекции; методы, основанные на сценариях; отслеживание требований.
- Статический анализ: формальный или полуформальный статический (неисполняемый) анализ, который может быть использован для оценки проекта (например, анализ дерева ошибок или автоматическая перекрестная проверка). При возникновении проблем с безопасностью может быть проведен анализ уязвимостей программного обеспечения (например, статический анализ на предмет уязвимостей в системе безопасности). При формальном анализе используются математические модели, которые позволяют разработчикам прогнозировать поведение и проверять производительность программного обеспечения, вместо того чтобы полностью полагаться на тестирование. Формальный анализ проекта может быть использован для выявления остаточных ошибок спецификации и проектирования (возможно, вызванных неточностями, двусмысленностью, а иногда и другими ошибками). (Смотрите также <a>Модели и методы разработки программного обеспечения</a>.)
- Моделирование и прототипирование: динамические методы оценки проекта (например, моделирование производительности или прототипы технико-экономического обоснования).

#### 6.4 Измерения и метрики (Measures and Metrics)

Показатели могут использоваться для оценки различных аспектов разработки программного обеспечения, например, размера, структуры или качества. Большинство предложенных показателей основаны на подходе, используемом для разработки проекта (см. раздел <a href="#5-стратегии-и-методы-проектирования-программного-обеспечения-software-design-strategies-and-methods">5 Стратегии и методы разработки программного обеспечения</a>). Эти показатели подразделяются на две широкие категории:

- Показатели функционального (структурированного) проектирования: показатели, полученные путем анализа функциональной декомпозиции; обычно представляются с использованием структурной схемы (или иерархической диаграммы), на основе которой могут быть рассчитаны различные показатели.
- Показатели объектно-ориентированного проектирования: структура проекта обычно представляется в виде диаграммы классов, на основе которой могут быть рассчитаны различные показатели. Также могут быть рассчитаны показатели свойств внутреннего содержимого каждого класса.

#### 6.5 Проверка, валидация и сертификация (Verification, Validation and Certification)

Систематический анализ или оценка проекта играет важную роль в каждой из этих трех областей:

- проверка: подтверждение соответствия проекта заявленным требованиям;
- валидация: установление того, что дизайн позволит системе соответствовать ожиданиям заинтересованных сторон, включая заказчиков, пользователей, операторов и тех, кто занимается сопровождением;
- сертификация: подтверждение третьей стороной соответствия дизайна ее общей спецификации и предполагаемому использованию.

(Смотрите также раздел 2.2 Проверка и валидация в системе контроля качества программного обеспечения.)