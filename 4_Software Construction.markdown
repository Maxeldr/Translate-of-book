# ГЛАВА 4

# РАЗРАБОТКА ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE CONSTRUCTION)

### АКРОНИМЫ (ACRONYMS)

|         |                                                   |                                                       |
|---------|---------------------------------------------------|-------------------------------------------------------|
| API     | Application programming interface                 | Интерфейс прикладного программирования                |
| ASIC    | Application-specific integrated circuit           | Специализированная интегральная схема                 |
| BaaS    | Backend as a service                              | Серверная часть как услуга                            |
| CI      | Continuous integration                            | Непрерывная интеграция                                |
| COTS    | Commercial off-the-shelf                          | Готовые коммерческие приложения                       |
| CSS     | Cascading style sheets                            | Каскадные таблицы стилей                              |
| DSL     | Domain-specific language                          | Язык, зависящий от предметной области                 |
| DSP     |	Digital signal processor                          | Цифровой сигнальный процессор                         |
| ESB     |	Enterprise service bus                            | Служебная шина предприятия                            |
| FPGA    | Field programmable gate array                     | Программируемая в полевых условиях вентильная матрица |
| GUI     | Graphical user interface                          | Графический интерфейс пользователя                    |
| HTML5   | HyperText markup language version 5               | Язык гипертекстовой разметки версии 5                 |
| IDE     | Integrated development environment                | Интегрированная среда разработки                      |
| IEEE    | Institute of electrical and electronics engineers | Институт инженеров электротехники и электроники       |
| ISO     | International organization for standardization    | Международная организация по стандартизации           |
| J2EE    | Java 2 platform, enterprise edition               | Платформа Java 2, корпоративная версия                |
| KA      | Knowledge area                                    | Область знаний                                        |
| MDA     | Model-driven architecture                         | Архитектура, управляемая моделями                     |
| NPM     | Node Package Manager                              | Менеджер пакетов узлов                                |
| OMG     | Object management group                           | Группа управления объектами                           |
| PIM     | Platform independent model                        | Модель, не зависящая от платформы                     |
| POSIX	  | Portable operating system interface               | Интерфейс портативной операционной системы            |
| PSM     | Platform-specific model                           | Модель, зависящая от платформы                        |
| SDK     | Software development kit                          | Набор для разработки программного обеспечения         |
| TDD     | Test-driven development                           | Разработка на основе тестирования                     |
| UML     | Unified Modeling Language                         | Унифицированный язык моделирования                    |
| WYSIWYG | What you see is what you get                      | Что вы видите, то вы и получаете                      |

## ВВЕДЕНИЕ (INTRODUCTION)

Разработка программного обеспечения относится к детальному созданию и сопровождению программного обеспечения посредством кодирования, верификации, модульного тестирования, интеграционного тестирования и отладки.

Область знаний о создании программного обеспечения (KA) связана со всеми другими KA, но наиболее тесно она связана с разработкой программного обеспечения и тестированием KA, поскольку процесс создания программного обеспечения включает в себя значительное проектирование и тестирование. В процессе используются результаты проектирования и вводятся данные для тестирования (“проектирование” и “тестирование” в данном случае относятся к действиям, а не к KAS). Границы между проектированием, конструкцией и тестированием (если таковые имеются) различаются в зависимости от процессов жизненного цикла программного обеспечения, используемых в проекте.

Хотя детальное проектирование может быть выполнено до начала строительства, большая часть проектных работ выполняется во время строительства. Таким образом, КА разработки программного обеспечения тесно связана с КА проектирования программного обеспечения.

Кроме того, на протяжении всего строительства инженеры-программисты проводят как модульное, так и интеграционное тестирование своей работы. Таким образом, КА разработки программного обеспечения тесно связана с КА тестирования программного обеспечения.

КА разработки программного обеспечения также связана с управлением конфигурацией, качеством, управлением проектами и вычислениями, и, следовательно, с соответствующими КА.

Во-первых, при разработке программного обеспечения обычно создается наибольшее количество элементов конфигурации, которыми необходимо управлять в рамках программного проекта (например, исходные файлы, документация, тестовые примеры). Таким образом, КА разработки программного обеспечения тесно связана с КА управления конфигурацией программного обеспечения.

Во-вторых, хотя качество важно во всех KA, код является конечным результатом программного проекта, и код создается в процессе разработки. Таким образом, KA качества программного обеспечения тесно связан с KA разработки программного обеспечения.

В-третьих, в то время как управление проектами включает в себя различные задачи по разработке программного обеспечения, создание программного обеспечения, как правило, обеспечивает получение наибольших результатов в рамках программного проекта. Таким образом, КА "Разработка программного обеспечения" тесно связана с КА "Управление разработкой программного обеспечения".

В-четвертых, поскольку разработка программного обеспечения требует знания алгоритмов и методов кодирования, этот КА тесно связан с КА "Основы вычислительной техники", который касается основ компьютерных наук, поддерживающих разработку и конструирование программного продукта.

## РАЗБИВКА ТЕМ ПО АРХИТЕКТУРЕ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ

Разбивка тем по программной архитектуре KA показана на рисунке 4-1.

<div style="text-align:center">
<img src="Images/Chapter 4/Рисунок 1.1. Разбивка тем для КА по созданию программного обеспечения.png"
alt="Рисунок 1.1. Разбивка тем для КА по созданию программного обеспечения.">
<br>Рисунок 1.1. Разбивка тем для КА по созданию программного обеспечения.
</div>

### 1 ОСНОВЫ РАЗРАБОТКИ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE CONSTRUCTION FUNDAMENTALS)

Основные принципы разработки программного обеспечения включают в себя следующее:

- Минимизация сложности
- Предвидение и внедрение изменений
- Создание для проверки
- Повторное использование ресурсов
- Применение стандартов в строительстве

Первые четыре концепции применимы как к проектированию, так и к строительству. В следующих разделах дается определение этим понятиям и описывается, как они применяются в строительстве.

#### 1.1 Минимизация сложности (Minimizing Complexity)

Способность большинства людей сохранять сложные структуры и информацию в рабочей памяти ограничена, особенно в течение длительного времени. Это сильно влияет на то, как люди передают намерения компьютерам, и определяет одну из ключевых целей при создании программного обеспечения — минимизацию сложности. Необходимость снижения сложности применима практически ко всем аспектам создания программного обеспечения и особенно важна при тестировании программных конструкций.

На построение программного обеспечения могут влиять различные типы сложности. Инструменты могут использоваться для управления различными аспектами сложности программных компонентов и их построения. Например, цикломатическая сложность - это показатель статического анализа сложности кода для тестирования и понимания. Инструмент, разработанный Томасом Дж. Маккейбом-старшим в 1976 году, вычисляет количество линейно независимых путей в исходном коде программы. В идеале должно быть как минимум такое количество тестовых примеров. Другими примерами являются такие инструменты, как Make, с помощью которых можно создавать приложения, или интегрированные среды разработки (IDE) для ввода, редактирования и компиляции кода. Эти инструменты помогают управлять сложностью процесса разработки.

При разработке программного обеспечения снижение сложности достигается за счет создания простого и удобочитаемого кода, а не заумного кода. Это достигается с помощью стандартов (см. раздел 1.5 "Стандарты в строительстве"), модульного проектирования (см. раздел 3.1 "Проектирование конструкций") и множества других специальных методов (см. раздел 3.3 "Кодирование"). Этому также способствуют методы контроля качества, ориентированные на строительство (см. раздел 3.6 "Качество строительства").

#### 1.2 Предвидение и принятие изменений (Anticipating and Embracing Change)

Большинство программ со временем меняются, и предвидение изменений определяет многие аспекты разработки программного обеспечения; изменения в среде, в которой работает программное обеспечение, также по-разному влияют на программное обеспечение. Предвидение изменений помогает инженерам-программистам создавать расширяемое программное обеспечение, улучшая программный продукт без разрушения базовой структуры. Предвидение изменений поддерживается многими конкретными методами (см. раздел 3.3, Кодирование).


Более того, современные условия ведения бизнеса требуют от многих организаций более частой, быстрой и надежной доставки и развертывания программного обеспечения. Предвидеть конкретные, необходимые изменения может быть непросто, поэтому разработчикам программного обеспечения следует тщательно продумать гибкость и адаптивность программного обеспечения, чтобы внедрять изменения с меньшими трудностями. Эти команды разработчиков программного обеспечения должны принимать изменения, внедряя гибкую разработку, практикуя DevOps и методы непрерывной доставки и развертывания. Такие методы приводят процесс разработки программного обеспечения и управления им в соответствие с эволюционной средой.

#### 1.3 Конструирование для верификации (Constructing for Verification)

Конструирование для верификации создает программное обеспечение таким образом, чтобы разработчики программного обеспечения, разрабатывающие программное обеспечение, а также тестировщики и пользователи могли легко обнаружить ошибки в ходе независимого тестирования и эксплуатации. Конкретные методы, которые поддерживают построение для проверки, включают соблюдение стандартов кодирования для поддержки анализа кода и модульного тестирования, организацию кода для поддержки автоматизированного тестирования и ограничение использования сложных или труднопонимаемых языковых структур.

#### 1.4 Повторное использование ресурсов (Reusing Assets)

Повторное использование означает использование существующих ресурсов для решения различных задач. При разработке программного обеспечения типичные ресурсы, которые используются повторно, включают фреймворки, библиотеки, модули, компоненты, исходный код и коммерческие готовые ресурсы (COTS). Повторное использование имеет два тесно связанных аспекта: создание для повторного использования и создание с целью повторного использования. Первое означает создание программных ресурсов многократного использования, тогда как второе означает повторное использование программных ресурсов для создания нового решения. Повторное использование часто выходит за рамки проекта, что означает, что повторно используемые ресурсы могут быть использованы в других проектах или организациях.

#### 1.5 Применение стандартов в строительстве (Applying Standards in Construction )

Применение внешних или внутренних стандартов разработки во время строительства помогает достичь целей по эффективности, качеству и затратам проекта. В частности, выбор допустимых подмножеств языков программирования и стандартов использования является важным подспорьем в достижении более высокой безопасности.

Стандарты, которые непосредственно влияют на вопросы строительства, включают следующее:

- Методы коммуникации (например, стандарты для форматов документов и их содержимого)
- Языки программирования (например, стандарты для таких языков, как Java и C++)
- Стандарты кодирования (например, стандарты для соглашений об именовании, компоновки и отступов)
- Платформы (например, стандарты интерфейса для вызовов операционной системы)
- Инструменты (например, стандарты диаграмм для обозначений, такие как UML (унифицированный язык моделирования))

Использование внешних стандартов: Построение зависит от внешних стандартов для языков построения, инструментов построения, технических интерфейсов и взаимодействий между программным обеспечением Construction KA и другими KAS. Стандарты поступают из множества источников, включая спецификации аппаратных и программных интерфейсов (например, группа управления объектами (OMG)) и международные организации (например, институт инженеров электротехники и электроники (IEEE) или международная организация по стандартизации (ISO)).

Использование внутренних стандартов: Стандарты также могут создаваться на организационной основе на корпоративном уровне или для использования в конкретных проектах. Эти стандарты помогают координировать групповую деятельность, сводя к минимуму сложность, предвидя изменения и разрабатывая их для проверки.

### 2 УПРАВЛЕНИЕ СТРОИТЕЛЬСТВОМ (MANAGING CONSTRUCTION)

#### 2.1 Строительство в моделях жизненного цикла (Construction in Life Cycle Models)

Для разработки программного обеспечения было создано множество моделей; в некоторых из них больше внимания уделяется строительству, чем в других.

Некоторые модели являются более линейными с точки зрения строительства, например, модели "каскадного" и поэтапного жизненного цикла. В этих моделях строительство рассматривается как деятельность, которая выполняется только после завершения значительных предварительных работ, включая детальную проработку требований, обширное проектирование и детальное планирование. Более линейные подходы акцентируют внимание на действиях, предшествующих созданию (требования и проектирование), и создают более четкое разделение между действиями. В этих моделях основной упор при создании может делаться на кодирование.

Другие модели, такие как эволюционное прототипирование и гибкая разработка, являются более итеративными. В этих подходах конструирование рассматривается как деятельность, которая выполняется одновременно с другими видами деятельности по разработке программного обеспечения (включая требования, проектирование и планирование) или накладывается на них. В этих подходах сочетаются работы по проектированию, кодированию и тестированию, и они часто рассматривают сочетание этих работ как создание (см. Руководство по разработке программного обеспечения и процессам разработки программного обеспечения KAs).

Практика непрерывной доставки и развертывания также сочетает в себе кодирование, тестирование, операции по доставке и развертыванию. В этих случаях обновления программного обеспечения, сделанные во время строительных работ, постоянно доставляются и внедряются в производственную среду. Весь процесс полностью автоматизирован с помощью конвейера развертывания, который состоит из различных операций тестирования и развертывания.

Следовательно, то, что считается строительством, зависит от используемой модели жизненного цикла. В целом, разработка программного обеспечения - это в основном кодирование и отладка, но она также включает планирование разработки, детальное проектирование, модульное тестирование, интеграционное тестирование и другие виды деятельности.

#### 2.2 Планирование разработки (Construction Planning)

Выбор метода строительства является ключевым аспектом деятельности по планированию строительства. Этот выбор влияет на степень выполнения предварительных строительных работ, порядок их выполнения и степень, в которой они должны быть завершены до начала строительных работ.

Подход к строительству влияет на способность проектной команды снижать сложность, предвидеть изменения и осуществлять верификацию проекта. Каждая задача может быть решена на уровне процесса, требований и проектирования, но на них будет влиять выбор метода строительства.

Планирование строительства также определяет порядок создания и интеграции компонентов, стратегию интеграции (например, поэтапную или добавочную интеграцию), процессы управления качеством программного обеспечения, распределение задач между конкретными инженерами-программистами и другие задачи в соответствии с выбранным методом.

#### 2.3 Измерение строительства (Construction Measurement)

Можно измерить многочисленные строительные работы и артефакты, включая разработку, модификацию, повторное использование и уничтожение кода;
сложность кода; статистика проверки кода;
скорость устранения неисправностей, трудозатраты и планирование. Эти измерения могут быть полезны для управления строительством, обеспечения качества во время строительства и улучшения процесса строительства, а также для других целей (подробнее об измерениях см. в разделе "Процесс разработки программного обеспечения").

#### 2.4 Управление зависимостями (Managing Dependencies)

Программные продукты часто в значительной степени зависят от зависимостей, включая внутренние и внешние (коммерческие или с открытым исходным кодом),
которые позволяют разработчикам повторно использовать общие
функциональные возможности вместо того, чтобы изобретать велосипед и существенно повышать производительность разработчиков. Кроме того, менеджеры пакетов (например, Maven в Java и NPM в JavaScript) широко используются для автоматизации процесса установки, обновления, настройки и удаления зависимостей.

Прямые и косвенные зависимости программных продуктов образуют сеть цепочки поставок. Любая зависимость в сети цепочки поставок может представлять потенциальный риск для программных продуктов и должна управляться разработчиками или инструментами. Для повышения эффективности сборки следует избегать ненужных зависимостей. Следует избегать конфликтов лицензий между зависимостями и программными продуктами, чтобы снизить юридические риски. Следует избегать распространения дефектов зависимостей или уязвимостей в программных продуктах, чтобы повысить качество программных продуктов. Следует разработать правила и механизмы мониторинга, которые не позволят разработчикам внедрять ненадежные внешние зависимости.

### 3 ПРАКТИЧЕСКИЕ СООБРАЖЕНИЯ (PRACTICAL CONSIDERATIONS)

Разработка - это деятельность, в которой инженеру-программисту часто приходится сталкиваться с хаотичными, изменяющимися и даже противоречивыми ограничениями реального мира. Из-за ограничений, существующих в реальном мире, практические соображения влияют на строительство больше, чем на некоторые другие виды деятельности, и разработка программного обеспечения, пожалуй, больше всего похожа на ремесло в строительной деятельности по сравнению с другими видами деятельности.

#### 3.1 Проектирование зданий (Construction Design)

В некоторых проектах значительная часть проектных работ отводится строительству, в то время как в других проектирование относится к этапу, непосредственно связанному с проектированием. Независимо от точного распределения, некоторые работы по детальному проектированию выполняются на уровне строительства, и эти работы по проектированию продиктованы ограничениями, налагаемыми реальной проблемой, которую решает программное обеспечение.

Точно так же, как строители, возводящие физическую конструкцию, должны вносить небольшие изменения для устранения непредвиденных пробелов в планах застройщика, разработчики программного обеспечения должны вносить небольшие или крупные изменения, чтобы конкретизировать детали проектирования программного обеспечения во время строительства.

Детали процесса проектирования на уровне разработки по существу такие же, как описаны в Руководстве по разработке программного обеспечения, но они применяются в меньшем масштабе к алгоритмам, структурам данных и интерфейсам.

#### 3.2 Языки проектирования (Construction Languages)

Конструктивные языки включают в себя все формы коммуникации, с помощью которых человек может указать исполняемое решение проблемы.
Следовательно, конструктивные языки и
их реализации (например, компиляторы) могут влиять на такие характеристики качества программного обеспечения, как производительность, надежность и переносимость. В результате они могут серьезно способствовать возникновению уязвимостей в системе безопасности.

Самый простой язык построения - это язык конфигурации, на котором инженеры-программисты выбирают из ограниченного набора предопределенных опций для создания новых или пользовательских установок программного обеспечения. Текстовые файлы конфигурации, используемые как в операционных системах Windows, так и в Unix, являются примерами этого, а списки выбора в стиле меню некоторых программных генераторов представляют собой еще один пример языка конфигурации.

Языки инструментария используются для создания приложений из элементов инструментария (интегрированных наборов повторно используемых компонентов для конкретных приложений); они более сложны, чем языки конфигурации. Языки инструментария могут быть явно определены как языки прикладного программирования, или приложения могут подразумеваться набором интерфейсов инструментария.

Языки сценариев - это широко используемые языки прикладного программирования. В некоторых языках сценариев сценарии называются пакетными файлами или макросами.

Языки программирования являются наиболее гибкими языками построения. Они также содержат наименьшее количество информации о конкретных областях применения и процессах разработки. Поэтому для эффективного использования они требуют наибольшей подготовки и навыков. Выбор языка программирования может существенно повлиять на вероятность появления уязвимостей при написании кода (например, некритичное использование C и C++ вызывает сомнения с точки зрения безопасности).

Для языков программирования используются три основных обозначения:

- Лингвистический (например, C/C++, Java)
- Формальный (например, Event-B)
- Визуальный (например, MATLAB)

Лингвистические обозначения отличаются, в частности, использованием текстовых строк для представления сложных программных конструкций. Сочетание текстовых строк в шаблонах может иметь синтаксис, подобный предложению. При правильном использовании каждая строка должна иметь четкую семантическую коннотацию, обеспечивающую немедленное интуитивное понимание того, что происходит при создании программного обеспечения.

Формальные обозначения в меньшей степени зависят от интуитивных, повседневных значений слов и текстовых строк и в большей степени от определений, подкрепленных точными, недвусмысленными и формальными (или математическими) определениями. Формальные обозначения и методы построения лежат в семантической основе большинства обозначений системного программирования, где точность, поведение во времени и тестируемость важнее, чем простота перевода на естественный язык. Формальные конструкции также используют точно определенные способы комбинирования символов, которые позволяют избежать двусмысленности многих конструкций естественного языка.

Визуальные обозначения в гораздо меньшей степени зависят от текстовых обозначений лингвистического и формального характера и в большей степени от прямой визуальной интерпретации и размещения визуальных объектов, которые представляют базовое программное обеспечение. Визуальное построение несколько ограничено сложностью создания “сложных” утверждений, используя только расположение значков на дисплее. Однако эти значки могут быть мощными инструментами в тех случаях, когда основной задачей программирования является создание и “настройка” визуального интерфейса для программы, детальное поведение которой имеет основополагающее определение.

В настоящее время предметно-ориентированные языки (DSL) широко используются для создания предметно-ориентированных приложений. В отличие от языков программирования общего назначения, таких как C/C++ или Java, DSL предназначен для создания приложений для конкретной предметной области. Таким образом, DSL обычно может быть определен на основе более высокого уровня абстракции целевой предметной области и может быть оптимизирован для конкретного класса задач. Кроме того, DSL обычно может быть выражен визуальными обозначениями, определяемыми концепциями и правилами, специфичными для предметной области.

#### 3.3 Кодирование (Coding)

Следующие соображения применимы к процессу разработки программного обеспечения:

- Методы создания понятного исходного кода, включая соглашения об именовании и компоновку исходного кода
- Использование классов, перечисляемых типов, переменных, именованных констант и других подобных объектов
- Использование структур управления
- Обработка ошибок — как ожидаемых, так и исключительных (например, ввод неверных данных)
- Предотвращение нарушений безопасности на уровне кода (например, переполнение буфера или превышение границ индекса массива)
- Использование ресурсов за счет использования механизмов исключения и дисциплины при доступе к ресурсам, которые можно повторно использовать, включая потоки и блокировки базы данных
- Организация исходного кода в инструкции, подпрограммы, классы, пакеты или другие структуры
- Документация по коду
- Настройка кода

#### 3.4 Тестирование конструкции (Construction Testing)

Разработка включает в себя две формы тестирования, которые часто выполняются инженером-программистом, написавшим код: модульное тестирование и
интеграционное тестирование.

Конструктивное тестирование направлено на сокращение промежутка между вводом ошибок в код и их обнаружением, что позволяет снизить затраты на их устранение. В некоторых случаях тестовые примеры создаются после написания кода. В других случаях тестовые примеры могут быть созданы до написания кода.

Конструктивное тестирование обычно включает в себя набор различных видов тестирования, описанных в руководстве по тестированию программного обеспечения. Например, конструктивное тестирование обычно не включает системное тестирование, альфа-тестирование, бета-тестирование, стресс-тестирование, тестирование конфигурации, тестирование удобства использования или другое более специализированное тестирование.

Были опубликованы два стандарта по конструктивному тестированию: стандарт IEEE 829-1998 “Стандарт IEEE для документации по тестированию программного обеспечения” и стандарт IEEE 1008-1987 “Стандарт IEEE для модульного тестирования программного обеспечения”.

Более подробные справочные материалы приведены в разделах 2.1.1 и 2.1.2 Руководства по тестированию программного обеспечения.

#### 3.5 Повторное использование в строительстве (Reuse in Construction)

Повторное использование в строительстве включает в себя как строительство для повторного использования, так и строительство с возможностью повторного использования.

Разработка для повторного использования позволяет создавать программное обеспечение, которое может быть повторно использовано в будущем для текущего проекта или для других проектов с широкой мультисистемной перспективой. Разработка для повторного использования обычно основывается на анализе вариативности и проектировании. Чтобы избежать проблемы клонирования кода, разработчикам следует инкапсулировать повторно используемые фрагменты кода в хорошо структурированные библиотеки или компоненты.

Задачи, связанные с созданием программного обеспечения для повторного использования во время кодирования и тестирования, заключаются в следующем:

- Реализация вариативности с использованием таких механизмов, как параметризация, условная компиляция и шаблоны проектирования
- Инкапсуляция вариативности для упрощения настройки программных ресурсов
- Тестирование вариативности, обеспечиваемой программными ресурсами повторного использования
- Описание и публикация программных ресурсов повторного использования

Разработка с повторным использованием означает создание нового программного обеспечения путем повторного использования существующих программных ресурсов. Наиболее популярным методом повторного использования является повторное использование кода из библиотек, предоставляемых языком, платформой, инструментами или организационным репозиторием. Помимо этого, многие приложения, разрабатываемые сегодня, используют библиотеки с открытым исходным кодом. Кроме того, к повторно используемому и готовому программному обеспечению часто предъявляются те же (или более высокие) требования к качеству, что и к недавно разработанному программному обеспечению (например, требования к уровню безопасности).

Задачи, связанные с созданием программного обеспечения с повторным использованием во время кодирования и тестирования, заключаются в следующем:

- Выбор повторно используемых модулей, баз данных, процедур тестирования или тестовых данных
- Оценка возможности повторного использования кода или тестов
- Интеграция повторно используемых программных ресурсов в текущее программное обеспечение
- Предоставление информации о повторном использовании нового кода, процедур тестирования или тестовых данных

Формы программных ресурсов многократного использования не ограничиваются программными артефактами, которые должны быть интегрированы локально. В настоящее время облачные сервисы, предоставляющие различные услуги через онлайн-интерфейсы, такие как приложение RESTful программные интерфейсы (API) широко используются в приложениях. В новой модели облачных сервисов BaaS (серверная часть как услуга) приложения делегируют свои серверные реализации поставщикам облачных услуг — например, такие утилиты, как аутентификация, обмен сообщениями и хранение, обычно предоставляются поставщиками облачных сервисов.

Повторное использование лучше всего осуществлять систематически, в соответствии с четко определенным, повторяемым процессом. Систематическое повторное использование может значительно повысить производительность, качество и стоимость программного обеспечения. Систематическое повторное использование поддерживается такими методологиями, как разработка линейки программных продуктов и различных программных платформ. Широко используемые фреймворки, такие как Spring, предоставляют повторно используемые инфраструктуры для корпоративных приложений, поэтому команды разработчиков могут сосредоточиться на бизнес-логике конкретного приложения. Коммерческие платформы предоставляют различные повторно используемые платформы, библиотеки, компоненты и инструменты для поддержки разработки приложений для создания своих экосистем.

#### 3.6 Качество разработки (Construction Quality)

В дополнение к ошибкам, возникающим при разработке требований и проектировании, ошибки, возникающие при разработке, могут вызвать серьезные проблемы с качеством (например, уязвимости в системе безопасности). К ним относятся не только сбои в функционировании системы безопасности, но и другие сбои, которые позволяют обходить функции безопасности или создают другие слабые места или нарушения безопасности.

Существует множество методов обеспечения качества кода по мере его создания. Основными методами, используемыми для обеспечения качества построения, являются следующие:

- Модульное тестирование и интеграционное тестирование (см. раздел 3.4, Тестирование построения).
- Первая тестовая разработка (см. раздел 6.1.2 в разделе "Тестирование программного обеспечения")
- Использование утверждений и защитное программирование
- Отладка
- Проверки
- Технические обзоры, включая обзоры, ориентированные на безопасность (см. раздел 2.3 в разделе "Качество программного обеспечения")
- Статический анализ (см. раздел 2.2.1 Стандарта качества программного обеспечения)

Выбор конкретного метода или методик зависит от созданного программного обеспечения и от квалификации инженеров-программистов, выполняющих работы по его созданию. Программисты должны знать передовые методы и распространенные уязвимости (например, из широко известных списков распространенных уязвимостей). Автоматический статический анализ кода на наличие уязвимостей в системе безопасности доступен для нескольких распространенных языков программирования и может использоваться в проектах, критически важных для безопасности.

Мероприятия по обеспечению качества строительства отличаются от других мероприятий по обеспечению качества своей направленностью. Эти мероприятия сосредоточены на артефактах, которые тесно связаны с кодом, таких как детальное проектирование, в отличие от других артефактов, которые менее непосредственно связаны с кодом, таких как требования, высокоуровневые проекты и планы.

#### 3.7 Интеграция (Integration)

Во время проектирования ключевым этапом является интеграция индивидуально разработанных процедур, классов, компонентов и подсистем в единую систему. Кроме того, может потребоваться интеграция конкретной программной системы с другими программными или аппаратными системами.

Проблемы, связанные с интеграцией конструкции, включают планирование последовательности интеграции компонентов, определение того, что требуется аппаратное обеспечение, создание основы для поддержки промежуточных версий программного обеспечения, определение степени тестирования и качества работ, выполняемых над компонентами до их интеграции, а также определение этапов проекта, на которых тестируются промежуточные версии программного обеспечения.

Программы могут быть интегрированы как поэтапно, так и по нарастающей. Поэтапная интеграция, также называемая интеграцией по принципу "большого взрыва", предполагает отсрочку интеграции составных частей программного обеспечения до тех пор, пока не будут завершены все части, предназначенные для выпуска в виде версии. Считается, что поэтапная интеграция дает множество преимуществ по сравнению с традиционной поэтапной интеграцией (например, упрощает поиск ошибок, улучшает мониторинг хода выполнения, ускоряет доставку продукта и улучшает отношения с клиентами). При инкрементальной интеграции разработчики пишут и тестируют программу небольшими частями, а затем объединяют их по одной. Для обеспечения инкрементальной интеграции обычно требуется дополнительная инфраструктура тестирования, включающая, например, заглушки, драйверы и макетные объекты. Кроме того, создавая и интегрируя по одному модулю за раз (например, класс или компонент), в процессе разработки можно своевременно получать обратную связь от разработчиков и заказчиков. К другим преимуществам поэтапной интеграции относятся, в частности, упрощение поиска ошибок, улучшенный мониторинг хода выполнения и более полное тестирование модулей.

В настоящее время непрерывная интеграция (CI) широко применяется на практике. Команда разработчиков, использующая CI, часто интегрирует свою работу, что приводит к многочисленным интеграциям в день. CI обычно автоматизируется с помощью конвейера, который создает и тестирует каждую интеграцию для выявления ошибок и предоставления быстрой обратной связи.

#### 3.8 Кроссплатформенная разработка и миграция (Cross-Platform Development and Migration)

Некоторые приложения, такие как мобильные, в значительной степени зависят от определенных платформ (например, Apple, Android), которые обычно включают операционные системы, платформы разработки и API. Для поддержки нескольких платформ разработчикам необходимо разрабатывать и компоновать приложение отдельно для каждой целевой платформы, используя соответствующий программный язык и набор для разработки программного обеспечения (SDK). Однако мультиплатформенная разработка таким образом требует больше времени и затрат и может привести к различиям в восприятии пользователей в разных реализациях.

Кроссплатформенная разработка позволяет разработчикам разрабатывать приложение с использованием универсального языка и экспортировать его на различные платформы. Обычно это можно сделать двумя способами для мобильных приложений. Одним из способов является создание собственных приложений с использованием специальных инструментов, которые могут компилировать универсальный язык в форматы, зависящие от платформы. Другой способ заключается в разработке гибридных приложений, которые объединяют веб-приложения, разработанные с использованием таких языков, как язык гипертекстовой разметки версии 5 (HTML5) и каскадные таблицы стилей (CSS), а также собственные контейнеры или оболочки для различных операционных систем.

Для приложений, которые разрабатываются не таким образом, разработчики могут рассмотреть возможность переноса приложений с одной платформы на другую. Миграция обычно включает перевод различных языков программирования и API-интерфейсов, зависящих от платформы, и может быть частично автоматизирована с помощью инструментов.

### 4 ТЕХНОЛОГИИ СОЗДАНИЯ (CONSTUCTION TECHNOLOGIES)

#### 4.1 Разработка и использование API (API Design and Use)

API - это набор сигнатур, которые экспортируются и доступны пользователям библиотеки или фреймворка для написания своих приложений. Помимо сигнатур, API всегда должен содержать инструкции об эффектах и/или поведении программы (т.е. о ее семантике).

Дизайн API должен быть таким, чтобы его было легко изучать и запоминать, он должен обеспечивать читаемый код, им было трудно злоупотреблять, его было легко расширять, он должен быть полным и обеспечивать обратную совместимость. Поскольку API-интерфейсы обычно переживают свои реализации в широко используемых библиотеках или фреймворках, API-интерфейс должен быть простым и стабильным, чтобы облегчить разработку и обслуживание клиентских приложений.

Использование API включает в себя выбор, изучение, тестирование, интеграцию и, возможно, расширение API, предоставляемых библиотекой или фреймворком (см. раздел 3.5 "Повторное использование при разработке").

#### 4.2 Проблемы объектно-ориентированной среды выполнения (Object-Oriented Runtime Issues)

Объектно-ориентированные языки поддерживают механизмы времени выполнения, включая полиморфизм и рефлексию. Эти механизмы времени выполнения
повышают гибкость и адаптируемость
объектно-ориентированных программ.

Полиморфизм - это способность языка поддерживать общие операции, не зная до момента выполнения, какие конкретные объекты будет включать программное обеспечение. Поскольку программе заранее не известны типы объектов, точное поведение определяется во время выполнения (это называется динамической привязкой).

Рефлексия - это способность программы отслеживать и изменять свою структуру и поведение во время выполнения. Например, рефлексия позволяет проверять классы, интерфейсы, поля и методы во время выполнения, не зная их имен во время компиляции. Это также позволяет создание экземпляров новых объектов во время выполнения и вызов методов с использованием параметризованных имен классов и методов.

#### 4.3 Параметризация, шаблоны и обобщения (Parameterization, Templates and Generics)

Параметризованные типы, также известные как обобщенные (Ada, Eiffel) и шаблонные (C++), позволяют определить тип или класс без указания всех других используемых типов. Неуказанные типы предоставляются в качестве параметров в момент использования. Параметризованные типы предоставляют третий способ (помимо наследования классов и компоновки объектов) создания моделей поведения в объектно-ориентированном программном обеспечении.


#### 4.4 Утверждения, проектирование по контракту и защитное программирование (Assertions, Design by Contract and Defensive Programming)

Утверждение — это исполняемый предикат, помещаемый в программу (обычно это подпрограмма или макрос), который позволяет проверять программу во время выполнения. Утверждения особенно полезны в программах с высокой надежностью. Они позволяют программистам быстрее устранять несоответствующие допущения интерфейса, ошибки, которые возникают при модификации кода, и другие проблемы. Утверждения обычно компилируются в код во время разработки, а затем удаляются из кода, чтобы не снижать производительность.

Проектирование по контракту - это подход к разработке, при котором для каждой процедуры включаются предварительные и постусловия. Когда используются предварительные и постусловия, считается, что каждая процедура или класс формирует контракт с остальной частью программы. Контракт точно определяет семантику процедуры и, таким образом, помогает прояснить ее поведение. Считается, что разработка с помощью контракта повышает качество создания программного обеспечения.

Защитное программирование означает защиту процедуры от сбоев из-за неправильных входных данных.

Обычные способы обработки неверных входных данных включают проверку значений всех входных параметров и принятие решения о том, как обрабатывать неверные входные данные. Утверждения часто используются в защитном программировании для проверки входных значений.

#### 4.5 Обработка ошибок, исключений и отказоустойчивость (Error Handling, Exception Handling and Fault Tolerance)

То, как обрабатываются ошибки, влияет на способность программного обеспечения удовлетворять требованиям, связанным с корректностью, надежностью и другими нефункциональными характеристиками. Утверждения иногда используются для проверки на наличие ошибок. Также используются другие методы обработки ошибок, такие как возврат нейтрального значения, замена следующего фрагмента корректных данных, регистрация предупреждающего сообщения, возврат кода ошибки или завершение работы программного обеспечения.

Исключения используются для обнаружения и обработки ошибок или исключительных событий. Основная структура исключения следующая: процедура использует throw для создания обнаруженного исключения, а блок обработки исключений перехватывает исключение в блоке try-catch. Блок try-catch может обработать ошибочное условие или вернуть управление вызывающей процедуре. Политики обработки исключений должны быть тщательно разработаны в соответствии с общими принципами, такими как включение в сообщение об исключении всей информации, которая привела к возникновению исключения, избегание пустых блоков catch, знание исключений, генерируемых библиотечным кодом, возможно, создание централизованного отчета об исключениях и стандартизация использования исключений программой.

Отказоустойчивость - это набор методов, повышающих надежность программного обеспечения за счет обнаружения ошибок и последующего их устранения или локализации их последствий, если восстановление невозможно. Наиболее распространенные стратегии обеспечения отказоустойчивости включают резервное копирование и повторный запуск с использованием вспомогательного кода и алгоритмов голосования, и замена ошибочного значения фальшивым значением, которое будет иметь положительный эффект.

#### 4.6 Исполняемые модели (Executable Models)

Исполняемые модели позволяют абстрагироваться от деталей конкретных языков программирования и решений, касающихся организации программного обеспечения. В отличие от традиционных программных моделей, спецификация, созданная на исполняемом языке моделирования, таком как xUML (исполняемый UML), может быть развернута в различных программных средах без изменений. Более того, компилятор исполняемой модели (transformer) может преобразовать исполняемую модель в реализацию, используя набор решений о целевой аппаратной и программной среде. Таким образом, построение исполняемых моделей - это способ построения исполняемого программного обеспечения.

Исполняемые модели - это одна из основ, поддерживающих инициативу OMG в области архитектуры, управляемой моделями (MDA). Исполняемая модель - это способ указать независимую от платформы модель (PIM); PIM - это модель решения проблемы, которая не зависит от каких-либо технологий реализации. Затем можно создать модель для конкретной платформы (PSM), которая представляет собой модель, содержащую детали реализации, путем объединения PIM и платформы, на которую она опирается.

#### 4.7 Методы построения на основе состояний и таблиц (State-Based and Table-Driven Construction Techniques)

Программирование на основе состояний, или автоматное программирование, - это технология программирования, которая использует конечные автоматы для описания поведения программы. Графики переходов между конечными автоматами используются на всех этапах разработки программного обеспечения (спецификация, реализация, отладка и документирование). Основная идея заключается в том, чтобы создавать компьютерные программы таким же образом, как автоматизируются технологические процессы.

Программирование на основе состояний обычно сочетается с объектно-ориентированным программированием, образуя новый комплексный подход, называемый объектно-ориентированным программированием на основе состояний.

Табличный метод - это схема, которая использует таблицы для отображения информации, а не для передачи информации с помощью логических инструкций (таких как if и case). При использовании в соответствующих обстоятельствах табличный код проще, чем сложная логика, и его легче модифицировать. При использовании табличных методов программист решает две проблемы: какую информацию хранить в таблице или таблицах и как эффективно получить доступ к информации в таблице.

#### 4.8 Конфигурация среды выполнения и интернационализация (Runtime Configuration and Internationalization)

Для достижения большей гибкости программа часто создается таким образом, чтобы поддерживать позднее время привязки ее переменных. Например, конфигурация среды выполнения привязывает значения переменных и настройки программы во время ее выполнения, обычно путем обновления и чтения файлов конфигурации в режиме "точно в срок".

Интернационализация - это техническая операция по подготовке программы, обычно интерактивного программного обеспечения, для поддержки нескольких языков. Соответствующая операция, локализация, изменяет программу для поддержки определенного местного языка. Интерактивное программное обеспечение может содержать десятки или сотни подсказок, отображений состояния, справочных сообщений, сообщений об ошибках и так далее. Процессы проектирования и конструирования должны учитывать проблемы, связанные со строками и наборами символов, включая то, какой набор символов используется, какие типы строк используются, как поддерживать строки без изменения кода и как переводить строки на разные языки с минимальным воздействием на код обработки и пользовательский интерфейс.

#### 4.9 Обработка входных данных на основе грамматики (Grammar-Based Input Processing )

Обработка входных данных на основе грамматики включает синтаксический анализ или парсинг входного потока токенов. При этом создается структура данных (называемая деревом синтаксического анализа), представляющая входные данные. При обходе дерева синтаксического анализа по порядку обычно получается только что проанализированное выражение. Затем синтаксический анализатор проверяет таблицу символов на наличие определенных программистом переменных, которые заполняют дерево. После построения дерева синтаксического анализа программа использует его в качестве входных данных для вычислительных процессов.

#### 4.10 Примитивы параллелизма (Concurrency Primitives)

*Примитив синхронизации* - это программная абстракция, предоставляемая языком программирования или операционной системой, которая облегчает параллелизм и синхронизацию. Хорошо известные примитивы параллелизма включают семафоры, мониторы и мьютексы.

*Семафор* - это защищенная переменная или абстрактный тип данных, который обеспечивает простую, но полезную абстракцию для управления доступом к общему ресурсу несколькими процессами или потоками в среде параллельного программирования.

*Монитор* - это абстрактный тип данных, который представляет собой набор определенных программистом операций, выполняемых с взаимным исключением. Монитор содержит объявление общих переменных и процедур или функций, которые работают с этими переменными. Конструкция монитора гарантирует, что в данный момент времени в мониторе активен только один процесс.

*Мьютекс* (взаимное исключение) - это примитив синхронизации, который предоставляет эксклюзивный доступ к общему ресурсу только одному процессу или потоку одновременно.

#### 4.11 Промежуточное программное обеспечение (Middleware)

Промежуточное программное обеспечение - это широкая классификация программного обеспечения, которое предоставляет услуги выше уровня операционной системы, но ниже уровня прикладных программ. Промежуточное программное обеспечение может предоставлять контейнеры времени выполнения для программных компонентов, обеспечивая передачу сообщений, постоянство и прозрачное расположение в сети. Промежуточное программное обеспечение можно рассматривать как соединитель между компонентами, использующий промежуточное программное обеспечение. Современное промежуточное программное обеспечение, ориентированное на обмен сообщениями, обычно предоставляет корпоративную сервисную шину (ESB), которая поддерживает сервис-ориентированное взаимодействие и коммуникацию между несколькими программными приложениями.

#### 4.12 Методы построения распределенного и облачного программного обеспечения (Construction Methods for Distributed and Cloud-Based Software)

Распределенная система - это совокупность физически отдельных, возможно, разнородных компьютерных систем, объединенных в сеть для предоставления пользователям доступа к ресурсам, которые обслуживает система. Разработка распределенного программного обеспечения отличается от разработки традиционного программного обеспечения такими аспектами, как параллелизм, коммуникация и отказоустойчивость.

Распределенное программирование обычно подразделяется на несколько основных архитектурных категорий: клиент-серверная, трехуровневая архитектура, многоуровневая архитектура, распределенные объекты, слабая или жесткая связь

В настоящее время все больше приложений переносятся в облако. Облачное программное обеспечение часто использует архитектуру микросервисов и контейнерное развертывание. В дополнение к традиционным проблемам распределенного программного обеспечения, разработчикам облачного программного обеспечения также необходимо учитывать проблемы облачной инфраструктуры, такие как использование API-шлюз, регистрация и обнаружение сервисов.

#### 4.13 Построение гетерогенных систем (Constructing	Heterogeneous Systems)

Гетерогенные системы состоят из различных специализированных вычислительных блоков различных типов, таких как цифровые сигнальные процессоры (DSP), микроконтроллеры и периферийные процессоры. Эти вычислительные блоки управляются независимо и взаимодействуют друг с другом. Встраиваемые системы, как правило, являются гетерогенными системами.

При проектировании разнородных систем может потребоваться объединение нескольких языков спецификации для разработки различных компонентов системы (разработка аппаратного и программного обеспечения). Ключевыми вопросами являются многоязычная проверка, совместное моделирование и взаимодействие.

Во время проектирования программного и аппаратного обеспечения разработка программного обеспечения и виртуального оборудования осуществляется параллельно путем поэтапной декомпозиции. Аппаратная часть обычно моделируется с помощью программируемых логических матриц (FPGA) или специализированных интегральных схем (ASIC). Программная часть переведена на язык программирования низкого уровня.

#### 4.14 Анализ производительности и настройка (Performance Analysis and Tuning )

Эффективность кода, определяемая архитектурой, детальными проектными решениями, структурой данных и выбором алгоритма, влияет на скорость и размер выполнения. Анализ производительности исследует поведение программы, используя информацию, собранную в процессе выполнения программы, для выявления возможных проблемных мест в программе, которые необходимо улучшить.

Настройка кода, которая повышает производительность на уровне кода, изменяет правильный код, чтобы он выполнялся более эффективно. Настройка кода обычно включает в себя лишь небольшие изменения, которые затрагивают один класс, одну процедуру или, чаще всего, несколько строк кода. Доступен богатый набор методов настройки кода, в том числе для настройки логических выражений, циклов, преобразований данных, выражений и подпрограмм. Использование языка низкого уровня - еще один распространенный метод улучшения "горячих точек" в программе.

#### 4.15 Стандарты платформы (Platform Standards)

Стандарты платформы позволяют программистам разрабатывать портативные приложения, которые могут выполняться в совместимых средах
без изменений. Стандарты платформы обычно включают стандартные сервисы и API, которые должны использоваться совместимыми реализациями платформы. Типичными примерами стандартов платформы являются Java 2 platform, enterprise edition (J2EE); стандарт интерфейса портативной операционной системы (POSIX) для операционных систем, который представляет собой набор стандартов, реализованных в основном для операционных систем на базе Unix; и HTML5, который определяет стандарты для разработки веб-приложений, которые могут работать на разных платформах. среды (например, Apple iOS, Android).

#### 4.16 Программирование после первого тестирования (Test-First Programming)

Программирование на основе тестирования (также известное как разработка, управляемая тестированием (TDD)) - популярный стиль разработки, при котором тестовые примеры пишутся перед написанием любого кода. Программирование на основе тестирования обычно позволяет раньше обнаружить дефекты и легче их исправить, чем традиционные стили программирования. Кроме того, написание тестовых примеров заставляет программистов сначала подумать о требованиях и дизайне, прежде чем приступать к написанию кода, что позволяет быстрее выявлять проблемы с требованиями и дизайном.

#### 4.17 Цикл обратной связи при проектировании (Feedback Loop for Construction)

Своевременная и постоянная обратная связь по ходу строительства - одно из важнейших преимуществ гибкой разработки и DevOps. Гибкая разработка обеспечивает своевременную обратную связь по строительству благодаря частым итерациям в процессе разработки. DevOps обеспечивает еще более быструю обратную связь по результатам работы, позволяя разработчикам узнать, насколько хорошо их код работает в производственных средах. Такая быстрая обратная связь достигается с помощью методов и практик конвейера DevOps, таких как автоматизированная сборка и тестирование, выпуск canary и A/B-тестирование.


### 5 ИНСТРУМЕНТЫ РАЗРАБОТКИ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE CONSTRUCTION TOOLS)

#### 5.1 Среды разработки (Development Environments)

Среда разработки, или интегрированная среда разработки (IDE), предоставляет программистам комплексные возможности для разработки программного обеспечения за счет интеграции набора инструментов разработки. Выбор программистами среды разработки может повлиять на эффективность и качество разработки программного обеспечения.

Помимо базовых функций редактирования кода, современные IDE часто предлагают другие функции, такие как компиляция и обнаружение ошибок в редакторе, интеграция с системой управления исходным кодом, инструменты сборки/тестирования/отладки, сжатые или схематичные представления программ, автоматическое преобразование кода и поддержка рефакторинга.

В настоящее время облачные среды разработки доступны в общедоступных или частных облачных сервисах. Эти среды могут предоставлять все возможности современных IDE и даже больше (например, создание и развертывание в контейнерах) на базе облака.

#### 5.2 Визуальное программирование и платформы с низким/нулевым кодом (Visual Programming and Low- Code/Zero-Code Platforms)

Визуальное программирование позволяет пользователям создавать программы, графически манипулируя визуальными элементами программы. Как инструмент визуального программирования, конструктор графического интерфейса пользователя (GUI) позволяет разработчику создавать и поддерживать графические интерфейсы в режиме WYSIWYG (что вы видите, то и получаете). Графический редактор обычно включает в себя визуальный редактор, который позволяет разработчику создавать формы и окна и управлять расположением виджетов с помощью функций перетаскивания и настройки параметров. Некоторые графические редакторы могут автоматически генерировать исходный код, соответствующий визуальному дизайну графического интерфейса. Поскольку приложения с графическим интерфейсом обычно следуют событийно-ориентированному стилю (в котором события и их обработка определяют ход выполнения программы), инструменты GUI builder обычно предоставляют помощников по генерации кода, которые автоматизируют наиболее повторяющиеся задачи, необходимые для обработки событий. Вспомогательный код связывает виджеты с исходящими и входящими событиями, которые запускают функции, обеспечивающие логику приложения. Некоторые современные IDE предоставляют встроенные средства создания графического интерфейса или подключаемые модули для создания графического интерфейса. Существует также множество автономных средств создания графического интерфейса.

Визуальное программирование и другие инструменты быстрой разработки приложений превратились в платформы с низким или нулевым использованием кода. Эти платформы позволяют разработчикам создавать законченные приложения визуально с помощью интерфейса перетаскивания и с минимальными затратами на ручное кодирование. Обычно они основаны на принципах проектирования, основанного на моделях, визуального программирования и генерации кода. Разница между разработкой с низким и нулевым использованием кода заключается в ручном кодировании; первое требует небольшого количества ручного кодирования, в то время как второе практически не требует.

#### 5.3 Инструменты модульного тестирования (Unit Testing Tools)

Модульное тестирование проверяет функционирование программных модулей в отрыве от других программных элементов, которые можно тестировать отдельно (например, классов, процедур, компонентов). Модульное тестирование часто автоматизировано. Разработчики могут использовать инструменты и платформы модульного тестирования для расширения и создания автоматизированной среды тестирования. Например, разработчик может встроить критерии в тест с помощью инструментов модульного тестирования и фреймворков, чтобы проверить корректность модуля в различных наборах данных. Каждый тест реализуется как объект, и тестировщик запускает тесты. Неудачные тестовые примеры будут автоматически помечены и о них будет сообщено во время выполнения теста.

#### 5.4 Инструменты профилирования, анализа производительности и нарезки (Profiling, Performance Analysis and Slicing Tools)

*Инструменты анализа производительности* обычно используются для поддержки настройки кода. Наиболее распространенными инструментами анализа производительности являются инструменты профилирования. Инструмент профилирования выполнения отслеживает код во время его выполнения и записывает, как часто выполняется каждый оператор или сколько времени программа тратит на каждый оператор или путь выполнения. Профилирование кода во время его выполнения дает представление о том, как работает программа, где находятся "горячие точки" и на чем разработчикам следует сосредоточить усилия по настройке кода.

*Программная нарезка* включает в себя вычисление набора программных инструкций (т.е. фрагмента программы), которые могут повлиять на значения заданных переменных в какой-либо интересующей нас точке, что называется критерием нарезки. Программная нарезка может использоваться для определения источников ошибок, понимания программы и анализа оптимизации. Инструменты для нарезки программ вычисляют фрагменты программ для различных языков программирования.