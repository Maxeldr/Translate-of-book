# ГЛАВА 5

## ТЕСТИРОВАНИЕ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE TESTING)

### АКРОНИМЫ (ACRONYMS)

|  |  |  |                                                                     
|--|--|--|                                                                     
| API |Artificial Intelligence | Интерфейс прикладной программы |                                    
| ARNIC | Aeronautical Radio Incorporated |  Корпорация авиационного радио|                                 
| ATDD |Acceptance Test-Driven Developmen  | Разработка на основе приемочных испытаний  |                      
|  CMMI| Capability Maturity Model Integration| Интеграция модели зрелости возможностей |                        
| CSS | Cascading Style Sheets| Каскадные таблицы стилей |                                          
| DICOM | Digital Imaging and Communications in Medicine | Цифровая визуализация и коммуникации в медицине |                 
| DL | Deep Learning | Глубокое обучение |                                                  
| DU |Definition and Use | Определение и использование                                                                            
| EBSE | Evidence-Based Software Engineering | Разработка программного обеспечения, основанного на фактических данных |                             
| ECS | Ecosystem |Экосистема   |                                                        
| ETSI | European Telecommunications Standards Institute | Европейский институт телекоммуникационных стандартов |
| FHIR | Fast	Healthcare	Interoperability Resources | Быстрые ресурсы для обеспечения функциональной совместимости в сфере здравоохранения |
| GDPR | General Data Protection Regulation | Общие правила защиты данных |
| GPS | Global Positioning System|  Глобальная система позиционирования|
| GUI |Graphical User Interface |Графический интерфейс пользователя  |
| HIL |Hardware-In-the-Loop  |Аппаратное обеспечение в рабочем режиме  |


## ВВЕДЕНИЕ (INTRODUCTION)

Тестирование программного обеспечения состоит из динамической проверки того, что тестируемая система (SUT) обеспечивает ожидаемое поведение в конечном наборе тестовых примеров, выбранных из обычно бесконечной области выполнения.

В приведенном выше заявлении слова, выделенные курсивом, соответствуют ключевым вопросам в области знаний о тестировании программного обеспечения (KA). Эти термины обсуждаются ниже.

- Тестируемая система: Этот термин может относиться к объекту тестирования, которым может быть программа, программный продукт, приложение, услуга-
ориентированное приложение (например, веб-сервисы, микросервисы), промежуточное программное обеспечение (HW/SW), совокупность сервисов, система, совокупность систем (SoS) или экосистема (ECS).
- Тестовый набор: Тестовый набор - это спецификация всех объектов, которые необходимы для выполнения,
например, входные значения, условия выполнения и синхронизации, процедура тестирования и ожидаемые результаты (например, полученные значения, изменения состояния, выходные сообщения). Одних только входных значений не всегда достаточно для определения тестовых сценариев, поскольку модуль SUT может реагировать на одни и те же входные данные по-разному, в зависимости, например, от состояния модуля SUT или условий окружающей среды. Набор тестовых сценариев обычно называется набором тестов.
- Динамическая: динамическая проверка требует выполнения SUT в тестовом наборе. Статические методы дополняют динамическое тестирование, и они описаны в Руководстве по качеству программного обеспечения.1

- Конечность: даже при простом тестировании выполнение всех возможных тестовых сценариев (т.е. всестороннее тестирование) может
занять месяцы или годы. Следовательно, на практике тестирование нацелено на подмножество всех возможных тестовых сценариев, определяемых различными критериями. Тестирование всегда подразумевает компромисс между ограниченными ресурсами и графиками, с одной стороны, и, по сути, неограниченными требованиями к тестированию, с другой.
- Отбор: определение наиболее подходящих критериев отбора в данных условиях является сложной задачей. Можно рассмотреть различные методы
и объединены для решения этой проблемы такие меры, как анализ рисков, требования к программному обеспечению, снижение затрат, удовлетворение требований к качеству, расстановка приоритетов и обнаружение неисправностей. Многие предлагаемые методы тестирования отличаются тем, как выбирается набор тестов, и инженеры-программисты должны понимать, что разные критерии отбора могут привести к совершенно разной степени эффективности.
- Ожидаемое: для каждого выполненного тестового примера должна быть возможность, хотя это может быть и непросто, принять решение о том, какой набор тестов будет выбран.
соответствуют ли наблюдаемые результаты SUT ожидаемым. Действительно, наблюдаемое поведение может быть проверено на соответствие потребностям пользователя (обычно называемое тестированием на валидацию), спецификации (тестирование на верификацию) или, возможно, на соответствие прогнозируемому поведению, вытекающему из неявных требований или ожиданий. (Смотрите раздел 4.3, Спецификация требований, основанная на критериях приемлемости, в разделе "Требования к программному обеспечению".)

Как видно из этого обсуждения, тестирование программного обеспечения - это всеобъемлющая и целостная деятельность, включающая все этапы

Стоит отметить, что терминология в разных сообществах неодинакова, и некоторые используют термин, относящийся к жизненному циклу разработки какого-либо процесса (например, традиционная разработка или разработка с левосторонним сдвигом). В оставшейся части этой главы представлены основы тестирования программного обеспечения, а также связанные с ним трудности, недочеты и общепринятые методы и решения.

## РАЗБИВКА ТЕМ ДЛЯ ТЕСТИРОВАНИЯ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (BREAKDOWN OF TOPICS FOR SOFTWARE REQUIREMENTS)

На рисунке 1 показана разбивка тем для КА по тестированию программного обеспечения. Таблица разбивки тем по сравнению с Более подробная разбивка приведена в справочных материалах в конце этого КА. Первая тема, Основы тестирования программного обеспечения, охватывает основные определения в тестировании программного обеспечения, основную терминологию и ключевые вопросы, а также взаимосвязь тестирования программного обеспечения с другими видами деятельности.

Вторая тема, Уровни тестирования, содержит две (ортогональные) подтемы. В первой подтеме, "Цель тестирования", перечислены уровни, на которые традиционно подразделяется тестирование крупногабаритного программного обеспечения, а во второй подтеме, "Цели тестирования", обсуждается тестирование для конкретных условий или свойств. Не все виды тестирования применимы к каждому программному продукту, и не все возможные типы были перечислены. Цель теста и задачи тестирования вместе определяют, как определяется набор тестов, как в отношении его согласованности (какого объема тестирования достаточно для достижения заявленной цели?), так и в отношении его состава (какие тестовые случаи следует выбрать для достижения заявленной цели?). (Однако, как правило, “для достижения заявленной цели” подразумевается, и задается только первая часть из двух приведенных выше вопросов.) Критериями для ответа на первый вопрос являются критерии адекватности теста, в то время как критерии, используемые для ответа на второй вопрос, являются критериями отбора теста.

За последние несколько десятилетий было разработано несколько методов тестирования, и до сих пор предлагаются новые. Таким образом, третья тема посвящена общепринятым и стандартизированным методам.

Меры, связанные с тестированием, рассматриваются в четвертой теме, в то время как вопросы, связанные с процессом тестирования, рассматриваются в пятой.

Тестирование программного обеспечения в процессах разработки и прикладных областях описано в шестом разделе, а тестирование с использованием новых технологий - в седьмом разделе. тестирование также относится к статическим методам.

<div style="text-align:center">
<img src="Images/Chapter 5/Рисунок 5.1.bmp"
alt="Рисунок 5.1. Разбивка тем.">
<br>Рисунок 5.1. Разбивка тем.
</div>

### 1 ОСНОВЫ ТЕСТИРОВАНИЯ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (Software Testing Fundamentals)

В этом разделе представлен обзор основных проблем тестирования и взаимосвязи тестирования с другими видами деятельности. Здесь также дается определение большинству терминов тестирования. Более полный обзор тестирования и терминологии, связанной с тестированием, можно найти в приведенных ссылках.

#### 1.1 Ошибки в сравнении с неудачами (Faults vs. Failures)

В литературе по разработке программного обеспечения для описания неисправности используется множество терминов: в частности, неисправность (см. для сравнения дефект в разделе <a>3.2 "Характеристика дефекта" в Руководстве по <a>качеству программного обеспечения</a>), сбой и ошибка. Важно проводить различие между причиной сбоя (для обозначения которого здесь используется термин "ошибка") и нежелательным эффектом, наблюдаемым при оказании услуг системой (сбоем). Действительно, в программном обеспечении вполне могут быть ошибки, которые никогда не проявляются как сбои. (Смотрите теоретические и практические ограничения тестирования в разделе 1.2.8.) Таким образом, тестирование может выявить сбои, но вызывающие их неисправности могут и должны быть устранены. Однако причина сбоя не всегда может быть однозначно определена. Теоретических критериев для окончательного определения неисправности, вызвавшей наблюдаемый сбой, в целом не существует. Возможно, для устранения сбоя потребуется изменить неисправность, но могут сработать и другие модификации. Чтобы избежать двусмысленности, мы могли бы ссылаться на входные данные, вызывающие сбой, вместо

ошибки — это те наборы входных данных, которые приводят к появлению сбоя.

#### 1.2 Ключевые вопросы (Key Issues)

В этом подразделе представлен обзор основных проблем тестирования

#### 1.2.1 Создание тестового примера (Test Case Creation)

Создание или генерация тестового набора создает набор тестов, который может быть полезен для тестирования SUT в определенных целях (например, на адекватность, точность или оценку). Поскольку создание тестовых наборов является одним из наиболее важных и интенсивных видов тестирования программного обеспечения, оно обычно сопровождается подходами, методами и инструментами для автоматизации процесса.

#### 1.2.2 Критерии отбора тестов и их адекватности (Test Selection and Adequacy Criteria)

Критерий отбора тестов - это средство отбора тестовых наборов или определения того, что набор тестов достаточен для определенной цели. Цель отбора тестовых наборов - уменьшить количество тестовых наборов, сохранив при этом эффективность с точки зрения охвата или скорости обнаружения ошибок. Критерии адекватности теста могут быть использованы для принятия решения о проведении достаточного тестирования.

#### 1.2.3 Определение приоритетов/Минимизация (Prioritization/Minimization)

Для повышения эффективности тестирования могут быть приняты подходящие стратегии выбора тестовых примеров или расстановки приоритетов. Определение приоритетов тестовых наборов направлено на определение порядка выполнения тестов в соответствии с некоторыми критериями (например, покрытие, частота обнаружения ошибок, сходство и риск), поэтому тесты с более высоким приоритетом выполняются раньше тестов с более низким приоритетом. Минимизация тестовых наборов обычно направлена на сокращение набора тестов путем удаления избыточных тестовых наборов в соответствии с каким-либо критерием или целью.

#### 1.2.4 Цель тестирования (Purpose of Testing)

Различные четко определенные цели могут направлять процесс тестирования; только с учетом конкретной цели можно сгенерировать (выбрать), выполнить и оценить набор тестов (более подробную информацию смотрите в разделе 2).

#### 1.2.5 Оценка и сертификация (Assessment and Certification)

Тестирование должно быть сосредоточено на конкретных (обязательных) предписаниях, таких как требования, законы и стандарты. Следует разработать и выполнить тестовые задания, чтобы предоставить доказательства, полезные для оценки и/или подтверждения соблюдения выбранных предписаний. Обычно оценка и сертификация результатов тестирования включают в себя проверку того, что тестовые примеры были получены и сгенерированы с использованием базовых требований, внедрение процесса управления конфигурацией и использование повторяемых процессов.

#### 1.2.6 Тестирование для обеспечения/улучшения качества (Testing for Quality Assurance/Improvement)

Тестирование включает в себя множество аспектов, включая повышение и гарантию качества. Эти характеристики включают запланированные и систематические вспомогательные процессы и мероприятия, обеспечивающие уверенность в том, что SUT соответствует установленным техническим требованиям или требованиям к качеству. Таким образом, повышение и обеспечение качества предполагает определение методов, инструментов, навыков и практик для достижения определенного уровня качества и поставленных целей. Список основных характеристик качества, которые можно измерить или оценить с помощью тестирования, приведен в стандарте ISO/IEC 25010:2011. (Смотрите также раздел 1.3.2 "Качество программного продукта" в Руководстве по качеству программного обеспечения.)

#### 1.2.7 Проблема с оракал (The Oracle Problem)

Важным компонентом тестирования является оракул. Действительно, тест имеет смысл только в том случае, если можно определить его наблюдаемый результат. Оракулом может быть любой человек или механический агент, который решает, правильно ли вел себя SUT в каждом тесте и в соответствии с ожидаемыми результатами. Следовательно, оракул выдает вердикт “принято” или “не принято”. Оракул не всегда может принять решение; в таких случаях результаты тестирования классифицируются как неубедительные. Существует много видов оракулов — например, однозначные спецификации требований,

поведенческие модели и аннотации к коду. Автоматизация механизированных оракулов может быть сложной и дорогостоящей.

#### 1.2.8 Теоретические и практические ограничения (Theoretical and Practical Limitations)

Теория тестирования предостерегает от необоснованного доверия к серии успешных тестов. К сожалению, большинство установленных результатов теории тестирования являются отрицательными, поскольку они указывают на то, что не достигнуто, а не на то, что достигнуто. Самой известной цитатой на этот счет является афоризм Дейкстры о том, что “тестирование программы может быть использовано для выявления наличия ошибок, но никогда для доказательства их отсутствия”. Очевидная причина этого заключается в том, что полное тестирование неосуществимо в реальном программном обеспечении.

#### 1.2.9 Проблема неосуществимых путей (The Problem of Infeasible Paths)

Неосуществимые пути - это пути потока управления, которые не могут быть реализованы никакими входными данными (т.е. тестовыми примерами). Управление неосуществимыми путями может помочь сократить время и ресурсы, выделяемые на тестирование. Они представляют собой серьезную проблему при тестировании на основе путей, особенно при автоматизированном построении тестовых примеров для проверки путей потока управления. Кроме того, неосуществимые пути также могут быть подключены к процессу анализа и обнаружения уязвимостей в системе безопасности и могут повысить точность.

#### 1.2.10 Тестируемость (Testability)

Термин "тестируемость программного обеспечения" имеет два взаимосвязанных, но разных значения. С одной стороны, это относится к легкости, с которой может быть удовлетворен данный критерий охвата тестированием; с другой стороны, это определяется как вероятность, возможно, измеряемая статистически, того, что набор тестов выявит сбой, если программное обеспечение неисправно. Оба значения важны.

#### 1.2.11 Выполнение тестов и автоматизация (Test Execution and Automation)

Важной задачей тестирования является улучшение достижимой автоматизации либо путем разработки передовых методов генерации тестовых данных, либо, помимо генерации тестов, путем поиска инновационных вспомогательных процедур для (полной) автоматизации различных видов тестирования — например, для увеличения количества создаваемых или выполняемых тестовых примеров.

#### 1.2.12 Масштабируемость (Scalability)

Масштабируемость - это способность программного обеспечения расширяться
в соответствии с его нефункциональными требованиями, такими как нагрузка, количество транзакций и объем данных. Масштабируемость также связана со сложностью платформы и среды, в которой работает программа, например, распределенных беспроводных сетей и виртуализированных сред, крупномасштабных кластеров и мобильных облаков.

#### 1.2.13 Эффективность тестирования (Test Effectiveness)

Оценка SUT, измерение эффективности методики тестирования и определение того, можно ли остановить тестирование, являются важными аспектами тестирования программного обеспечения и могут потребовать определения и выбора надлежащих показателей эффективности тестирования.

#### 1.2.14 Управляемость, репликация и обобщение (Controllability, Replication, and Generalization)

Конкретные аспекты тестирования включают следующее:

- Управляемость означает перенос тестовых действий из лаборатории (т.е. контролируемых условий) в реальность (т.е. неконтролируемые
условия).
- Репликация означает возможность для разных людей выполнять одни и те же тестовые действия. Цель состоит в том, чтобы проверить, работает ли данная
теория тестирования, по крайней мере, в лабораторных условиях.
- Обобщение тестирования связано с внешней валидностью, т.е. с тем, в какой степени тестируемый
тестовый подход может быть применен к более широким условиям или целевым группам населения. Обобщенность тестирования программного обеспечения может быть важна для управления тестированием (с точки зрения затрат и усилий) и повышения уверенности в результатах тестирования.

#### 1.2.15 Автономное тестирование по сравнению с онлайн-тестированием Онлайн Тестирование (Off-Line vs. Online Testing)

Процесс тестирования может выполняться в двух режимах: автономном и онлайн-тестировании. Как правило, при автономном тестировании SUIT проверяется в среде без внешнего взаимодействия, в то время как при онлайн-тестировании SUIT взаимодействует с реальной средой приложения. В обоих случаях тестовые примеры создаются либо вручную, либо автоматически, и ожидаемые результаты используются для оценки SUT.

#### 1.3.Взаимосвязь тестирования с другими видами деятельности (Relationship of Testing to Other Activities)

- Тестирование программного обеспечения связано, но отличается от методов статического управления качеством программного обеспечения,
проверки корректности, отладки и построения программ. Однако полезно рассмотреть тестирование с точки зрения аналитиков качества программного обеспечения и сертификаторов. Для дальнейшего обсуждения смотрите следующее:

- Тестирование по сравнению с Методы статического управления качеством программного обеспечения: Смотрите раздел 2.2.1 "Методы статического анализа" в Руководстве по качеству программного обеспечения.
- Тестирование в сравнении с улучшением/гарантией качества: Смотрите раздел 1.3.2 "Качество программного продукта" в разделе "Качество программного обеспечения".
- Тестирование в сравнении с Доказательства корректности и формальная проверка: Смотрите раздел "Модели и методы разработки программного обеспечения".
- Тестирование в сравнении с Отладка: Смотрите раздел "Конструктивное тестирование" в разделе "Разработка программного обеспечения", а также инструменты и методы отладки в разделе "Вычислительная техника".
Фундаменты КА.
- Тестирование по сравнению с Построение программы: Смотрите раздел "Тестирование построения" в разделе "Разработка программного обеспечения".
- Тестирование по сравнению с Безопасность: Ознакомьтесь с новым разделом "Безопасность программного обеспечения".
- Cравнение тестирования с Оценкой усилий: см. раздел <a href="/8_Software Configuration Management.markdown">"Управление разработкой программного обеспечения"</a>.
- Сравнение тестирования с Юридические вопросы: см. раздел <a>"Профессиональная практика разработки программного обеспечения"</a>.

### 2 Уровни тестирования (Test Levels)

Тестирование программного обеспечения обычно выполняется на разных уровнях в процессе разработки и сопровождения. Уровни можно различать в зависимости от объекта тестирования, цели или по назначению или задаче (уровня тестирования).

#### 2.1 Цель тестирования (The Target of the Test)

Цель тестирования может варьироваться в зависимости от поставщика, условий окружающей среды и бюджета/времени, выделяемого на тестирование. Можно выделить четыре этапа тестирования: модульное, интеграционное, системное и приемочное. Эти четыре этапа тестирования не подразумевают какого-либо процесса разработки, и ни один из них не считается более важным, чем три других.

#### 2.1.1 Модульное тестирование (Unit Testing)

Модульное тестирование проверяет изолированное функционирование элементов SUT, которые можно тестировать по отдельности. В зависимости от контекста, это могут быть отдельные подпрограммы или компоненты, подсистема или совокупность компонентов SUT. Обычно, но не всегда, модульное тестирование проводит автор кода.

#### 2.1.2 Интеграционное тестирование (Integration Testing)

Интеграционное тестирование проверяет взаимодействие между элементами SUT (например, компонентами, модулями или подсистемами). Стратегии интеграции предполагают постепенную (и систематическую) интеграцию элементов SUT с учетом либо определенных функциональных потоков, либо спецификаций архитектуры. Типичными стратегиями интеграционного тестирования являются нисходящее, восходящее, смешанное (или многослойное) и "большой взрыв". Они ориентированы на различные аспекты уровня интеграции элементов SUT. Интеграционное тестирование - это непрерывная деятельность, которая может выполняться на каждом этапе разработки. Это может касаться различных аспектов, таких как взаимодействие (например, совместимость или конфигурация) элементов SUT или с внешней средой. Также могут быть рассмотрены внешние интерфейсы к другим приложениям, утилитам, аппаратным устройствам или операционным средам.

#### 2.1.3 Тестирование системы (System Testing)

Системное тестирование касается проверки поведения SUT (согласно определению в разделе 1). Эффективное модульное и интеграционное тестирование должно было выявить множество дефектов SUT. Кроме того, системное тестирование обычно считается подходящим для оценки нефункциональных системных требований, таких как безопасность, конфиденциальность, скорость, точность и надежность. (см. <a>Функциональные и нефункциональные требования</a> в разделе <a href="/1_Software Requirements.markdown">"Требования к программному обеспечению"</a> и <a>"Требования к качеству программного обеспечения"</a> в разделе <a>"Качество программного обеспечения"</a>).

#### 2.1.4 Приемо-сдаточные испытания (Acceptance Testing)

Приемочное тестирование предназначено для развертывания SUT. Его основная цель - убедиться, что SUT удовлетворяет требованиям и ожиданиям конечных пользователей. Как правило, оно выполняется конечными пользователями или совместно с ними для выполнения тех функций и задач, для которых было создано программное обеспечение. Например, это тестирование может быть направлено на тестирование удобства использования или приемку в эксплуатацию. Определение приемочных тестов перед внедрением соответствующей функциональности является ключевым этапом разработки, основанной на приемочных тестах (ATDD). (см. <a href="/1_Software Requirements.markdown#43-спецификация-требований-основанная-на-критериях-приемлемости-acceptance-criteria-based-requirements-specification">Требования к программному обеспечению, раздел 4.3</a>.)

#### 2.2 Цели тестирования (Acceptance Testing)

Тестирование проводится с учетом конкретных целей, которые сформулированы (более или менее) четко и с разной степенью точности. Формулировка целей тестирования в точных количественных терминах способствует измерению и контролю процесса тестирования.
Тестирование может быть направлено на проверку различных свойств. Например, тестовые примеры могут быть разработаны для проверки того, что функциональные спецификации реализованы надлежащим образом, что в литературе по-разному называется тестированием на соответствие, корректностью или функциональным тестированием. Однако также могут быть протестированы некоторые другие нефункциональные свойства, включая производительность, надежность и удобство использования. (Смотрите модели и характеристики качества в разделе "Качество программного обеспечения").

Другие важные задачи тестирования включают, но не ограничиваются ими, измерение надежности, выявление уязвимостей в области безопасности и конфиденциальности и оценку удобства использования; в зависимости от цели могут потребоваться различные подходы. Обратите внимание, что, как правило, цели тестирования зависят от объекта тестирования; разные цели решаются на разных уровнях тестирования.
Перечисленные ниже подтемы являются наиболее часто упоминаемыми в литературе.

#### 2.2.1 Проверка соответствия (Conformance Testing)

Проверка соответствия направлена на проверку соответствия SUT стандартам, правилам, спецификациям, требованиям, дизайну, процессам или практике.

#### 2.2.2 Проверка соответствия (Compliance Testing)

Проверка соответствия направлена на демонстрацию соответствия SUT закону или нормативному акту. Обычно тестирование на соответствие требованиям проводится в принудительном порядке внешним регулирующим органом.

#### 2.2.3 Тестирование установки (Installation Testing)

Часто после завершения системного и приемочного тестирования и установки SUT в целевой среде проводится проверка SUT. Тестирование установки можно рассматривать как тестирование системы, проводимое в рабочей среде с учетом конфигураций оборудования и других эксплуатационных ограничений. Процедуры установки также могут быть проверены.

#### 2.2.4.Альфа и бета тестирование (Alpha and Beta Testing)

Перед выпуском SUT иногда предоставляется небольшой отобранной группе потенциальных пользователей для пробного использования (альфа-тестирование) и/или более широкому кругу репрезентативных пользователей (бета-тестирование). Эти пользователи сообщают о проблемах с продуктом. Альфа- и бета-тестирование часто не контролируются и не всегда предусмотрены в плане тестирования.

#### 2.2.5 Регрессионное тестирование (Regression Testing)

Согласно определению, регрессионное тестирование - это “выборочное повторное тестирование SUT для проверки того, что изменения не вызвали непредвиденных последствий и что SUT по-прежнему соответствует установленным требованиям”. На практике этот подход призван показать, что SUT по-прежнему проходит ранее пройденные тесты в наборе тестов (на самом деле, его иногда называют нерегрессионным тестированием). В некоторых случаях необходимо найти компромисс между гарантией, которую дает регрессионное тестирование при каждом внесении изменений, и ресурсами, необходимыми для выполнения регрессионных тестов. Это может занять довольно много времени из-за большого количества тестов, которые могут быть выполнены. Регрессионное тестирование может проводиться на каждом уровне тестирования, описанном в разделе 2.1. Оно может включать функциональное и нефункциональное тестирование, такое как тестирование надежности, доступности, удобства использования, ремонтопригодности, преобразования, миграции и совместимости.

Регрессионное тестирование может включать в себя отбор (см. раздел <a href="#122-критерии-отбора-тестов-и-их-адекватности-test-selection-and-adequacy-criteria">1.2.2</a>) и минимизацию (см. раздел <a href="#123-определение-приоритетовминимизация-prioritizationminimization">1.2.3</a>) тестовых примеров, а также применение подходов к определению приоритетов (см. раздел <a href="#226-тестирование-с-расстановкой-приоритетов-prioritization-testing">2.2.6</a>) к существующим наборам тестов.

Регрессионное тестирование - это фундаментальный вид деятельности в Agile, DevOps, Test-Driven Development (TDD) и непрерывной разработке. Обычно оно выполняется после интеграционного тестирования и перед внедрением в производство или эксплуатацию.

#### 2.2.6 Тестирование с расстановкой приоритетов (Prioritization Testing)

Определение приоритетов тестовых наборов направлено на планирование тестовых наборов таким образом, чтобы повысить скорость обнаружения ошибок, вероятность их выявления, охват тестируемого кода и надежность SUT. Как правило, тестирование с расстановкой приоритетов основано на эвристических методах, и его эффективность может варьироваться в зависимости от SUT, среды и доступных тестовых примеров. Среди различных предложений по расстановке приоритетов одним из наиболее распространенных является расстановка приоритетов на основе сходства. При таком подходе к расстановке приоритетов тестовые примеры распределяются по приоритетам, начиная с наиболее непохожих в соответствии с заранее определенной функцией расстояния.

#### 2.2.7 Нефункциональное тестирование (Non-functional Testing)

Целью нефункционального тестирования является проверка нефункциональных аспектов (таких как производительность, удобство использования или надежность), и оно выполняется на всех уровнях тестирования. На сегодняшний день существуют сотни методов нефункционального тестирования, которые включают в себя, но не ограничиваются ими, следующее:

- Тестирование производительности: Тестирование производительности проверяет соответствие программного обеспечения установленным требованиям к производительности и оценивает
характеристики производительности (например, производительность и время отклика).
- Нагрузочное тестирование: Нагрузочное тестирование направлено на проверку поведения SUT в условиях высокой нагрузки для выявления проблем (например,
взаимоблокировок, скачков, переполнения буфера и утечек памяти) или нарушений надежности, стабильности или безотказности. Он направлен на оценку скорости, с которой различные запросы на обслуживание поступают в SUT.
- Стресс-тестирование: Стресс-тестирование направлено на то, чтобы вывести SUT за пределы его возможностей, создав нагрузку, превышающую
ожидаемую для системы.
- Объемное тестирование: Объемное тестирование направлено на оценку ограничений внутреннего хранилища SUT и его способности обмениваться
данными и информацией.
- Тестирование на отказоустойчивость : Тестирование на отказоустойчивость проверяет способность SUT справляться с большими нагрузками или неожиданным отказом в продолжении
типичных операций (например, путем выделения дополнительных ресурсов). Тестирование на отказоустойчивость также связано с проверкой возможности восстановления.
- Тестирование надежности:
Тестирование надежности оценивает надежность SUT путем
выявления и исправления неисправностей. Тестирование надежности позволяет наблюдать за работой SUT или отрабатывать SUT с помощью тестовых примеров в соответствии со статистическими моделями (операционными профилями) поведения различных пользователей. Обычно надежность оценивается с помощью моделей повышения надежности. Непрерывные процессы разработки (такие как DevOps) в настоящее время облегчают внедрение тестирования надежности на различных итерациях для повышения конечного качества SUT.
- Тестирование совместимости : Тестирование совместимости используется для проверки того, может ли программное обеспечение взаимодействовать с различными
аппаратными и программными средствами или с различными версиями или выпусками.
- Тестирование масштабируемости : Тестирование масштабируемости оценивает способность использовать и изучать систему и пользовательскую документацию. Оно также
фокусируется на эффективности системы в выполнении задач пользователя и способности восстанавливаться после пользовательских ошибок. Это тестирование особенно важно в распределенных или высокопроизводительных системах.
- Тестирование на эластичность: Тестирование на эластичность оценивает способность SUT (например, облачных и распределенных систем) быстро расширяться или сокращаться

вычислительные ресурсы, память и хранилища данных не снижаются при максимальной загрузке. Некоторые задачи тестирования эластичности заключаются в контроле поведения, определении ресурсов, которые необходимо (не) распределять, параллельной координации событий и оценке масштабируемости.

- Тестирование инфраструктуры , приложение: Тестирование инфраструктуры проверяет и валидирует компоненты инфраструктуры, чтобы снизить вероятность
избежать простоев и повысить производительность ИТ-инфраструктуры.
- Последовательное тестирование : Стандарт IEEE/ISO/IEC 24765 определяет последовательное тестирование как “тестирование, при котором выполняются два или более варианта
программы с одинаковыми входными данными, сравниваются выходные данные и анализируются ошибки в случае расхождений”.
- Тестирование восстановления : Тестирование восстановления направлено на проверку возможности перезапуска программного обеспечения после сбоя системы или других аварийных ситуаций.

#### 2.2.8 Тестирование безопасности (Security Testing)

Тестирование безопасности направлено на подтверждение того, что SUT защищен от внешних атак. Более точно, оно проверяет конфиденциальность, целостность и доступность систем и их данных. Обычно тестирование безопасности включает проверку на предмет неправомерного использования программного обеспечения или системы (отрицательное тестирование). (см. Тестирование безопасности в разделе <a>"Безопасность программного обеспечения"</a>)

#### 2.2.9 Тестирование конфиденциальности (Privacy Testing)

Тестирование конфиденциальности предназначено для оценки безопасности и приватности персональных данных пользователей с целью предотвращения локальных атак. В частности, оно оценивает политику конфиденциальности и обмена информацией, а также проверку децентрализованного управления профилями пользователей в социальных сетях и решениями для хранения данных. (См. Юридический вопрос в разделе <a>"Профессиональная практика разработки программного обеспечения"</a>)

#### 2.2.10 Тестирование интерфейса и прикладных программ (API). (Interface and Application Program Interface (API) Testing)

Дефекты интерфейса часто встречаются в сложных системах. Целью тестирования интерфейса является проверка того, обеспечивает ли интерфейс компонентов корректный обмен данными и управляющей информацией. Обычно тестовые примеры создаются на основе спецификации интерфейса. Конкретной целью тестирования интерфейса является имитация использования API приложениями конечных пользователей. Это включает в себя генерацию параметров вызовов API, настройку условий внешней среды и определение внутренних данных, которые влияют на API.

#### 2.2.11 Тестирование конфигурации (Configuration Testing)

Если модуль SUT создан для обслуживания различных пользователей, конфигурационное тестирование проверяет программное обеспечение в соответствии с указанными конфигурациями.

#### 2.2.12 Тестирование удобства использования и взаимодействия человека и компьютера (Usability and Human-Computer Interaction Testing)

Основная задача тестирования удобства использования и взаимодействия человека и компьютера - оценить, насколько легко конечным пользователям освоить программное обеспечение. Это может включать в себя тестирование функций программного обеспечения, которые поддерживают задачи пользователя, документации, которая помогает пользователям, и способности системы восстанавливаться после пользовательских ошибок. (Смотрите раздел "Дизайн, ориентированный на пользователя" в разделе "Разработка программного обеспечения")

### 3 Методы тестирования (Test Techniques)

За прошедшие годы были разработаны различные методы тестирования для повышения общего качества SUT . Эти методы представляют собой попытку предложить систематические процедуры и подходы для создания или выбора наиболее подходящих наборов тестов для выявления как можно большего числа отказов.

Методы тестирования могут быть классифицированы с учетом различных ключевых аспектов, таких как спецификация, структура и опыт . Дополнительными источниками классификации могут быть обнаруживаемые ошибки, прогнозируемое использование, модели, характер применения или полученные знания. Например, тестирование на основе моделей относится ко всем методам тестирования, которые используют концепцию модели, представляющей поведенческую спецификацию, структуру SUT или доступные знания и опыт. Однако возможно дублирование классификаций, и одна категория может иметь дело с комбинированием двух или более методов.

В литературе доступны альтернативные классификации, основанные на степени информированности о СУТ. Действительно, в методах, основанных на спецификации, также известных как методы черного ящика, генерация тестовых примеров основана только на поведении SUT при вводе/выводе, тогда как в методах, основанных на структуре, также называемых белыми ящиками (или стеклянными ящиками, или прозрачными ящиками), генерация тестовых примеров основана только на поведении SUT при вводе/выводе. тестовые примеры генерируются с использованием информации о том, как был разработан или закодирован SUT.

Поскольку некоторые методы тестирования используются чаще, чем другие, в оставшейся части раздела представлен стандарт методы тестирования и те, которые обычно применяются на практике.

#### 3.1 Методы, основанные на спецификации (Specification-Based Techniques)

Основная идея методов, основанных на спецификации (иногда также называемых методами тестирования предметной области), заключается в выборе нескольких тестовых примеров из входного домена, которые могут обнаруживать определенные категории ошибок (также называемые ошибками предметной области). Эти методы проверяют, может ли SUT управлять входными данными в определенном диапазоне и выдавать требуемые выходные данные.

#### 3.1.1 Разделение эквивалентности (Equivalence Partitioning)

Разделение на эквивалентность предполагает разделение входной области на набор подмножеств (или классов эквивалентности) на основе заданного критерия или отношения. Этим критерием или соотношением могут быть различные результаты вычислений, соотношение, основанное на потоке управления или данных, или различие, проводимое между допустимыми входными данными, которые принимаются и обрабатываются SUT, и недопустимыми входными данными, такими как значения вне диапазона, которые не принимаются и должны генерировать сообщение об ошибке или инициировать обработка ошибок. Из каждого класса эквивалентности обычно берется репрезентативный набор тестов (иногда содержащий только один тестовый пример).

#### 3.1.2 Анализ граничных значений (Boundary-Value Analysis)

Тестовые примеры выбираются на границах входных значений переменных или вблизи них, исходя из того, что многие ошибки, как правило, концентрируются вблизи экстремальных значений входных данных. Расширением этого метода является тестирование надежности, при котором тестовые примеры также выбираются вне области ввода переменных для проверки надежности программы при обработке неожиданных или ошибочных входных данных.

#### 3.1.3 Тестирование синтаксиса (Syntax Testing)

Методы синтаксического тестирования, также известные как методы, основанные на формальных спецификациях, основаны на спецификациях SUT на формальном языке. (Смотрите формальные методы в разделе <a>Модели и методы разработки программного обеспечения</a>.) Это представление позволяет автоматически создавать функциональные тестовые сценарии и в то же время предоставляет оракул для проверки результатов тестирования.

#### 3.1.4 Комбинаторные методы тестирования (Combinatorial Test Techniques)

Методы комбинаторного тестирования систематически разрабатывают тестовые примеры, которые охватывают конкретные параметры

значения или условия. Согласно , обычно используемыми методами комбинаторного тестирования являются тестирование всех комбинаций, попарное тестирование, тестирование каждого варианта и тестирование базового выбора. Тестирование всех комбинаций фокусируется на всех возможных комбинациях входных данных, в то время как его подмножество, также называемое t-образным тестированием, рассматривает все возможные комбинации из t входных данных. В этом случае выводится более одной пары (т.е. путем включения комбинаций более высокого уровня). Парное тестирование - это специфический метод комбинаторного тестирования, при котором тестовые примеры создаются путем объединения значений каждой пары входных данных. Эти методы также известны как тестирование ортогональной матрицы (OAT).

#### 3.1.5 Таблица решений (Decision Table)

Таблицы решений (или деревья) представляют собой логические взаимосвязи между условиями (грубо говоря, входными данными) и действиями (грубо говоря, выходными данными). Обычно они широко используются для представления знаний (например, в машинном обучении (ML)). Тестовые примеры систематически разрабатываются с учетом всех возможных комбинаций условий и соответствующих им результирующих действий. Схожим методом является построение причинно-следственных графиков. В настоящее время в процессах разработки с левосторонним сдвигом используются такие методы тестирования, поскольку они полезны для документирования результатов тестирования и факторов, которые могут на них повлиять.

#### 3.1.6 Построение графиков причинно-следственных связей (Cause-Effect Graphing)

Методы построения причинно-следственных графиков основаны на логических сетях, которые сопоставляют набор причин с набором следствий путем систематического изучения возможных комбинаций входных условий. Они идентифицируют следствия и связывают их с причинами с помощью модельных графиков. Методы построения графиков причинно-следственных связей используются при тестировании, поскольку они позволяют анализировать спецификации, определять соответствующие входные условия или причины, последующие преобразования и выходные условия.

#### 3.1.7 Тестирование перехода состояния (State Transition Testing)

Методы, основанные на конечных автоматах, направлены на представление SUT с помощью конечного автомата. В этом случае набор тестов создается для охвата состояний и переходов в соответствии с определенным уровнем охвата.

#### 3.1.8 Тестирование на основе сценариев (Scenario-Based Testing)

В данном контексте модель - это абстрактное (формальное) представление SUT или требований к его программному обеспечению. см. <a>Моделирование в программном обеспечении</a>.

Тестирование на основе сценариев используется для подтверждения требований, проверки их согласованности и создания тестовых примеров, ориентированных на поведенческие аспекты SUT. (Смотрите типы моделей в разделе <a>Модели и методы разработки программного обеспечения</a>.) Ключевыми компонентами тестирования на основе сценариев являются обозначения, используемые для представления модели программного обеспечения или его требований, модели рабочего процесса или аналогичные модели, стратегия тестирования или алгоритм, используемые для создания тестовых примеров, вспомогательная инфраструктура для тестирования. выполнение теста и оценка результатов тестирования по сравнению с ожидаемыми результатами. Из-за сложности методов в системах автоматизации тестирования часто используются подходы к тестированию, основанные на сценариях.

При тестировании на основе сценариев также могут использоваться модели рабочих процессов для графического представления последовательности действий, выполняемых людьми и/или программными приложениями. В этом случае каждая последовательность действий составляет один рабочий процесс (также называемый сценарием). Обычно важно обеспечить тестирование как типовых, так и альтернативных рабочих процессов. Например, тестирование бизнес-процессов является частью этого метода, основанного на сценариях. В этом случае особое внимание уделяется ролям в спецификации рабочего процесса.

#### 3.1.9 Выборочное тестирование (Random Testing)

При таком подходе тестовые примеры генерируются исключительно случайным образом. Это тестирование относится к тестированию входной области, поскольку необходимо знать входную область, чтобы иметь возможность выбирать в ней случайные точки. Случайное тестирование обеспечивает относительно простой подход к автоматизации тестирования. Были предложены усовершенствованные формы случайного тестирования (такие как адаптивное случайное тестирование), в которых другие критерии выбора входных данных определяют случайную входную выборку.

В настоящее время, под названием нечеткого тестирования, случайный выбор неверных и неожиданных входных данных широко используется в сфере кибербезопасности для поиска уязвимостей программного обеспечения, ошибок в кодировании и лазеек в системе безопасности. (см. также разделы <a href="#228-тестирование-безопасности-security-testing">2.2.8</a> и <a href="#82-категории-инструментов-categories-of-tools">8.2</a>.)

#### 3.1.10 Основанные на фактических данных (Evidence-Based)

Разработка программного обеспечения на основе фактических данных (EBSE), основанная на тщательном исследовательском подходе, является лучшим решением практической задачи. EBSE включает в себя следующие этапы:

● Выявление доказательств и формулировка вопроса
● Поиск наилучших доказательств для ответа на вопрос
Критический анализ доказательств в свете проблемы, которую они должны помочь решить.
Принципы EBSE также могут быть применены к процессу тестирования. Для этой цели широко используются подходы, позволяющие выявлять и обобщать доказательства, - систематические картографические исследования и систематические обзоры.

#### 3.1.11 Принудительное исключение (Forcing Exception)

Тестовые примеры специально разработаны для проверки того, может ли SUT управлять предопределенным набором исключений/ошибок, таких как исключение данных, исключение операций, исключение переполнения, исключение защиты или исключение недостаточного потока. Методы тестирования обычно фокусируются на негативных тестовых сценариях (т.е. тестовых примерах, которые могут принудительно генерировать сообщения об ошибках).

#### 3.2 Методы тестирования на основе структуры (Structure-Based Test Techniques)

Методы тестирования, основанные на структуре (иногда называемые методами тестирования, основанными на коде), фокусируются на коде и его структуре. Методы тестирования на основе структуры могут выполняться на разных уровнях (например, при разработке кода, проверке кода или модульном тестировании) и могут включать статическое тестирование (например, проверку кода, пошаговое руководство по коду и обзор кода), динамическое тестирование (например, покрытие инструкциями, покрытие ветвями и покрытие путями) или тестирование кода измерение сложности (например, с использованием таких методов, как цикломатическая сложность).

#### 3.2.1.Тестирование потока управления (Control Flow Testing)

Тестирование потока управления охватывает все операторы, ветви, решения, условия перехода, покрытие для принятия решений по измененным условиям (MC/DC), блоки операторов или конкретные комбинации операторов в SUT. Самым строгим критерием, основанным на потоке управления, является тестирование траектории, целью которого является выполнение всех путей потока управления от входа до выхода в графе потока управления SUT. Поскольку полное тестирование путей, как правило, невозможно из-за циклов, другие, менее строгие критерии фокусируются на покрытии путей, которые ограничивают итерации цикла, такие как покрытие инструкций, покрытие ветвей и тестирование условий/решений. Адекватность таких тестов измеряется в процентах; например, если все ветви были выполнены тестами хотя бы один раз, достигается 100%-ный охват ветвей.

#### 3.2.2 Тестирование потока данных (Data Flow Testing)

При тестировании потока данных график потока управления дополняется информацией о том, как определяются, используются и удаляются переменные (не определено). Обычно применяемыми методами тестирования потока данных являются тестирование с использованием всех определений, тестирование с использованием всех C-видов использования и тестирование с использованием всех P-видов использования

Тестирование, тестирование на основе всех видов использования и тестирование на основе всех общих путей. Самым строгим критерием тестирования потока данных является тестирование на основе всех общих путей, при котором должны быть охвачены все пути определения и использования (DU). Это связано с тем, что для каждой переменной требуется выполнить каждый сегмент пути потока управления от определения этой переменной до использования этого определения. Однако для уменьшения количества требуемых путей используются более слабые стратегии, такие как all-definitions и all-uses.

#### 3.2.3 Эталонные модели для методов испытаний на основе структуры (Reference Models for Structure-Based Test
Techniques)

Структура управления SUT, хотя и не является технологией, может быть графически представлена с помощью потокового графика для визуализации методов тестирования, основанных на структуре. Потоковый граф - это ориентированный граф, узлы и дуги которого соответствуют элементам программы. (Смотрите графики и деревья в разделе Математические основы КА.) Например, узлы могут представлять утверждения или непрерывные последовательности утверждений, а дуги могут представлять передачу управления между узлами.

#### 3.3 Методы, основанные на опыте (Experience-Based Techniques)

Выбор наиболее подходящего набора тестов может зависеть от различных факторов, таких как знания человека о тестировании и его контексте, а также его/ее опыт и интуиция. В следующем разделе кратко представлены общепринятые методы, основанные на опыте.

#### 3.3.1 Определение ошибок (Error Guessing)

При выявлении ошибок инженеры-программисты разрабатывают тестовые сценарии специально для того, чтобы предвидеть наиболее вероятные ошибки в каждом из них. Хорошими источниками информации являются история ошибок, обнаруженных в предыдущих проектах, и опыт инженера-программиста.

#### 3.3.2 Исследовательское тестирование (Exploratory Testing)

Исследовательское тестирование определяется как одновременное обучение, разработка теста и его выполнение. Тестовые сценарии не определяются заранее, а динамически разрабатываются, выполняются и модифицируются в соответствии с собранными доказательствами и результатами тестирования, такими как наблюдаемое поведение продукта, особенности SUT, предметной области и окружающей среды, процесс сбоя, типы возможных неисправностей и отказоустойчивости, а также риск, связанный с конкретный продукт. Как правило, интуиция, знания и опыт персонала, ответственного за проведение исследовательского тестирования, могут повлиять на эффективность тестирования. Исследовательское тестирование широко используется.

используется при разработке с левосторонним сдвигом (например, Agile). (См. раздел <a href="#524-контролируемые-эксперименты-и-выполнение-тестов-controlled-experiments-and-test-execution">5.4.2</a>.)

#### 3.3.3 Дальнейшие методы, основанные на опыте (Further Experience-Based Techniques)

На современном этапе практики методы, основанные на опыте, могут включать в себя дополнительные подходы, такие как специальные методы тестирования, методы, основанные на знаниях, и методы, основанные на ОД.

Специальное тестирование - это широко используемый метод, при котором тестовые примеры создаются с опорой на навыки, интуицию и опыт работы с аналогичными программами инженера-программиста. Это может быть полезно для выявления тестовых примеров, которые нелегко создать с помощью более формализованных методов. Типичными методологиями Ad Hoc являются следующие.

- При тестировании на обезьянах запускаются случайно сгенерированные тестовые примеры, что приводит к остановке программы.
- При совместном тестировании тестовые примеры генерируются с использованием знаний о внутренней архитектуре и специальных знаний о тестировании.
- В парном тестировании участвуют два человека. Один генерирует и запускает тестовые примеры, а другой наблюдает и анализирует процесс тестирования. Парное
тестирование позволяет создавать тестовые примеры с широким и лучшим тестовым охватом.
- Геймификация направлена на превращение тестовых заданий в компоненты игрового процесса. С помощью специальных методов (таких как привлечение практиков или
краудсорсинговые задачи комплексного тестирования), геймификация может существенно улучшить практику тестирования программного обеспечения и, следовательно, качество SUT.
- Быстрое тестирование, при котором выбирается и выполняется очень небольшой набор тестов, гарантирует отсутствие сбоев из-за неполной работоспособности компонентов SUT.
- Дымовое тестирование (также известное как проверка сборки
Тестирование) гарантирует, что ядро SUT
функциональные возможности работают должным образом. Это также гарантирует, что SUT будет готов к работе до начала запланированного тестирования. Кроме того, smoke-тестирование предотвращает сбои из-за тестовой среды (например, из-за неправильной сборки артефактов или пакетов). Тестирование дымом также считается частным случаем быстрого тестирования.

Тестирование, основанное на знаниях, и тестирование на основе ML используют (формальные или неформальные) знания о SUT или извлекают их из наблюдений за выполнением SUT для определения его поведенческих моделей (таких как онтологии или таблицы принятия решений) (см. раздел <a href="#361">3.6.1</a>), правил и нефункциональных свойств. Кроме того, тестирование на основе знаний и ML-тестирование определяют потребности в тестировании и определяют цели тестирования, для которых создаются тестовые примеры.

#### 3.4 Методы, основанные на ошибках и мутациях (Fault-Based and Mutation Techniques)

При различной степени формализации методы тестирования, основанные на выявлении неисправностей, разрабатывают тестовые сценарии специально для выявления вероятных или предопределенных категорий неисправностей. Может быть введена модель неисправностей, которая классифицирует различные неисправности, чтобы лучше сфокусировать процесс создания или выбора тестовых сценариев. В этом контексте различные платформы и процессы разработки (например, waterfall, spiral и Agile) рассматривают ортогональную классификацию дефектов (ODC) как действенную методологию сбора семантической информации о различных дефектах и сокращения времени и усилий на анализ первопричин.

Мутационное тестирование изначально задумывалось как метод оценки наборов тестов (см. раздел <a href="#42-оценка-проведенных-испытаний-evaluation-of-the-tests-performed">4.2</a>, Оценка выполненных тестов), в котором мутант представляет собой слегка модифицированную версию SUT (также называемую gold), отличающуюся от нее небольшим синтаксическим изменением. В каждом тестовом примере используется как золотая версия, так и все сгенерированные мутанты. Если в тестовом примере удается выявить разницу между золотой версией и мутантом, то считается, что последняя “убита”. Основное предположение о мутационном тестировании, эффект связи, заключается в том, что более сложные, но реальные ошибки будут обнаружены путем поиска простых синтаксических ошибок. Чтобы методика была эффективной, необходимо автоматически генерировать и систематически выполнять множество мутаций. Тестирование на мутации само по себе также является критерием тестирования. Тестовые случаи генерируются случайным образом до тех пор, пока не будет уничтожено достаточное количество мутантов, или тесты специально разработаны для уничтожения выживших мутантов. В последнем случае мутационное тестирование также можно отнести к категории методов, основанных на структуре. Мутационное тестирование эффективно используется для создания нечеткого тестирования. Более недавним применением процесса мутации является метаморфическое тестирование, метод, который становится все более популярным при решении задач тестирования некоторых систем ML. В этом случае модификации (называемые также morph) применяются к входам, чтобы связь могла соединять предыдущий вход (и его выходные данные) с новым измененным входом (и его выходными данными).

#### 3.5 Методы, основанные на использовании (Usage-Based Techniques)

Методы, основанные на использовании, обычно основаны на модели использования или профилях. В этом случае среда тестирования должна представлять реальную операционную среду, а последовательность выполнения тестового примера должна воспроизводить использование SUT целевой заинтересованной стороной. Статистическая выборка используется для моделирования выполнения множества тестовых примеров. Таким образом, иногда с этими методами также связывают термин "случайное тестирование". Основанное на использовании

Статистическое тестирование чаще применяется на этапе приемочного тестирования.

#### 3.5.1 Операционный профиль (Operational Profile)

Тестирование, основанное на рабочих профилях, направлено на создание тестовых примеров, которые могут оценить надежность SUT или его части. Таким образом, цель состоит в том, чтобы на основе результатов тестирования сделать вывод о будущей надежности программного обеспечения (когда оно будет использоваться). Поскольку установленная надежность строго зависит от эксплуатационного профиля, основная трудность (и стоимость) при использовании этого подхода к тестированию связана с получением эксплуатационного профиля. Следовательно, одним из возможных решений является присвоение входным данным вероятностей или профилей в соответствии с их частотой появления в реальной эксплуатации.

#### 3.5.2 Эвристические методы наблюдения за пользователями (User Observation Heuristics)

Специализированные эвристические методы, также называемые методами проверки удобства использования, применяются для систематического наблюдения за использованием системы в контролируемых условиях, чтобы определить, насколько хорошо люди могут использовать систему и ее интерфейсы. Эвристика юзабилити включает в себя познавательные пошаговые инструкции, анализ утверждений, наблюдения на местах, размышления вслух и даже косвенные подходы, такие как анкетирование пользователей и интервью.

#### 3.6. Методы, основанные на характере приложения (Techniques Based on the Nature of the Application)

Описанные выше методы применимы ко всем видам программного обеспечения. Дополнительные методы разработки и выполнения тестов основаны на характере тестируемого программного обеспечения. Ниже приведены примеры:

- Объектно-ориентированное программное обеспечение
- Программное обеспечение на основе компонентов
- Веб-программное обеспечение
- Параллельные программы
- Программное обеспечение на основе протоколов
- Системы связи
- Системы реального времени
- Системы, критически важные для безопасности
-Сервис-ориентированное программное обеспечение
- Программное обеспечение с открытым исходным кодом
- Встроенное программное обеспечение
- Облачное программное обеспечение
- Программное обеспечение на основе блокчейна
- Программное обеспечение на основе больших данных
- Программное обеспечение на основе искусственного интеллекта/ML/DL
- Мобильные приложения
- Программное обеспечение для обеспечения безопасности и конфиденциальности

В некоторых случаях стандарты, такие как ISO/IEC/IEEE 29119, предоставляют примеры и поддержку для определения тестовых случаев, автоматизации их выполнения и сопровождения наборов тестов, например, в случае тестирования на основе ключевых слов.

#### 3.7 Выбор и комбинирование методов (Selecting and Combining Techniques)

Сочетание различных методов тестирования всегда было надежным средством обеспечения требуемого уровня качества SUT. В настоящее время, особенно при разработке систем с левосторонним сдвигом, методологии адаптивного сочетания методов тестирования являются частью современной практики. Цель состоит в том, чтобы повысить эффективность процессов тестирования путем изучения накопленного опыта и, в то же время, адаптации выбранной методики к текущему сеансу тестирования.

#### 3.7.1 Сочетание функционального и структурного (Combining Functional and Structural)

Методы тестирования, основанные на сценариях и структуре, часто сравнивают с функциональным и структурным тестированием. В настоящее время эти два подхода к выбору тестовых примеров рассматриваются как взаимодополняющие, поскольку они используют разные источники информации и, как было показано, выявляют разные проблемы. В зависимости от различных организационных ограничений, таких как бюджетные соображения, они могут быть объединены.

#### 3.7.2 Детерминированные и альтернативные методы (Deterministic vs. Random)

Тестовые примеры могут быть выбраны детерминированным образом, в соответствии со многими методами, или случайным образом из некоторого распределения входных данных, как это обычно делается при тестировании надежности. Было проведено несколько аналитических и эмпирических сравнений для анализа условий, которые делают один подход более эффективным, чем другой.

#### 3.8 Методы, основанные на полученных знаниях (Techniques Based on Derived Knowledge)

Методы тестирования могут интегрировать фактические данные и знания из различных областей исследований и контекстов. Для этого используются подходы и методологии, поддерживающие процесс тестирования и повышающие его эффективность. В настоящее время инновационные подходы включают использование цифровых двойников или методологий и фреймворков моделирования, использование средств ML и геймификации, а также использование (имитируемых) нейронных сетей.

### 4. Показатели, связанные с тестированием (Test-Related Measures)

Методы тестирования подобны инструментам, которые помогают в достижении конкретных целей тестирования. Для оценки того, достигнута ли цель тестирования, используются четко определенные показатели.

необходимый. Измерение обычно считается основополагающим для анализа качества. Измерение также может использоваться для оптимизации планирования и выполнения тестирования. Управление тестированием может использовать несколько различных технологических показателей для мониторинга прогресса. (Информацию о программах измерения смотрите в разделе "Измерение в программной инженерии" в разделе "Управление программной инженерией". Информацию о измерениях смотрите в разделе <a>"Измерение программного обеспечения в процессе разработки программного обеспечения"</a>.)

Согласно определению в, методы тестирования могут быть классифицированы в зависимости от степени охвата, которую они могут обеспечить. Охват может варьироваться от 0% до 100%, исключая возможные невыполнимые тесты (т.е. тесты, которые невозможно выполнить). Таким образом, для каждого метода тестирования, основанного на спецификации, структуре и опыте, должны быть определены соответствующие показатели охвата и процедура оценки этого охвата. Примерами показателей охвата могут служить процентное соотношение охватываемых филиалов на графике выполнения программы или процентное соотношение выполняемых функциональных требований к тем, которые указаны в документе со спецификациями.

Важно учитывать, что средства мониторинга могут динамически вычислять соотношение между охватываемыми элементами, а также учитывать общее количество. Кроме того, особенно в случае методов тестирования, основанных на структуре, также может потребоваться соответствующее оборудование для SUT.

Однако предлагаемый набор тестовых мероприятий также может быть классифицирован с разных точек зрения — с точки зрения тех, которые обеспечивают и позволяют оценить SUT на основе наблюдаемых результатов тестирования, и с точки зрения тех, которые оценивают тщательность или эффективность выполненных наборов тестов.

#### 4.1 Оценка SUT (Evaluation of the SUT)

Как правило, показатели (т.е. измеримая информация) могут использоваться для определения того, работает ли SUT так, как ожидалось, и достигает ли он ожидаемых результатов. Показатели, которые иногда называют ключевыми показателями эффективности (КПЭ), тесно связаны с принятыми оценочными мерами, методами, анализом данных и отчетностью.

#### 4.1.1 Измерения, которые помогают в планировании и разработке тестов (SUT Measurements That Aid in Planning and Designing Tests)

Все меры по тестированию, предложенные в, могут быть использованы для планирования и руководства действиями по тестированию. Кроме того, в процессе разработки shift-left,

для планирования мероприятий по тестированию и управления их результатами также обычно используются конкретные показатели, такие как частота развертывания, время выполнения заказа, среднее время восстановления (MTTR) и частота отказов при изменении.

#### 4.1.2 Типы неисправностей, классификация и статистика (Fault Types, Classification and Statistics)

Литература по тестированию богата классификациями и таксономиями ошибок, которые могут быть общими или специфичными для контекста или атрибутов качества (например, классификация дефектов удобства использования, таксономия уязвимостей и атак в области безопасности и конфиденциальности HW/SW, а также классификация рисков кибербезопасности). Чтобы сделать тестирование более эффективным, важно знать, какие типы неисправностей могут быть обнаружены в SUT, и относительную частоту, с которой эти неисправности возникали в прошлом. Эта информация может быть полезна для прогнозирования качества и улучшения процесса (см. Описание в разделе <a>"Оценка качества программного обеспечения"</a>).

#### 4.1.3 Плотность отказов (Fault Density)

Традиционно SUT может быть оценен путем подсчета обнаруженных неисправностей как соотношения между количеством обнаруженных неисправностей и размером SUT. Из-за определения неисправностей на основе семантики могут учитываться дополнительные параметры, такие как глубина неисправности (минимальное количество устранений неисправностей, необходимое для корректного определения SUT) и множественность неисправностей (количество атомарных изменений, необходимых для устранения одной неисправности).

##### 4.1.4 Испытание на долговечность, оценка надежности (Life Test, Reliability Evaluation)

Статистическая оценка надежности программного обеспечения, которая может быть получена путем наблюдения за достигнутой надежностью, может быть использована для оценки SUT и принятия решения о том, можно ли прекратить тестирование или SUT достаточно созрел, чтобы быть кандидатом для следующего выпуска разработки с левосторонним сдвигом. Оценка надежности играет ключевую роль в условиях облачности (и тумана).

С одной стороны, предложения по валидации и верификации направлены на поддержание высокого уровня надежности и доступности, требуемого облачными сервисами (fog). С другой стороны, при тестировании используются вычислительные мощности облачной среды (fog) для ускорения оценки надежности и существенного снижения затрат на нее.

#### 4.1.5 Модели повышения надежности (Reliability Growth Models)

Модели повышения надежности предсказывают надежность на основе наблюдаемых отказов. В целом они предполагают, что после устранения неисправностей, вызвавших наблюдаемые отказы (хотя некоторые модели также допускают неполные исправления), надежность продукта повысится. Существует множество опубликованных моделей повышения надежности. Примечательно, что эти модели делятся на модели с количеством отказов и модели с наработкой на отказ.

#### 4.2 Оценка проведенных испытаний (Evaluation of the Tests Performed)

Поведение SUT обычно проверяется путем выполнения наборов тестов, которые играют ключевую роль в поиске дефектов. Таким образом, как с точки зрения исследователей, так и практиков, фундаментальной частью тестирования программного обеспечения является сравнение наборов тестов. Обычно оценка наборов тестов подразумевает сравнение методов генерации тестовых наборов, которые создают тестовые наборы. Для этой цели используются различные критерии, такие как критерии покрытия или критерии анализа мутаций.

#### 4.2.1 Внедрение ошибок (Fault Injection)

При внедрении ошибок некоторые ошибки искусственно вводятся в SUT перед тестированием. При выполнении набора тестов выявляются некоторые из этих внедренных ошибок, а также, возможно, некоторые ошибки, которые уже были обнаружены. Теоретически, в зависимости от того, какие и сколько искусственных неисправностей обнаружены, можно оценить эффективность тестирования и оставшееся количество подлинных неисправностей. На практике статистики ставят под сомнение распределение и репрезентативность введенных неисправностей по сравнению с подлинными неисправностями, а также небольшой размер выборки, на которой основаны любые экстраполяции. Некоторые также утверждают, что этот метод следует использовать с большой осторожностью, поскольку внесение ошибок в SUT сопряжено с очевидным риском их сохранения.

#### 4.2.2 Оценка мутаций (Mutation Score)

При тестировании на мутации показатель эффективности набора тестов рассчитывается как отношение числа уничтоженных мутантов к числу сгенерированных мутантов. Чем выше значение эффективности набора тестов, тем лучше, поскольку оно указывает на более высокую способность обнаруживать наиболее реальные внедренные ошибки.

#### 4.2.3 Сравнение и сравнительная эффективность различных методик (Comparison and Relative Effectiveness of Different Techniques)

Сравнительная эффективность сравнивает различные методы тестирования с определенными характеристиками, такими как количество тестов, необходимых для обнаружения первого сбоя, отношение

количества неисправностей, обнаруженных в ходе тестирования, ко всем неисправностям, обнаруженным во время и после тестирования, и степень повышения надежности. Уже было проведено несколько исследований для аналитического и эмпирического сравнения различных методов в соответствии с каждым определенным понятием свойства (или эффективности).

### 5 Процесс тестирования (Test Process)

Концепции, стратегии, методы и меры тестирования должны быть интегрированы в определенный и контролируемый процесс планирования тестирования для оценки результатов тестирования. Процесс тестирования поддерживает тестирование и предоставляет рекомендации лицам, ответственным за различные виды тестирования, для обеспечения эффективного выполнения задач тестирования с точки зрения затрат.

Как описано в, процесс тестирования - это многоуровневый процесс, который включает в себя спецификацию теста на организационном, управленческом и динамическом уровнях. Организационный процесс тестирования определяет этапы создания и поддержки спецификаций тестирования, таких как политики, стратегии, процессы, процедуры и другие ресурсы тестирования организации.

Процесс управления тестированием определяет этапы, необходимые для управления: планирование, мониторинг и контроль, а также завершение.

Наконец, процесс динамического тестирования определяет этапы проектирования и внедрения, настройки и обслуживания среды, выполнения и составления отчетов об инцидентах тестирования.

В оставшейся части этого раздела приведены некоторые практические соображения о спецификации, управлении и выполнении процесса тестирования, а также краткое описание подпроцессов тестирования и действий, включенных в организационный, управленческий и динамический уровни.

#### 5.1 Практические соображения (Practical Considerations)

Процессы тестирования должны позволять автоматизировать различные этапы тестирования и должны основываться на управляемости, отслеживаемости, воспроизводимости и оценке рисков/затрат, связанных с выполненными действиями. В оставшейся части этого раздела описаны часто используемые этапы тестирования, совместимые со всеми моделями жизненного цикла и применимые ко всем ним. (Смотрите раздел "Жизненные циклы программного обеспечения" в разделе "Процесс разработки программного обеспечения")

#### 5.1.1 Программирование без учета установок/эгоизма (Attitudes/Egoless Programming)

Важным элементом успешного тестирования является совместный подход к тестированию и обеспечению качества (QA). Менеджеры играют ключевую роль в создании благоприятного отношения к обнаружению и исправлению сбоев при разработке и обслуживании программного обеспечения. Например, в процессах разработки со сдвигом влево, таких как Agile, коммуникация и сотрудничество между тестировщиками и разработчиками считаются жизненно важными для достижения успешных результатов тестирования.

#### 5.1.2 Руководства по тестированию и организационный процесс  (Test Guides and Organizational Process)

Этапы тестирования могут быть ориентированы на достижение различных целей. Например, тестирование на основе рисков использует риски продукта для определения приоритетов и направленности стратегии тестирования, а тестирование на основе сценариев определяет тестовые случаи на основе определенных сценариев программного обеспечения и списков невыполненных работ. Обычно организация процесса тестирования включает в себя определение политик тестирования (т.е. определение цели, задач и общего объема тестирования) и стратегий тестирования (т.е. определение рекомендаций о том, как будет проводиться тестирование). Например, при разработке с левосторонним сдвигом стратегия тестирования должна включать, по крайней мере, следующие данные: цели (например, определенные с помощью пользовательских историй), задачи (например, набор тестов), область применения (SUT), а также среду и методы (например, как и где запущен набор тестов).

#### 5.1.3 Управление тестированием и процессы динамического тестирования (Test Management and Dynamic Test Processes)

Тестовые мероприятия, проводимые на различных уровнях (см. раздел <a href="#2-уровни-тестирования-test-levels">2 "Уровни тестирования"</a>), должны быть организованы — с привлечением людей, инструментов, политик и мер — в виде четко определенного процесса, являющегося неотъемлемой частью жизненного цикла. Управление процессом тестирования включает в себя различные подпроцессы, такие как планирование, мониторинг, контроль и завершение, в то время как процесс динамического тестирования включает в себя разработку и внедрение тестов, настройку и обслуживание тестовой среды, выполнение тестов и создание отчетов о тестовых инцидентах.

#### 5.1.4 Документация по тестированию (Test Documentation)

Согласно, документация является неотъемлемой частью формализации процесса тестирования. Тестовые документы можно разделить на три иерархические категории: документация по организационному тестированию, документация по управлению тестированием и документация по динамическому тестированию. Документация по организационному тестированию содержит информацию, необходимую для документирования политики тестирования и стратегий тестирования организации. Документация по управлению тестированием включает план тестирования, отчет о состоянии тестирования и отчет о завершении тестирования. Окончательно,

документация по динамическому тестированию включает в себя следующие документы: спецификацию теста (спецификацию дизайна теста, спецификацию тестового примера и спецификацию процедуры тестирования), требования к тестовым данным, требования к среде тестирования, отчет о готовности тестовых данных, отчет о готовности тестовой среды и документацию по выполнению теста (например, фактические результаты, результаты тестирования, журнал выполнения теста и инциденты отчет).
Документация по тестированию должна создаваться и постоянно обновляться с таким же качеством, как и другая документация по разработке программного обеспечения. Документация по тестированию также должна находиться под контролем службы управления конфигурацией программного обеспечения. (см. раздел <a>"Управление конфигурацией программного обеспечения"</a>)

#### 5.1.5 Команда тестирования (Test Team)

Формализация процесса тестирования может также включать в себя формализацию организации команды тестирования. При принятии решения необходимо учитывать стоимость, график, уровень зрелости участвующих организаций и критичность приложения. Команда тестирования может состоять из участников, вовлеченных (или не вовлеченных) в разработку SUT (т.е. имеющих или не имеющих объективную, независимую точку зрения), или внутреннего (или внешнего) персонала. В настоящее время при разработке с левосторонним сдвигом не существует четкого различия между членами команды тестирования, поскольку набор тестов определяется и обновляется в соответствии с разработанным и переданным кодом SUT.

#### 5.1.6 Показатели процесса тестирования (Test Process Measures)

Менеджеры используют несколько методов оценки ресурсов, затрачиваемых на тестирование, а также относительной эффективности поиска неисправностей на различных этапах тестирования, для контроля и улучшения процесса тестирования, а также для предоставления информации для управления рисками процесса. Следовательно, при мониторинге и контроле тестирования должны быть определены требуемые данные и информация и указано, как их получить. Тестовые показатели могут включать, помимо прочего, количество заданных, выполненных, пройденных и не пройденных тестов. Эти показатели также могут быть объединены с конкретными показателями процесса, такими как остаточный риск, совокупные открытые и закрытые дефекты, ход тестирования и процент обнаружения дефектов. Оценка отчетов о фазах тестирования может быть объединена с анализом первопричин, чтобы оценить эффективность процесса тестирования в выявлении неисправностей на максимально ранней стадии. Такая оценка может быть связана с анализом рисков. Кроме того, ресурсы, которые, как считается, стоит потратить на тестирование, должны быть соизмеримы с использованием приложения и его критичностью. Разные методы имеют разную стоимость и обеспечивают различные уровни уверенности в надежности продукта.

#### 5.1.7 Мониторинг и управление тестированием (Test Monitoring and Control)

Мониторинг и управление представляют собой важный подпроцесс процесса управления тестированием, как описано в, полезный для сбора данных и информации, необходимых при управлении тестированием и его оценке. Как правило, мониторинг и контрольные мероприятия выполняются параллельно с выполнением тестирования, и иногда собранные данные могут привести к пересмотру общего планирования процесса. Мониторинг гарантирует, что действия в процессе тестирования соответствуют конкретному плану тестирования, что позволяет отслеживать соответствие требованиям и снижать выявленные риски. Во время мониторинга и контроля тестирования может регулярно составляться специальная документация (отчеты о тестировании), которая помогает оценить и задокументировать тестовую активность.

#### 5.1.8 Завершение тестирования (Test Completion)

Необходимо принять решение о том, какого объема тестирования достаточно и когда этап тестирования может быть завершен. Таким образом, цель завершения тестирования, являющегося подпроцессом процесса управления тестированием, описанного в , состоит в том, чтобы обеспечить выполнение и проверку требований к тестированию, составление отчетов о тестировании и доведение результатов тестирования до соответствующих заинтересованных сторон. Показатели тщательности, такие как достигнутое покрытие кода или функциональное покрытие, а также оценки плотности отказов или эксплуатационной надежности, обеспечивают полезную поддержку, но сами по себе недостаточны. Решение также включает в себя соображения о затратах и рисках, связанных с возможными оставшимися сбоями, в отличие от затрат, связанных с продолжением тестирования (см. Критерии отбора тестов и их адекватности в разделе <a href="#12-ключевые-вопросы-key-issues">1.2, Ключевые вопросы</a>). Что касается других действий, на этом этапе разрабатывается специальная документация (например, отчет о завершении тестирования), которая доводится до сведения соответствующих заинтересованных сторон.

#### 5.1.9 Возможность повторного использования теста (Test Reusability)

Необходимо увеличить сложность и время планирования и проектирования тестирования, чтобы обеспечить возможность повторного использования артефактов тестирования, таких как тестовый набор или среда выполнения, что желательно, когда разработка тестов является дорогостоящей, трудоемкой и сложной.

Возможность повторного использования тестов собирает и классифицирует знания о тестировании (тестовые примеры и результаты тестирования), чтобы сделать эту информацию доступной для поиска и использования при создании новых тестов или повторном выполнении существующих. Подходящий

хранилища, основанные на знаниях, должны быть сконфигурированы и управляться для тестирования возможности повторного использования, чтобы изменения в требованиях к программному обеспечению или дизайне могли быть отражены в изменениях тестов.

В настоящее время возможность повторного использования тестовых примеров имеет решающее значение при разработке функциональных возможностей или линейки продуктов и регрессионном тестировании. Возможность повторного использования тестов также связана с удобством обслуживания, поскольку возможность повторного использования может снизить затраты и усилия, а также повысить эффективность теста.

#### 5.2 Подпроцессы и действия тестирования (Test Sub-Processes and Activities)

В оставшейся части этого раздела кратко описаны основные действия и подпроцессы тестирования.

#### 5.2.1 Процесс планирования тестирования (Test Planning Process)

Как и все другие аспекты управления проектами, мероприятия по тестированию должны быть спланированы. Согласно, ключевые аспекты планирования тестирования включают в себя определение и координацию персонала, определение цели тестирования и критериев его завершения, определение средств тестирования и оборудования, создание и ведение всей документации, связанной с тестированием, а также планирование рисков и управление ими в случае возможных нежелательных результатов. Эти мероприятия могут быть организованы на трех различных уровнях: (1) управление процессом (т.е. определение политики, стратегий, процессов и процедур тестирования), (2) организационное управление (т.е. определение этапа тестирования, типа теста и цели тестирования) и (3) разработка и внедрение (т.е. определение тестовой среды, процесс выполнения теста и мониторинг, процесс завершения и отчетность).

#### 5.2.2 Разработка и внедрение тестов (Test Design and Implementation)

Генерация тестовых наборов основана на уровне выполняемого тестирования и выбранных методах тестирования. В соответствии с процессом динамического тестирования, предварительными условиями генерации тестовых наборов являются определение целей тестирования и выбор соответствующих методов тестирования/демонстрации. Создание тестов сосредоточено на внедрении и выполнении тестовых наборов. Часто это связано с инструментарием (т.е. с использованием специального программного обеспечения, также называемого генератором тестовых наборов). Это программное обеспечение принимает исходные данные (такие как исходный код, критерии тестирования, спецификации или определения структуры данных) и использует их для создания наборов тестов. Иногда генератор тестовых примеров может определить ожидаемые результаты, используя специальные средства Oracle. Это способствует полной автоматизации всего процесса тестирования.

#### 5.2.3 Настройка и обслуживание тестовой среды (Test Environment Set-up and Maintenance)

В соответствии с процессом динамического тестирования, описанным в, разработка и настройка среды тестирования включают определение инфраструктуры тестирования. Это включает в себя выбор или разработку средств, аппаратного обеспечения, программного обеспечения с прошивкой и процедур для проведения тестирования. Среду тестирования можно моделировать, контролировать и использовать in vitro или in vivo. Разработка среды тестирования также включает в себя создание средств мониторинга и ведения журнала, которые могут быть полезны для документирования действий по тестированию и оценки полученных результатов. Среда тестирования должна быть совместима с другими используемыми инструментами разработки программного обеспечения.

#### 5.2.4 Контролируемые эксперименты и выполнение тестов (Controlled Experiments and Test Execution)

Выполнение тестов должно соответствовать основному принципу научного контролируемого эксперимента — все, что делается во время тестирования, должно быть выполнено и задокументировано достаточно конкретно и четко, чтобы другой человек мог воспроизвести результаты. Следовательно, тестирование должно проводиться в соответствии с документированными процедурами с использованием четко определенной версии SUT. Особенно во время приемочного тестирования, также могут быть проведены контролируемые эксперименты, такие как A/B тестирование, для статистической оценки предпочтений пользователей между различными версиями SUT.

#### 5.2.5 Отчеты об инцидентах при тестировании (Test Incident Reporting)

В соответствии с процессом динамического тестирования, описанным в, инциденты при тестировании и отчетность о них основаны на четко определенном процессе сбора тестовых данных (т.е. на определении того, когда проводился тест, кто проводил тест, какая конфигурация программного обеспечения использовалась и другая соответствующая идентификационная информация). Этот процесс и собранные доказательства могут быть использованы в целях отчетности. Для составления отчетов о тестировании могут использоваться подходящие системы аудита, позволяющие выявлять неожиданные или неверные результаты тестирования и заносить их в систему отчетности о проблемах. Эти данные формируют основу для последующей отладки и устранения проблем, которые были обнаружены как сбои во время тестирования. Кроме того, аномалии, не классифицированные как сбои, могут быть задокументированы, если впоследствии они окажутся более серьезными, чем предполагалось на первый взгляд. Отчеты о тестировании также являются исходными данными для процесса запроса на управление изменениями. (Смотрите раздел Управление конфигурацией программного обеспечения в разделе Управление конфигурацией программного обеспечения.)
Следовательно, процесс составления отчетов о тестовых инцидентах фокусируется на выявлении инцидентов, связанных с соответствующими заинтересованными сторонами, которые могут быть использованы для определения того, какие аспекты тестирования программного обеспечения и другие процессы нуждаются в улучшении и насколько эффективными были предыдущие подходы.

При составлении отчетов об инцидентах также анализируются результаты тестирования, чтобы определить, было ли тестирование успешным. В большинстве случаев “успешно” означает, что программное обеспечение работало так, как ожидалось, и не привело к каким-либо серьезным неожиданным результатам. Не все неожиданные результаты обязательно являются ошибками; иногда они определяются как простой шум. Прежде чем устранить неисправность, необходимо провести анализ и отладку, чтобы выделить, идентифицировать и описать ее. Когда результаты тестирования особенно важны, для их оценки может быть созвана официальная комиссия по проверке.

#### 5.3 Штатное расписание (Staffing)

Согласно, подбор персонала включает в себя определение ролей, видов деятельности и обязанностей, определение потребностей в найме и обучении. Подбор персонала влияет на риски проекта, поскольку опыт команды может подорвать способность выявлять ошибки, реагировать на меняющиеся требования, соблюдать сроки и увеличивать/сокращать затраты на техническое обслуживание.

Определение ролей, видов деятельности и обязанностей устанавливает следующие роли и обязанности: руководитель деятельности и вспомогательный персонал, роли, связанные с тестированием, и соответствующие им обязанности, а также лицо, ответственное за предоставление тестовых заданий.

В зависимости от принятого жизненного цикла разработки типичные роли в тестировании включают, помимо прочего, scrum-мастера/руководителя тестирования, аналитика по контролю качества/тестированию, разработчика тестов, инженера и консультанта по безопасности/производительности тестирования, эксперта по среде тестирования, исполнителя тестирования и консультанта по автоматизации тестирования или архитектора.

Потребности в найме требуют определения конкретных требований, в соответствии с которыми для завершения процесса тестирования требуется дополнительный персонал по тестированию (а также того, когда требуется этот персонал и желаемые навыки). В зависимости от потребностей бизнеса подбор персонала может осуществляться в различных формах: от внутренних переводов до привлечения внешних специалистов или даже консультантов и/или аутсорсинговых ресурсов.

Наконец, спецификация потребностей в обучении включает в себя определение требуемого уровня квалификации. Она также включает в себя описание учебных мероприятий (таких как обучение в аудитории, самостоятельное обучение, компьютерное обучение или наставничество), которые необходимы для приобретения необходимых навыков отобранным сотрудникам.

#### 6 Тестирование программного обеспечения в процессах разработки и областях применения (Software Testing in the Development Processes and the Application Domains)

Независимо от того, как осуществляется процесс разработки, тестирование остается фундаментальной деятельностью. Однако в некоторых случаях могут использоваться специальные действия по тестированию или терминология, например, принятый жизненный цикл разработки и/или предметная область приложения

#### 6.1 Тестирование в рамках процессов разработки программного обеспечения (Testing Inside Software Development Processes)

В оставшейся части этого раздела рассматриваются особенности тестирования в различных процессах разработки.

#### 6.1.1 Тестирование в традиционных процессах (Testing in Traditional Processes)

Существует множество традиционных процессов, основанных в основном на принципах разработки SUT, которые могут быть внедрены в организации. Последовательные, V-образные, спиральные модели и итеративный подход - это лишь некоторые из широко используемых процессов. (раздел <a>"Жизненные циклы программного обеспечения в процессе разработки программного обеспечения"</a> содержат подробное описание каждого из них.) Однако во всех этих процессах тестирование является лишь одним из запланированных действий; иногда это выполняется в конце процесса, что сопряжено со значительным риском сбоя разработки SUT в случае отклонения от потребностей конечного пользователя или проблем с оценкой. В последние годы для оценки и контроля общего качества SUT были разработаны такие инициативы, как интеграция модели зрелости тестирования (TMMi) и совершенствование программного процесса (SPI). В результате для этой цели были обновлены или усовершенствованы различные существующие платформы, такие как улучшение процессов разработки программного обеспечения и определение возможностей (SPICE), интеграция моделей зрелости возможностей (CMMI) и Rational Unified Process (RUP).

Например, CMMI - одна из самых популярных моделей, на которую ссылаются; она может помочь ключевым участникам SUT получить контроль над процессами разработки и сопровождения. По сути, это четко определенный набор передовых методов тестирования программного обеспечения, который улучшает качество SUT за счет повышения удовлетворенности клиентов.

Модель RUP, представленная в начале 2000-х годов, можно рассматривать как предшественницу движения "сдвига влево". RUP поощряет тестирование на ранней стадии, предлагая несколько механизмов для более тесной интеграции тестирования с процессом разработки программного обеспечения, превращая тестирование в отдельную дисциплину. Кроме того, RUP продвигает итеративный подход к разработке для непрерывного контроля качества. Это также позволяет учитывать варианты использования и риски при разработке SUT и управлять стратегическими изменениями. Действительно, RUP группирует приращения и итерации SUT в четыре этапа: запуск, разработка, конструирование и переход.


В настоящее время RUP можно считать как итеративным, так и гибко—итеративным, поскольку все основные действия повторяются на протяжении всего проекта разработки SUT, и гибким, поскольку определенные этапы выбранного жизненного цикла могут повторяться до тех пор, пока SUT не будет соответствовать требованиям (как функциональным, так и нефункциональным), достигая определенного уровня, который не гарантирует целевое качество.

#### 6.1.2 Тестирование в режиме сдвига влево (Testing in Line with Left-Shift Movement)

Движение за тестирование с левосторонним сдвигом способствует внедрению тестирования на ранних стадиях разработки программного обеспечения для выявления и устранения ошибок как можно раньше, что повышает общее качество тестирования и снижает затраты и риски, связанные с тестированием. В настоящее время различные жизненные циклы разработки, такие как Agile, DevOps и TDD, относятся к левостороннему движению. (см. раздел Методы Agile в процессе <a href="/4_Software Construction.markdown">разработки программного обеспечения</a>.)

При разработке на основе левостороннего движения следует учитывать различные аспекты тестирования:
A. Качество внутреннего кода: регрессия, расстановка приоритетов, безопасность и конфиденциальность могут быть основными целями обеспечения качества внутреннего кода (<a href="#22-цели-тестирования-acceptance-testing">раздел 2.2</a>). Обычно целевыми уровнями являются модульное тестирование и интеграционное тестирование (<a href="#21-цель-тестирования-the-target-of-the-test">раздел 2.1</a>), в то время как основным методом тестирования является структурное тестирование (<a href="#32-методы-тестирования-на-основе-структуры-structure-based-test-techniques">раздел 3.2</a>).

B. Потребности бизнеса: Соответствие требованиям, удобство использования, безопасность и конфиденциальность - это лишь часть возможных целей аспекта бизнес-потребностей (<a href="#22-цели-тестирования-acceptance-testing">раздел 2.2</a>). Что касается этого аспекта, то тестирование в большей степени сосредоточено на уровнях системного и приемочного тестирования, а также на ожиданиях конечного пользователя, а также на методах, основанных на использовании (<a href="#35-методы-основанные-на-использовании-usage-based-techniques">раздел 3.5</a>) и сценариях (<a href="#318-тестирование-на-основе-сценариев-scenario-based-testing">раздел 3.1.8</a>).
C.Воспринимаемое качество: Альфа-версия, бета-версия, установка, удобство использования, безопасность и конфиденциальность могут быть основными целями внутреннего воспринимаемого качества (<a href="#22-цели-тестирования-acceptance-testing">раздел 2.2</a>). Воспринимаемое качество обычно зависит от уровня приемочного тестирования и достигается применением методов, основанных на интуиции и опыте разработчиков программного обеспечения (<a href="#33-методы-основанные-на-опыте-experience-based-techniques">раздел 3.3</a>), а также методов, основанных на использовании и выявлении ошибок, таких как мутационное тестирование (раздел 3.4).
D.Обеспечение качества: Соответствие эксплуатационных характеристик, безопасности и конфиденциальности - вот некоторые из основных целей обеспечения качества (<a href="#22-цели-тестирования-acceptance-testing">раздел 2.2</a>). Этот аспект может включать в себя все уровни тестирования и выбор тестируемого техника выполнения зависит от поставленной цели и выбранного уровня.

Здесь приведены некоторые примеры тестирования в рамках различных реализаций с левосторонним перемещением:

- При разработке гибких процессов в тестировании участвуют все заинтересованные стороны (например, клиенты и персонал команды), и оно направлено на выявление
где можно было бы улучшить взаимодействие в будущем. Управление риском возникновения дефектов регрессии, соответствие изменяющимся требованиям и управление их влиянием на артефакты тестирования также являются целями процесса гибкого тестирования. Как правило, автоматизация тестирования используется для управления риском регрессии, а поисковое тестирование может использоваться для устранения недостатка подробных требований.
- В TDD тестовые примеры в основном нацелены на спецификации требований к программному обеспечению и их принятие, а
они создаются до написания кода. Тесты основаны на рассказах пользователей и реализуются с использованием автоматизированных инструментов тестирования компонентов. Действительно, TDD - это практика, которая требует определения и поддержки модульных тестов и может помочь уточнить потребности пользователей и спецификации требований к программному обеспечению.
- При тестировании автоматизированных сборок и непрерывной интеграции (например, DevOps) SUT используется
постоянно разрабатывается, интегрируется, поставляется и контролируется. В рамках этого процесса постоянно проводится регрессионное тестирование для своевременного выявления и исправления проблем с разработкой и интеграцией. Кроме того, во время непрерывной интеграции обычно используются методы быстрого тестирования, такие как дымовое тестирование, чтобы гарантировать, что SUT можно протестировать до того, как он будет запущен в эксплуатацию.

#### 6.2 Тестирование в прикладных областях (Testing in the Application Domains)

Обычно прикладная область строго привязана к определенной реальности. Поэтому подходы к тестированию могут быть адаптированы к потребностям предметной области и принятым технологиям.
Ниже мы приводим обзор различных аспектов и решений для тестирования программного обеспечения, применяемых в различных предметно-ориентированных средах:

- Тестирование в автомобильной области: Из-за сложности автомобильных систем это тестирование затрагивает аспекты практически каждого программного обеспечения
компонент и его взаимодействие с аппаратным обеспечением. Тестирование безопасности, имитационное тестирование, тестирование надежности/жизненного цикла, интегрированные системы тестирование, сбор данных и анализ сигналов, тестирование качества и инспекция, а также тестирование на напряжение/деформацию - это лишь некоторые из различных тестов, выполняемых в этой области. В настоящее время доступно несколько вспомогательных стандартов для руководства и организации тестирования автомобилей в соответствии с особенностями, компонентами или аспектами качества, которые должны быть оценены. Примерами могут служить Autosar2 и Automotive SPICE3.
- Тестирование предметной области Интернета вещей (IoT): Это тестирование включает в себя разработку приложений, управление устройствами, управление системами, управление неоднородностями
, управление данными, а также инструменты для анализа, развертывания, мониторинга, визуализации и исследований. Кроме того, при оценке качества следует учитывать безопасность, конфиденциальность, коммуникации и взаимодействие пользователя с компонентами. Например, рекомендации и конкретные наборы тестов на соответствие для оценки кибербезопасности IoT SUT подробно описаны в стандартах Европейского института телекоммуникационных стандартов (ETSI).4
- Тестирование юридического домена: Одним из наиболее важных аспектов в юридическом домене является управление пользователями с высокой степенью конфиденциальности; следовательно, безопасность, конфиденциальность
наиболее распространенными направлениями тестирования являются обеспечение доверия. Кроме того, из-за большого объема собранных данных и обмена ими, необходимо также провести тестирование производительности хранилища данных, тестирование для обеспечения точной коммуникации и интеграции, а также тестирование согласованности и соответствия требованиям. Наконец, поскольку юридическая сфера характеризуется специфической терминологией и жаргоном, привлечение экспертов в области права к разработке тестовых примеров является обычной практикой, позволяющей сосредоточить внимание на желаемых характеристиках и качестве.
- Тестирование мобильной области: это тестирование обычно проводится для оценки удобства использования, функциональности, конфигурации и согласованности.
В ходе тестирования также следует учитывать такие аспекты, связанные с мобильными устройствами, как разрешение экрана, глобальная система позиционирования (GPS), операционные системы и производители устройств. Наконец, необходимо протестировать тип мобильных приложений (нативные или веб-приложения) и их взаимодействие. Например, Группа W3C по веб- и мобильным приложениям5 предоставляет средства, рекомендации и специальные наборы тестов полезные для разработки и тестирования веб-контента, приложений и сервисов.

- Тестирование в области авионики6: Как правило, системы авионики включают в себя несколько независимых или слабо связанных друг с другом систем.
сопряженные компоненты и готовые коммерческие продукты. Это требует, чтобы тестирование включало в себя самые общие процессы и подходы, применимые как на системном, так и на технологическом уровнях. Примерами возможных подходов являются функциональные и нефункциональные тесты, тестирование интеграции, коммуникационные операции, стрессоустойчивость, тестирование безопасности. Как и в других областях, для справки можно использовать вспомогательные стандарты, такие как стандарты Aeronautical Radio Incorporated (ARINC) и ASTM F3153-15.
- Тестирование в области здравоохранения: Тестирование в области здравоохранения должно обеспечивать качество в таких областях, как
безопасный и надежный обмен данными, стабильная производительность, конфиденциальность и безопасность. Совместимость, удобство использования, производительность и соответствие отраслевым нормативам, а также стандартам безопасности (таким как Седьмой уровень здравоохранения (HL7),7 Ресурсы быстрой совместимости в здравоохранении (FHIR),8 Цифровая визуализация и коммуникации в медицине (DICOM),9 Закон о переносимости и подотчетности медицинского страхования (HIPAA),10 и Общие правила защиты данных (GDPR)11) также должны быть приняты во внимание.
- Тестирование встроенной предметной области: поскольку программное и аппаратное обеспечение тесно связаны во встроенной
при тестировании систем необходимо оценивать функциональные и нефункциональные характеристики как программного, так и аппаратного обеспечения.
- Тестирование графического интерфейса пользователя (GUI): тестирование графического интерфейса включает оценку пользовательского интерфейса (UI) (т.е. элементов пользовательских объектов, которые мы можем
видеть). Таким образом, при тестировании графического интерфейса учитываются шаблон проектирования, изображения, выравнивание, орфография и общий внешний вид пользовательского интерфейса. Могут быть рассмотрены подходы к тестированию, основанные на конечных автоматах, целенаправленные подходы, подходы, основанные на абстракциях, и подходы, основанные на моделях.
- Игры: Игровые приложения и программное обеспечение в настоящее время являются очень активным сектором производства программного
обеспечения, что вызывает повышенный спрос на новые подходы и способы обеспечения их качества и безопасности. Среди специфических методов тестирования,

игровое тестирование является одним из наиболее распространенных. В этом случае настоящие геймеры повторяют методы контроля качества на многих этапах разработки игры. Также можно рассмотреть тестирование графического интерфейса, функциональности, безопасности, консольного тестирования, проверки соответствия требованиям и производительности.

- Тестирование предметной области в режиме реального времени: тестирование в режиме реального времени обычно фокусируется на оценке временных ограничений и детерминированного поведения. Обычно могут быть использованы модульные,
интеграционные и системные подходы к тестированию. Также могут быть выполнены коммуникационные, интерактивные и поведенческие тесты.
- Тестирование сервис-ориентированной архитектуры (SOA): Это тестирование в основном направлено на правильную
реализацию бизнес-процессов и включает в себя модульное и интеграционное тестирование. Может применяться тестирование на основе структуры, спецификаций и безопасности. Процедура тестирования может варьироваться в зависимости от среды, организации и набора требований, которые должны быть выполнены.
- Тестирование в области финансов: Это тестирование охватывает широкий спектр аспектов, от управления финансовыми
требования к оценке финансовых приложений и программного обеспечения. Как и в других областях, для эффективного применения процесса тестирования могут потребоваться знания, относящиеся к конкретной предметной области (например, которыми обладают банки, кредитные союзы, страховые компании, компании, выпускающие кредитные карты, компании, занимающиеся потребительским финансированием, инвестиционные фонды и биржевые брокеры). Удовлетворенность клиентов, удобство использования, безопасность, конфиденциальность, интеграция сторонних компонентов и приложений, проблемы в режиме реального времени и производительность - вот некоторые из наиболее важных задач в этой области.

#### 7 Тестирование с использованием новейших технологий (Testing of and Testing Through Emerging Technologies)

В последние десятилетия разработка программного обеспечения была обусловлена новыми тенденциями, такими как широкое распространение мобильных технологий, внедрение облачных инфраструктур, анализ больших данных и парадигма "программное обеспечение как услуга", которые выявили новые ограничения и проблемы при тестировании.

#### 7.1 Тестирование новых технологий (Testing of Emerging Technologies)

- Тестирование искусственного интеллекта (ИИ), ML/глубокого обучения (DL): ИИ, ML и DL успешно применяются на практике. Рано или поздно
позже большинство бизнес-приложений будут иметь ту или иную форму AI, ML или DL. Из-за их особенностей тестирование таких приложений является сложной задачей и может быть очень дорогостоящим. AI, ML
или DL-тестирование относится к любым действиям, направленным на выявление ошибок AI, ML или DL.

При определении ошибок и тестировании в этом сценарии следует учитывать три других основных аспекта: требуемые условия (корректность, надежность, безопасность и конфиденциальность); элементы искусственного интеллекта, ML или DL (например, ошибка может содержаться в данных, учебной программе или используемой платформе); и задействованные действия по тестированию (генерация тестовых наборов, идентификация и определение тестового оракула, а также критерии адекватности тестовых наборов).
Во всех этих приложениях сначала создается прототип модели на основе исторических данных. Затем проводится автономное тестирование, такое как перекрестная проверка, для проверки того, что созданная модель удовлетворяет требуемым условиям. Обычно после развертывания модель используется для
прогнозирования путем генерации новых данных. Наконец, сгенерированные данные анализируются с помощью онлайн-тестирования, чтобы оценить, как модель взаимодействует с поведением пользователей.

- Тестирование блокчейна: Широко используемыми методами тестирования для проверки блокчейнов и связанных с ними приложений, таких как смарт-контракты, являются
стресс-тестирование, тестирование на проникновение и тестирование свойств. Однако, в зависимости от конкретной ситуации, при тестировании SUT на основе блокчейна следует учитывать различные аспекты, такие как следующие:
- Тип платформы: Уровень проверки зависит от типа платформы, используемой для внедрения —
публичной или частной. Последнее требует гораздо больших усилий по тестированию.
- Подключение к другим приложениям: Необходимо провести интеграционное тестирование, чтобы проверить согласованность
работы блокчейна с различными приложениями.
- Производительность: Тестирование производительности следует проводить в тех случаях, когда возникают проблемы с производительностью.
Для обеспечения удовлетворительного уровня производительности следует разработать конкретные стратегии обработки многих транзакций. Также следует учитывать качественные и количественные показатели, такие как средняя задержка подтверждения транзакции и безопасность.
- Тестирование облака: Тестирование облака позволяет проверить качество приложений и
инфраструктуры, развернутые в облаке, с учетом как функциональных, так и нефункциональных свойств. Основное внимание уделяется выявлению проблем, связанных с системами, размещенными в облаке. Поэтому при тестировании используются методы проверки производительности, масштабируемости, эластичности и безопасности облачных сервисов. Кроме того, испытания должны также сосредоточить внимание на совместимость и
взаимодействие между разнородными облачные ресурсы для различных моделей развертывания используются (например, в частном, публичном или гибридном).

- Тестирование параллельных и распределенных приложений: один из основных аспектов тестирования динамические, сложные, распределенные или параллельные приложения имеют дело с несколькими операционными системами и обновлениями, несколькими платформами и версиями браузеров, различными типами оборудования и множеством пользователей. Для такого тестирования трудно использовать подходы к тестированию, основанные на классической иерархии между компонентами или системами; вместо этого решения, основанные на вводе/выводе, потоках зависимостей или динамических связях, часто работают лучше. Кроме того, возможность непрерывной интеграции и развертывания различных компонентов вынуждает процесс тестирования включать подходы к управлению непрерывным тестированием, внедрению, мониторингу и отчетности в соответствии с ограничениями по времени, использованию полосы пропускания, пропускной способности и адаптивности. Наконец, по-прежнему существует потребность в решениях, позволяющих повторно использовать знания о тестировании, архитектуру и код, чтобы сделать процесс тестирования более эффективным и менее затратным.

#### 7.2 Тестирование с помощью новых технологий (Testing Through Emerging Technologies)

- Тестирование с помощью ML: Методы искусственного интеллекта, ML или DL успешно используются для снижения
работа, связанная с несколькими видами деятельности в области разработки программного обеспечения (например, анализ поведения, тестирование или исправление ошибок). Эти методы помогают как исследователям, так и практикам внедрять и определять подходящие методы для желаемых приложений. Растет интерес к внедрению методов ML в тестирование программного обеспечения, поскольку большинство проблем тестирования программного обеспечения формулируются как проблемы обучения ML. Действительно, искусственный интеллект, ML или DL интенсивно используются практически во всех программах, таких как разработка тестовых наборов, решение задач oracle, оценка тестовых наборов, определение приоритетов и уточнение тестовых наборов, а также автоматизация тестирования мутаций. Действительно, они могут сократить затраты на техническое обслуживание и повысить общее качество SUT благодаря своей способности анализировать большие объемы данных для более эффективной классификации, сортировки и определения приоритетов ошибок. С точки зрения DevOps, решения AI, ML и DL могут использоваться на этапах разработки и выполнения тестовых кейсов для автоматизации SUT, а также при анализе тестов после выполнения, который выявляет тенденции, закономерности и влияние на процесс тестирования SUT.
- Тестирование с помощью блокчейна: Тестирование усложняется, когда разным командам, экспертам в предметной области и пользователям необходимо работать вместе в крупномасштабных системах совместной работы и сложных

программные системы для достижения общей цели. В основном это связано с ограничениями по времени, политикой обмена данными, критериями приемлемости и надежной координацией между командами, участвующими в процессе тестирования. Технологии блокчейна могут быть использованы для повышения эффективности тестирования программного обеспечения и исключения использования централизованных полномочий для управления различными тестовыми мероприятиями. Это может помочь обеспечить распределенное управление данными, устойчивость к несанкционированному доступу, возможность аудита и автоматическое соблюдение требований для повышения качества тестирования и разработки программного обеспечения. Также рассматриваются подходы, основанные на блокчейне, для управления надежным хранилищем тестовых примеров и поддержки тестирования программного обеспечения на основе тестов и обеспечения безопасности.

- Тестирование через облако: Тестирование через облако относится к тестированию SUT, выполняемому с использованием масштабируемых облачных технологий. Обычно,
облако используется для тестирования везде, где требуется крупномасштабное моделирование и эластичные ресурсы. Действительно, это может повлиять на снижение затрат, разработку и обслуживание инфраструктуры тестирования (scaffolding) и онлайн-валидацию систем, таких как SUT на основе ML. Особой ситуацией является тестирование облака с помощью самого облака. Это пример пересечения между тестированием и использованием новых технологий. Приложения и инфраструктуры, развернутые в облаке, могут быть протестированы с использованием пропускной способности облака.
- Тестирование с помощью моделирования: Моделирование является важной технологией тестирования
активность, поскольку она представляет собой действенное средство оценки выполнения SUT в критических ситуациях или при стихийных бедствиях, а также оценки специфического поведения или действий по восстановлению. Сложность подхода к тестированию может варьироваться в зависимости от сложности используемой системы моделирования и может включать тестирование по замкнутому циклу; оценку устройств, коммуникаций и интерфейса; а также использование данных в режиме реального времени (например, напряжения, тока и состояния выключателя). Имитационное тестирование может применяться на каждом уровне разработки и может включать математическое, формальное представление реальной системы, окружающей среды, сетевых условий и устройств управления. В настоящее время имитационное тестирование применяется во многих прикладных областях. Среди различных предложений, особенно в автомобильной и встраиваемой областях, одним из новых решений для имитационного тестирования является имитационное тестирование аппаратного обеспечения в режиме реального времени (HIL). В этом случае реальные сигналы, посылаемые в SUT для имитации реальности, а также для тестирования и проектирования итерации, непрерывно выполняются во время использования реальной системы.

- Тестирование с помощью краудсорсинга: Краудсорсинговое тестирование (также известное как краудтестинг) - это новый подход к вовлечение пользователей и экспертов в процесс тестирования. Таким образом, использование краудсорсинга представляет собой разрозненную временную рабочую силу из нескольких отдельных тестировщиков. Тестирование с помощью краудсорсинга в основном используется для тестирования мобильных приложений, поскольку обеспечивает разнообразие технологий и ориентированную на клиента валидацию. Однако краудтестинг не является заменой внутренней проверки SUT. Он представляет собой эффективное средство обнаружения сбоев и проблем, поскольку в нем задействовано множество людей (тестировщиков) в разных местах, которые используют разные технологии в разных условиях и обладают разными навыками и знаниями.

#### 8 Инструменты тестирования программного обеспечения (Software Testing Tools)

Некоторые инструменты тестирования ориентированы на особенности и потребности SUT. В этом разделе описаны основные проблемы, связанные с инструментами тестирования, и представлен обзор их существующих категорий.

#### 8.1 Поддержка и выбор инструментов тестирования (Testing Tool Support and Selection)

Тестирование включает в себя множество трудоемких задач, поскольку оно предполагает выполнение множества программ и обработку значительного объема информации. Соответствующие инструменты могут облегчить выполнение утомительных канцелярских операций и снизить вероятность ошибок. Сложные инструменты могут поддерживать разработку и генерацию тестов, что делает их более эффективными.
Рекомендации руководителям и тестировщикам по выбору инструментов тестирования, которые будут наиболее полезны для их организации и процессов, являются важной темой, поскольку выбор инструментов в значительной степени влияет на эффективность тестирования. Выбор инструментов зависит от различных факторов, таких как варианты разработки, цели оценки и средства реализации. В общем, может не существовать уникального инструмента для удовлетворения конкретных потребностей, поэтому может подойти набор выбранных инструментов.

#### 8.2 Категории инструментов (Categories of Tools)

Несколько классификаций инструментов тестирования в основном описывают их функциональные возможности, например, следующие:

- Тестовые модули (драйверы, заглушки)  обеспечивают контролируемую среду, в которой можно запускать тесты и регистрировать результаты тестирования.
Драйверы и заглушки предоставляются для выполнения частей SUT для имитации вызова и вызываемых модулей.

Генераторы тестов  помогают генерировать тестовые примеры. Эта генерация может быть случайной, основанной на пути, модели или их сочетании.

- Инструменты захвата/воспроизведения  автоматически повторно выполняют или воспроизводят ранее выполненные тесты, в которых были записаны входные и выходные данные (например,
экраны).
- Oracle/файловые компараторы/средства проверки утверждений помогают определить, успешен ли результат тестирования.
- Анализаторы покрытия и инструментальные средства работают сообща. Анализаторы покрытия оценивают, какие
и сколько объектов на графике выполнения программы были задействованы из всех, которые требуются в соответствии с выбранным критерием тестового покрытия. Анализ может быть выполнен с помощью инструментальных средств SUT, которые вводят в код регистрирующие датчики.
- Трассировщики записывают историю выполнения
программы.
- Инструменты регрессионного тестирования  поддерживают повторное выполнение набора тестов после изменения части
программного обеспечения. Они также могут помочь выбрать набор тестов в соответствии с внесенными изменениями.
- Инструменты оценки надежности  поддерживают анализ результатов тестирования и графическую визуализацию для
оценки показателей, связанных с надежностью, в соответствии с выбранными моделями.
- Инструменты на основе инъекций  нацелены на внедрение или воспроизведение конкретных проблем для
убедитесь, что SUT ведет себя надлежащим образом в соответствии с соответствующими условиями. Это может включать управление некоторыми входными данными или запуск событий. Обычно рассматриваются две категории инструментов, основанных на внедрении: внедрение атак и внедрение ошибок.
- Инструменты, основанные на моделировании, проверяют выбранные свойства. Обычно они используют
специальные модели, позволяющие автоматически выполнять сценарии для оценки того, работает ли SUT так, как ожидалось, или для прогнозирования того, как SUT отреагирует на определенные входные данные. Типичные инструменты, основанные на моделировании, подразделяются на инструменты для проверки, инструменты для совместной работы, инструменты для оптимизации, инструменты для тестирования автоматизированных систем и инструменты для оценки концепций программного обеспечения.
- Инструменты тестирования безопасности фокусируются на конкретных уязвимостях в системе безопасности. Среди них
инструменты для внедрения атак, тестирования на проникновение и нечеткого тестирования.
- Инструменты управления тестированием  включают в себя все вспомогательные средства, обеспечивающие эффективное управление тестированием и сбор данных.   
- Инструменты кроссбраузерного тестирования  позволяют тестировщику быстро создать и запустить тестирование пользовательского интерфейса.
просматривайте настольные, мобильные и веб-приложения, чтобы проверить, правильно ли SUT выглядит и работает на каждом устройстве и в каждом браузере.

- Инструменты нагрузочного тестирования собирают ценные данные и фактические данные для оценки производительности SUT.
- Инструменты отслеживания дефектов помогают отслеживать обнаруженные ошибки в ходе проектов разработки SUT. Эти инструменты работают как системы отслеживания
и обычно позволяют конечным пользователям напрямую вводить отчеты о неисправностях.
- Инструменты мобильного тестирования поддерживают внедрение и тестирование мобильных приложений, позволяя проводить несколько повторных тестов пользовательского интерфейса в течение
платформа приложений, разработка на реальных мобильных устройствах или эмуляторах, тестирование мобильных приложений в режиме реального времени и сбор данных для конкретных мер контроля качества.
- Инструменты тестирования API проверяют, соответствуют ли приложения функциональности, производительности,надежность и безопасность при автоматизации конкретных тестов API.
- Инструменты проверки CSS проверяют код с использованием каскадных таблиц стилей (CSS) и обнаруживают ошибки.,
проблемы и предупреждения, которые можно исправить. Сервис проверки CSS, предоставляемый W3C бесплатно, является одним из наиболее часто используемых на практике средств проверки, который помогает как веб-дизайнерам, так и веб-разработчикам проверять CSS.
- Инструменты тестирования веб-приложений, также называемые инструментами веб-тестирования, поддерживают проверку функциональности и производительности
веб-приложений SUTS перед их внедрением в производство. Эти инструменты предоставляют необходимую информацию и данные различным заинтересованным сторонам, таким как разработчики, серверы и администраторы инфраструктуры. С точки зрения DevOps, эти инструменты устраняют проблемы или ошибки до того, как SUTs будут доступны конечным пользователям.