# ГЛАВА 6

## ОПЕРАЦИИ ПО РАЗРАБОТКЕ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE ENGINEERING OPERATIONS)

### АКРОНИМЫ (ACRONYMS)

|  |  |  |  
|--|--|--|  
| API  | Applicatoin programming interface | Интерфейс прикладного программирования |  
| ATDD |	Acceptance	Test Driven Developmen |Разработка на основе приемочных испытаний |  
| CD  | Continuous Delivery | Непрерывная поставка |  
| CI | continuous integration |Непрерывная интеграци  |  
| CPU | Central Processing Unit | Центральный блок обработки |  
| CONOPS | Concepts of Operations |Концепции операций | 
| DBMS | Database Management System |Система управления базами данных  |  
| IaC | Infrastructure code | Инфраструктура кода |  
| IT | Information technology| Информационные технологии |  
| ITIL | IT technology | Технология ит-инфраструктуры |  
| KPI  |Key performance indicator  | Ключевой показатель эффективности | 
| MR |Modification request  | Запрос на изменение| 
| MVP | Minimum viability | Минимальная жизнеспособность  | 
| PR | Platform | Платформа | 
| QA | Quality assurance| Гарантия качества | 
| SaaS | Software |Программное обеспечение  | 
| SLAs | Service Level Agreement| Соглашнеие об уровне обслуживания | 
| TDD |  Development based on testing|  Разработка на основе тестирования| 
 
Операции по разработке программного обеспечения - это набор действий и задач, необходимых для развертывания, эксплуатации и поддержки программного приложения или системы при сохранении их целостности и стабильности. Эти действия включают развертывание и настройку программного обеспечения в целевых операционных средах, а также мониторинг и управление приложением во время его использования (до тех пор, пока оно не будет выведено из эксплуатации). Как только приложение заработает, специалисты по разработке программного обеспечения должны справиться с любыми обнаруженными дефектами, любыми изменениями, внесенными в системную программную среду и аппаратное обеспечение с течением времени, а также с любыми возникающими новыми требованиями пользователей.

Разработка программного обеспечения является неотъемлемой частью процессов жизненного цикла систем и программного обеспечения. Раздел <a href="/4_Software Construction.markdown">"Разработка программного обеспечения"</a> связана со всеми другими аспектами разработки программного обеспечения. Таким образом, данное описание раздела связано со всеми другими разделами руководства SWEBOK по разработке программного обеспечения, в частности с разделом "Разработка программного обеспечения", в котором рассматривается подготовка программного обеспечения к развертыванию, включая интеграцию, сборку, упаковку и тестирование.

Инженеры по эксплуатации специализированного программного обеспечения и информационных технологий (ИТ) традиционно предоставляют ИТ-услуги и управляют ими. Лучшие практики в области разработки программного обеспечения были первоначально опубликованы библиотекой ИТ-инфраструктуры (ITIL) и быстро получили признание в отрасли. Эти методы были обобщены и опубликованы в стандарте Института инженеров электротехники и электроники 20000.

## ВВЕДЕНИЕ (NTRODUCTION)

Исторически сложилось так, что операционные и вычислительные центры часто располагались в организационных

отдельные подразделения отделены от деятельности по разработке программного обеспечения. Прогрессивные организации в настоящее время объединяют разработку программного обеспечения, техническое обслуживание программного обеспечения и некоторые операции по разработке программного обеспечения (часто предоставляемые в качестве услуги). Преимущества такого подхода заключаются в устранении организационных барьеров, которые разделяли эти виды деятельности по разработке программного обеспечения, и в совместном использовании общих процессов и инструментов. Растущая популярность и растущее признание практик DevOps и связанных с ними стандартов, включая постоянно развивающийся набор инструментов, отражают эту тенденцию. DevOps нацелена на автоматизацию и постоянное развитие деятельности по разработке программного обеспечения, чтобы обеспечить высокое качество программного обеспечения и удовлетворить потребности пользователей, которые требуют от инженеров-программистов более быстрого выполнения работ.

За последнее десятилетие роль инженера-программиста в разработке программного обеспечения значительно возросла с появлением DevOps, инфраструктуры как кода (IaC), гибкой инфраструктуры и доступности решений "Инфраструктура как услуга" (IaaS) и "Платформа как услуга" (PaaS). Задачи, традиционно выполняемые инженерами ИТ-инфраструктуры, все больше автоматизируются и становятся доступными в виде сервиса, что позволяет разработчикам приложений самостоятельно выполнять задачи по разработке программного обеспечения в рамках их ежедневная проектная деятельность. Например, разработчики приложений во многих организациях теперь могут напрямую использовать IaaS и PaaS для развертывания приложений в производственных средах и мониторинга различных аспектов этих приложений без непосредственного привлечения инженеров по эксплуатации.

Хотя многие организации по-прежнему используют традиционные процессы управления ИТ-операциями, этот КА в основном посвящен роли инженеров-программистов в операционной деятельности в новых условиях применения DevOps, IaC и гибкой инфраструктуры. Для этой цели мы выделяем две основные роли в разработке программного обеспечения, связанные с операциями: инженер по эксплуатации, который отвечает за разработку операционных сервисов, предоставляемых в виде сервиса и доступных через интерфейс прикладного программирования (API), и инженер-программист, который может использовать полученные операционные сервисы (доступные как сервис) для самостоятельного использования. развертывайте приложения и управляйте ими без непосредственного привлечения специалистов по ИТ-операциям.

## РАЗБИВКА ТЕМ ДЛЯ ОПЕРАЦИЙ ПО РАЗРАБОТКЕ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (BREAKDOWN OF TOPICS FOR SOFTWARE REQUIREMENTS)

Разбивка тем для КА "Операции разработки программного обеспечения" показана на рисунке 1.

<div style="text-align:center">
<img src="Images/Chapter 6/Рисунок 6.1.bmp"
alt="Рисунок 6.1. Разбивка тем.">
<br>Рисунок 6.1. Разбивка тем.
</div>

### 1 Операции по разработке программного обеспечения (Software Engineering Operations Fundamentals)

#### 1.1 Определение операций разработки программного обеспечения (Definition of Software Engineering Operations)

В данном руководстве термин "операции по разработке программного обеспечения" относится к знаниям, навыкам, процессам и инструментам, используемым инженерами-программистами или их организацией для обеспечения надлежащей работы программного продукта, включая ИТ-инфраструктуру, системное программное обеспечение и прикладное программное обеспечение, во время разработки, сопровождения и в реальных условиях эксплуатации.

В стандарте IEEE 12207 оператор определяется как “физическое лицо или организация, которые выполняют операции в системе”. В руководстве SWEBOK изменено определение термина "инженер по эксплуатации", который относится к инженеру-программисту, который выполняет процессы разработки программного обеспечения. В этой роли работает инженер по эксплуатаци в тесном сотрудничестве с разработчиками программного обеспечения мы разрабатываем и предлагаем следующие операционные услуги:

- Подготовка, развертывание, настройка и поддержка контейнеров и виртуальных серверов
- Разработка и предоставление услуг по запросу (например, среда по требованию, управление версиями, непрерывная интеграция (CI) и тестирование, развертывание и наблюдение) для использования разработчиками программного обеспечения.,
- Мониторинг и устранение неполадок с системным и прикладным программным обеспечением путем проведения диагностики, документирования проблем и способов их устранения, определения приоритетов проблем и оценки их последствий.,
- Выполнение, автоматизация и внедрение соответствующих процессов обеспечения безопасности, защиты данных и процедур отработки отказа
- Контроль за производительностью ресурсов, планированием хранилища и системы управления базами данных (СУБД),
- Предоставление документации и технических спецификаций ИТ-персоналу для планирования и внедрения новой или модернизированной ИТ-инфраструктуры и системного программного обеспечения.

В стандарте IEEE 20000 описана необходимость развития и совершенствования профессиональных компетенций инженеров по эксплуатации. Для достижения этой цели организациям, занимающимся разработкой программного обеспечения, следует решить следующие задачи:

- Подбор персонала: проверка квалификации/компетентности соискателей, включая их профессиональные сертификаты, а также выявление их сильных и слабых сторон и потенциальных возможностей в соответствии с должностными инструкциями инженера по эксплуатации, основными технологиями и компьютерными языками, которыми они владеют, и общим опытом,
- Планирование ресурсов: для укомплектования персоналом новых или расширенных инженерно-технических служб, планирования использования новых технологий, назначения персонала по управлению услугами в проектные группы разработки, планирования преемственности и устранения других кадровых пробелов, возникающих в результате текучести кадров,
- Обучение и развитие ресурсов: определение требований к обучению и повышению квалификации и разработка плана обучения и повышения квалификации, отвечающего этим требованиям; а также обеспечение своевременного и эффективного предоставления операционных услуг. Инженеры по эксплуатации должны быть обучены соответствующим аспектам управления услугами (например, с помощью учебных курсов, самообучения, наставничества и обучения на рабочем месте), а также развивать навыки работы в команде и лидерские качества. Для каждого из них следует вести хронологический учет обучения.

Индивидуально, с описанием проведенного обучения.

#### 1.2 Операционные процессы разработки программного обеспечения (Software Engineering Operations Processes)

IEEE 20000  - это справочный стандарт, в котором представлен обзор операционных процессов. Он определяет требования к проектированию, переходу, предоставлению и совершенствованию операционных услуг. В стандарте IEEE 20000 описаны пять основных групп операционных процессов: процессы предоставления услуг, процессы выпуска, процессы управления, процессы разрешения и процессы взаимодействия. В стандарте IEEE 12207 эти операционные процессы далее классифицируются как технические процессы. Операционные процессы, с точки зрения инженера-программиста, содержат действия и задачи, необходимые для развертывания, настройки, эксплуатации и поддержки существующей программной системы или продукта при сохранении их целостности. Стандарт IEEE 12207 описывает четыре основных действия в процессе эксплуатации: 1) подготовка к эксплуатации: для этого требуется определить стратегию эксплуатации; 2) выполнение операции: которая включает в себя эксплуатацию и мониторинг; 3) управление результатами эксплуатации: когда регистрируются и устраняются аномалии.; и, наконец, 4) поддержка клиента: это означает оказание помощи и консультаций любому пользователю операционных услуг.

Наконец, в стандарте IEEE 2675 представлен ряд операций по разработке программного обеспечения с использованием концепции Agile и минимально жизнеспособного продукта (MVP). В настоящем стандарте признается влияние DevOps как набора принципов и практик, которые позволяют улучшить коммуникацию и сотрудничество между соответствующими заинтересованными сторонами с целью определения, разработки, постоянного совершенствования и эксплуатации программного обеспечения, системных продуктов и сервисов. Ответственность за эти процессы и действия несут инженеры по эксплуатации.

Для целей руководства SWEBOK инженерные операции могут быть сгруппированы в три основных операционных процесса (см. рис. 2), каждый из которых содержит ряд операций, описанных в следующих разделах этой главы:

- Планирование операций (раздел 2)
- Выполнение операций (раздел 3)
- Операционный контроль (раздел 4)

Каждый рабочий процесс разработки программного обеспечения включает в себя действия, выполняемые на этапах подготовки к поставке и после поставки программного проекта. Операции по планированию операций разработки программного обеспечения выполняются на этапе подготовки к поставке. Эти действия описаны в этой главе.

#### 1.3 Установка программного обеспечения (Software Installation)

Прежде чем программное приложение или обновление станут доступны пользователям (т.е. будут запущены в производство), инженер по эксплуатации должен установить программное обеспечение как часть своей системы.

развертывание. Чтобы установить программное обеспечение, инженеру, возможно, придется удалить предыдущие версии, настроить программное обеспечение для его целевого назначения и создать необходимые каталоги, файлы реестра и переменные среды в целевом месте назначения. Часто это делается с помощью языка сценариев. Установка программного обеспечения в соответствующие места обычно производится электронным способом, но в случае встроенных систем для этого может потребоваться использование физический носитель. После установки программного обеспечения выполняется этап проверки, чтобы убедиться в успешном выполнении операции.

#### 1.4 Создание сценариев и автоматизация (Scripting and Automating)

В рамках разработки программного обеспечения автоматизируются повторяющиеся задачи для сокращения задержек, повышения качества и обеспечения согласованной и стабильной операционной среды. Обычно это достигается с помощью языков сценариев, которые являются базовыми языками программирования. Автоматизация операций позволяет быстрее реагировать на сбои и, следовательно, сокращает время простоя и количество серьезных инцидентов, поскольку оповещения отправляются немедленно. Автоматизация таких задач также является хорошим способом обеспечения

стандартизация операций в организации. Она также является основой для разработки операций, доступных в качестве сервиса. Более подробное описание операционных инструментов приведено в разделе 6.

#### 1.5 Эффективное тестирование и устранение неполадок (Effective Testing and Troubleshooting)

Компания Software engineering operations отвечает за обеспечение стабильности системы. Для этого программное обеспечение должно быть тщательно протестировано перед выпуском (развертыванием в рабочей среде и предоставлением доступа пользователям). Поскольку ручное тестирование неэффективно, подвержено ошибкам и не масштабируется, тестирование должно быть максимально автоматизировано на протяжении всего процесса разработки программного обеспечения. Кроме того, поскольку время, доступное для тестирования, ограничено, стратегии регрессионного тестирования и охвата тестированием (выборочное повторное тестирование программного приложения или компонента для проверки того, что развертываемое программное обеспечение не вызовет непредвиденных последствий) играют важную роль в разработке программного обеспечения.

При обнаружении ошибок (в процессе производства после выпуска программного обеспечения или на этапах внутреннего тестирования) инженеры по эксплуатации программного обеспечения должны устранять аппаратные и программные инциденты, проводя диагностику, документируя проблемы и способы их устранения, определяя приоритетность проблем и оценивая их влияние. Стоимость
— как по времени, так и по деньгам — повторное полное тестирование важной части программного обеспечения имеет большое значение. Чтобы убедиться в достоверности запрошенных отчетов о проблемах (PR), инженер по эксплуатации должен воспроизвести и проверить проблемы, выполнив соответствующие тесты. Тестирование определенных аспектов программного обеспечения в процессе производства может быть особенно сложным. Например, когда программное обеспечение выполняет критически важные функции, может быть сложно перевести его в автономный режим для тестирования. Как правило, тестирование программного обеспечения в контексте производственной системы является сложной задачей (иногда невозможно) и может потребовать использования таких методов тестирования, как тестирование на канарейках и запуск в темноте. В разделе "Тестирование программного обеспечения" содержится дополнительная информация и ссылки по тестированию.

### 1.6 Производительность, надежность и балансировка нагрузки (Performance, Reliability and Load Balancing)

Инженеры по эксплуатации программного обеспечения планируют производительность, надежность и балансировку нагрузки на ранних этапах разработки программного обеспечения, чтобы обеспечить соответствие требованиям проекта. (см. раздел <a href="/1_Software Requirements.markdown#12-категории-требований-к-программному-обеспечению-categories-of-software-requirements">1.2-1.7 требований к программному обеспечению</a>). В настоящее время инженеры-программисты разрабатывают и используют инфраструктуру/операционные службы для динамической настройки (например, масштабируемости) инфраструктуры в соответствии со спросом. Использование методов DevOps позволяет инженерам по эксплуатации предвидеть эти потребности на ранней стадии и предоставлять инфраструктурные услуги, которые инженеры-программисты могут использовать и тестировать на этапах разработки проекта.

### 2 Планирование операций по разработке программного обеспечения (Software Engineering Operations
Planning)

В этом разделе представлены некоторые общепринятые методы, используемые при планировании операций разработки программного обеспечения. Инженеры по эксплуатации должны решать ряд ключевых вопросов, чтобы обеспечить эффективную работу программного обеспечения. Операционные инженеры должны документировать этапы и инструменты разработки программного обеспечения, используя любые типы, формы или носители, подходящие для этой цели (например, вики-страницы, документы и т.д.). Следующие разделы обычно считаются подходящими для подтверждения хорошо документированных операций:

- Политики и планы,
- Сервисная документация,
- Процедуры,процессы и
- Записи управления технологическим процессом.

#### 2.1. Операционный план и управление поставщиками (Operations Plan and Supplier Management)

Планирование операций по разработке программного обеспечения должно составлять часть процесса преобразования требований проекта и потребностей разработчиков и сопровождающих в услуги, и оно должно служить дорожной картой для направления прогресса. Этот процесс часто включает в себя продукты и услуги поставщиков, которые должны быть хорошо скоординированы для обеспечения качественного обслуживания. В стандарте IEEE 20000 описаны мероприятия по планированию, а также в стандарте IEEE 12207, в котором перечислены мероприятия, которые инженеры по эксплуатации рассматривают с человеческой, технической и системной точек зрения.

#### 2.1.1 Операционный план (Operations Plan)

В то время как разработка программного обеспечения обычно длится от нескольких месяцев до нескольких лет, этап эксплуатации обычно длится много лет. Таким образом, оценка ресурсов является ключевым элементом планирования операций. Планирование операций по разработке программного обеспечения следует начинать с принятия решения о разработке нового программного продукта и заблаговременно учитывать требования к его техническому обслуживанию и эксплуатации. Следует разработать концептуальный документ, за которым последует план эксплуатации и технического обслуживания и оба они должны охватывать следующее:

- Объем работ и техническое обслуживание программного обеспечения,
- Адаптация процесса и инструментов разработки программного обеспечения,
- Определение организации разработки программного обеспечения,
- Оценка затрат на разработку программного обеспечения и техническое обслуживание.

Следующим шагом планирования является разработка операционного плана разработки программного обеспечения, или концепции операций (CONOPS). Этот план должен быть подготовлен в ходе разработки программного обеспечения.

разработки и должен указывать, как пользователи будут запрашивать изменения в программном обеспечении и сообщать о проблемах, когда программное обеспечение начнет функционировать. Планирование операций по разработке программного обеспечения рассматривается в стандартах IEEE 12207 и IEEE 2675 . Стандарты содержат рекомендации по планированию, внедрению, сопровождению, автоматизации и поддержке производственного программного обеспечения. Наконец, на самом высоком уровне планирования операционная организация должна осуществлять деятельность по бизнес-планированию (например, бюджетное, финансовое и кадровое), так же как и все другие подразделения организации (см. раздел <a>"Управление разработкой программного обеспечения"</a>). В стандарте IEEE 20000 рекомендуется, чтобы операционный план учитывал вопросы, связанные с рядом аспектов планирования, включая следующие:

- Роли и обязанности по внедрению, эксплуатации и сопровождению новой или измененной службы,
- Действия, которые должны выполняться клиентами и поставщиками,
- Внесение изменений в существующую систему управления услугами и сервисами,
- Информирование соответствующих сторон,
- Новые или измененные контракты и соглашения в соответствии с изменениями в потребностях бизнеса,
- Требования к персоналу и подбору персонала,
- Требования к навыкам и обучению (например, пользователи, техническая поддержка),
- Процессы, меры, методы и инструменты, которые будут использоваться в связи с новой или измененной услугой.,
- Управление производственными мощностями, управление финансами
- Бюджеты и временные рамки,
- Критерии приемлемости услуг и
- Ожидаемые результаты от использования новой услуги, выраженные в измеримых величинах.

Этот план гарантирует, что определена операционная стратегия, определены и оценены условия для корректной работы, программное обеспечение масштабно протестировано для обеспечения его работоспособности.

для обеспечения быстрого реагирования и доступности программного обеспечения путем обеспечения постоянной поддержки обеспечивается целевая среда и обеспечивается наблюдение. На уровне отдельных запросов (например, PR-запросов и запросов на модификацию (MR)) требуется планирование. Как только индивидуальные запросы получены и подтверждены, для планирования выпуска или версии требуется, чтобы инженеры по эксплуатации выполнили следующие задачи:

- Определите конечные даты доступности отдельных запросов,
- Согласуйте содержание последующих выпусков или версий,
- Выявите потенциальные конфликты и разработайте альтернативные варианты,
- Оцените риск, связанный с данным выпуском, и разработайте план отката и переноса данных (см. раздел <a href="#32-разработка-развертываниярелиза-deploymentrelease-engineering">3.2</a>) на случай возникновения проблем.,
- Информировать все заинтересованные стороны.

#### 2.1.2 Управление поставщиками (Supplier Management)

Управление поставщиками обеспечивает надлежащее управление поставщиками организации и их производительностью для обеспечения бесперебойного предоставления качественных продуктов и услуг. В стандарте IEEE 12207 перечислены действия, которые должен выполнять инженер по эксплуатации для заключения соглашения о приобретении продуктов и/или услуг поставщиков. С точки зрения инженера по эксплуатации, характер взаимоотношений с поставщиками и применяемый подход должны определяться характером продуктов и услуг, необходимых в рамках проекта. Управление поставщиками услуг, связанных с операционным программным обеспечением, включает в себя управление аутсорсинговыми услугами и сервисами, предоставляемыми компаниями software as a service (SaaS), PaaS и IaaS.

#### 2.2 Среды разработки и эксплуатации (Development and Operational Environments)

Весь процесс разработки программного обеспечения требует использования различных сред на разных этапах. Обычно они определяются как среда разработки, среда тестирования или обеспечения качества (QA), среда подготовки к производству и производственная среда. Чтобы повысить качество продукта и снизить риски, связанные с выпуском программного обеспечения в производственной среде (независимо от того, связан ли выпуск с новыми функциональными возможностями или устранением дефектов), инженеры должны обеспечить согласованность и синхронизацию различных сред с производственной средой.

По этой причине DevOps рекомендует автоматизировать создание всех различных сред и создавать их из единого хранилища кода. В развитых организациях DevOps создание различных сред полностью автоматизировано и доступно в виде сервиса. Кроме того, все среды должны быть созданы на основе одного и того же исходного кода (единого источника достоверности), чтобы гарантировать синхронизацию всех сред с производственной средой, в которой выпускается программное обеспечение. Это приводит к концепции IaC.

#### 2.3 Доступность программного обеспечения, непрерывность и уровни обслуживания (Software Availability, Continuity and Service Levels)

Необходимо управлять доступностью и непрерывностью обслуживания, чтобы гарантировать выполнение обязательств заказчика. Поскольку доступность и непрерывность обслуживания определяются как нефункциональные требования на ранней стадии проекта (см. раздел <a>"Управление качеством программного обеспечения"</a>), инженеры по эксплуатации должны обеспечить планирование, разработку, внедрение и тестирование надлежащей инфраструктуры. Доступность программного обеспечения измеряется и регистрируется, а также расследуется незапланированная недоступность и принимаются соответствующие меры. В отчетах об обслуживании приводятся показатели доступности и непрерывности работы операционных служб в соответствии с целевыми показателями уровня обслуживания.

Процесс управления уровнем обслуживания отслеживает согласованный уровень обслуживания программного обеспечения, включая характеристики рабочей нагрузки, информацию о тенденциях производительности и доступности, а также анализ удовлетворенности клиентов. Определение, согласование и документирование соглашений об уровне обслуживания (SLA) может помочь уточнить весь спектр предоставляемых операционных услуг.

#### 2.4 Управление производительностью программного обеспечения (Software Capacity Management)

В стандарте IEEE 20000 описана необходимость обеспечения того, чтобы программный продукт всегда обладал способностью удовлетворять текущие и будущие согласованные требования, обусловленные бизнес-потребностями заказчика. Текущие и ожидаемые бизнес-требования к сервисам следует понимать с точки зрения того, что нужно бизнесу для предоставления своих продуктов или услуг своим клиентам. Бизнес-прогнозы и оценки рабочей нагрузки должны быть переведены в конкретные требования и задокументированы. Реакция на изменения рабочей нагрузки или среды должна быть предсказуемой; для поддержки процесса необходимо собирать и анализировать данные о текущих и предыдущих компонентах, а также об использовании ресурсов на соответствующем уровне.

Управление производительностью является ключевым моментом для решения всех вопросов производительности и пропускной способности. Этот процесс должен непосредственно поддерживать разработку новых и измененных сервисов путем определения размеров и моделирования этих сервисов. План пропускной способности, документирующий фактическую производительность инфраструктуры и ожидаемые требования, должен составляться с соответствующей периодичностью (по крайней мере, ежегодно) с учетом скорости изменения услуг и объемов обслуживания, информации в отчетах по управлению изменениями и меняющихся бизнес-требований клиентов. В плане производственных мощностей должны быть указаны варианты с указанием затрат для удовлетворения бизнес-требований и рекомендованы решения, обеспечивающие достижение согласованных целевых показателей уровня обслуживания, определенных в соглашении об уровне обслуживания. Необходимо хорошо понимать техническую инфраструктуру и ее текущие и прогнозируемые возможности.

#### 2.5 Резервное копирование программного обеспечения, аварийное восстановление и отработка отказа (Software Backup, Disaster Recovery and Failover)

В стандарте IEEE 20000 предлагается, чтобы для обеспечения бесперебойного планирования и тестирования резервные копии данных, документов и программного обеспечения, а также любого оборудования и персонала, необходимых для восстановления работоспособности, были быстро доступны после серьезного сбоя в работе или катастрофы. Резервное копирование и восстановление данных - важные действия, успешное восстановление особенно важно. Необходимость успешного восстановления должна влиять на то, какие методы резервного копирования и восстановления используются (полные или поэтапные), как часто устанавливаются точки восстановления, где они хранятся и как долго они сохраняются.

По мере внесения изменений в производственную среду необходимо постоянно отрабатывать готовность и регулярное тестирование резервного копирования, аварийного восстановления и отработки отказа. Это еще одно важное действие, которое запускается при оценке простоев. Тестирование аварийного восстановления требует остановки службы, определения состояния контрольной точки и запуска процесса отработки отказа. Разработчики программного обеспечения должны понимать, что сбой неизбежен и что автоматизированные демоны отработки отказа могут значительно сократить время восстановления. Для достижения этой цели программные приложения должны включать логику обработки сбоев; это должно быть запланировано в процессе разработки. DevOps может помочь организациям, которые хотят сократить количество отказов и аварийных ситуаций, автоматизируя и запуская тесты как можно чаще, чтобы обеспечить готовность в случае сбоя или катастрофического события.

#### 2.6 Безопасность программного обеспечения и данных, их сохранность, целостность, предохранение и средства контроля (Software and Data Safety, Security, Integrity, Protection and Controls)

Необходимость эффективного управления информационной безопасностью в рамках всех видов деятельности службы описана в стандарте IEEE 20000. Это достигается путем проведения оценки рисков, связанных с безопасностью и доступностью информации, связанных с программным обеспечением. Операционные инженеры должны стремиться обеспечить соблюдение следующих мер контроля:

1. Высшее руководство должно определить свою политику информационной безопасности, довести ее до сведения персонала и клиентов и принять меры для обеспечения ее эффективного внедрения,
2. Следует определить роли и обязанности в области управления информационной безопасностью и распределить их между должностными лицами, занимающими соответствующие должности,
3. На представителя управленческой команды должна быть возложена задача мониторинга и поддержания эффективности политики информационной безопасности,
4. Сотрудники, выполняющие важные функции в области безопасности, должны пройти обучение по информационной безопасности.,
5. Весь персонал должен быть ознакомлен с политикой информационной безопасности,
6. Должна быть доступна экспертная помощь по оценке рисков и внедрению контроля,
7. Изменения не должны ставить под угрозу эффективное функционирование средств контроля, и
8. Об инцидентах информационной безопасности следует сообщать в соответствии с процедурами управления инцидентами и инициировать принятие ответных мер.
" 

### 3 Выполнение операций по разработке программного обеспечения (Software Engineering Operations Delivery)

В этом разделе представлены некоторые из общепринятых процессов, используемых при разработке программного обеспечения (IEEE 20000): соглашение об уровне обслуживания, отчетность об обслуживании, непрерывность обслуживания, управление доступностью, бюджетирование и учет ИТ-услуг, управление производительностью и управление информационной безопасностью.

#### 3.1  Эксплуатационные испытания, верификация и приемка (Operational Testing, Verification and Acceptance)

Инженеры-программисты планируют и проводят верификацию программного обеспечения как можно раньше, используя методы и инструменты разработки на основе тестирования (TDD) и приемочного тестирования (ATDD), которые гарантируют, что эксплуатационное тестирование будет проводиться во время разработки программного обеспечения, а не только в конце проекта. DevOps играет важную роль в разработке и автоматизации служб тестирования программного обеспечения и интеграции различных инструментов для повышения производительности и качества программного обеспечения. (см. TDD и ATDD в разделе <a href="/5_Software Testing.markdown">"Тестирование программного обеспечения"</a>).

#### 3.2 Разработка развертывания/релиза (Deployment/Release Engineering)

Основная ответственность инженера по эксплуатации программного обеспечения связана с развертыванием и выпуском программного обеспечения для обеспечения его постоянной производительности. Как определено в, “развертывание - это установка указанной версии программного обеспечения в заданную среду (например, развертывание кода в среде интеграционного тестирования или развертывание кода в рабочей среде)”, тогда как “выпуск - это когда мы делаем функцию (или набор функций) доступной для всех наших сотрудников". клиенты или сегмент клиентов (например, мы разрешаем использовать эту функцию 5% нашей клиентской базы).” Процессы выпуска включают в себя все действия, связанные с управлением выпуском. ISO 12207
 перечислены действия по контролю за выпуском и объяснена необходимость выявления и регистрации запросов на выпуск, определения элементов программной системы в выпуске с последующим утверждением и отслеживания выпусков в соответствующих средах.

DevOps выступает за интеграцию разработки и эксплуатации в рамках одной команды для повышения эффективности операций по разработке программного обеспечения. В традиционных процессах разработки программного обеспечения, когда приложение готово к развертыванию, оно

передан из команды разработчиков в оперативную группу, которая отвечает за развертывание, которое в основном выполняется вручную. В результате процессы становятся неэффективными как с точки зрения времени, так и с точки зрения качества. Чтобы повысить эффективность процесса развертывания, DevOps требует автоматизировать различные этапы развертывания, включая упаковку кода, создание файлов конфигурации, перезапуск серверов, настройку серверов и баз данных, установку программного обеспечения на разные серверы, запуск приложения и выполнение smoke-тестирования.

Для снижения рисков, связанных с выпусками программного обеспечения, могут использоваться различные стратегии разработки релизов. Эти стратегии можно разделить на две основные категории: стратегии выпуска, основанные на среде, и стратегии выпуска, основанные на приложениях. Стратегии выпуска, основанные на среде, используют промежуточную среду для поддержки выпуска новой версии приложения. Другими словами, базовая стратегия предполагает развертывание новой версии приложения в промежуточной среде. Стратегии выпуска на основе приложений основаны на использовании переключателей (например, переключателей функций), которые позволяют включать или отключать определенные разделы кода (например, функцию) с помощью параметров конфигурации.

Развертывание и выпуск поддерживаются методами и инструментами автоматизации. Метод тестирования canary release - это частичное и ограниченное по времени развертывание изменений в сервисе и оценка этого изменения. Эта оценка помогает инженеру по эксплуатации решить, следует ли переходить к полному развертыванию. Аналогичным образом, инструменты, управляющие установкой нового программного обеспечения, обычно некоторое время наблюдают за только что запущенным сервером, чтобы убедиться, что сервер не выходит из строя или иным образом не ведет себя неправильно. Тот же метод полезен для отслеживания последних изменений; если они не проходят период проверки, их можно автоматически отменить. Конфигурация программного обеспечения

Раздел Management предоставляет дополнительную информацию о процессах выпуска. Как только платформа приложений развернута в целевой производственной среде, решение о том, чтобы сделать ее доступной для пользователей (выпустить ее), становится бизнес-решением.

#### 3.3 Откат и перенос данных (Rollback and Data Migration)

Откат и перенос данных - это термины, используемые для описания процесса возврата программного обеспечения и его базы данных в состояние, при котором они работают должным образом. Инженеры-программисты гарантируют, что после модификации и внедрения в производство новой версии программного обеспечения и его баз данных их можно будет легко и быстро откатить в случае, если новая версия вызовет дефекты или ухудшение качества продукта в процессе производства. Это означает, что перед внедрением новой версии программного обеспечения в производство выполняется запланированный и отрепетированный откат. Процессы DevOps автоматизируют этот процесс, чтобы ускорить его; фактически, автоматическое наблюдение может вызвать откат и перенос данных в предыдущее состояние так быстро, что конечный пользователь не заметит, что возникла проблема. Обе категории стратегий выпуска (описанные в разделе 3.2) — выпуск на основе среды и выпуск на основе приложений - могут использоваться для поддержки отката.

#### 3.4 Управление изменениями (Change Management)

Этот операционный процесс гарантирует, что все изменения оцениваются, утверждаются, внедряются и пересматриваются контролируемым образом. Все запросы на внесение изменений регистрируются и классифицируются (например, по категориям "чрезвычайные", "срочные", "основные" и "второстепенные"). В ходе этого процесса оценивается риск внесения изменений и необходимость разработки стратегии отката в случае сбоя. В крупных системах может потребоваться согласование графика изменений с менеджером по продукту и конечными пользователями.

В то время как в традиционных процессах поставки программного обеспечения (или моделях жизненного цикла программного обеспечения) все изменения вносятся в рамках новых выпусков программного обеспечения (содержащих множество изменений, относящихся к различным аспектам приложения или системы), выпускаемых через фиксированные промежутки времени (например, каждые три месяца), DevOps стремится вносить небольшие изменения единицами (единую новую функциональность или услугу, или исправление дефекта, а не новую версию приложения, содержащую множество изменений) по требованию и независимо друг от друга. Для этого программные приложения (или службы) должны быть спроектированы таким образом, чтобы обеспечить возможность небольшого независимого развертывания программного обеспечения.

#### 3.5 Управление проблемами (Problem Management)

Цель этого операционного процесса состоит в том, чтобы свести к минимуму сбои в работе бизнеса путем выявления и анализа причин программных и системных инцидентов и проблем. Такой подход может потребовать привлечения многопрофильной команды, инженеры-программисты и инженеры по эксплуатации которой исследуют, например, повторяющиеся производственные проблемы, которые могут иметь первопричину в программной инфраструктуре и системных компонентах. Это может потребовать мониторинга, регистрации и профилирования программного обеспечения и поведения его инфраструктуры.

### 4 Управление операциями разработки программного обеспечения (Software Engineering Operations Control)

В этом разделе представлены некоторые общепринятые методы, используемые при управлении операциями разработки программного обеспечения.

#### 4.1 Управление инцидентами (Incident Management)

Управление инцидентами - это процесс регистрации, определения приоритетов и оценки инцидентов.

влияние на бизнес, разрешение, эскалация и закрытие инцидентов с программным обеспечением. Современный подход DevOps автоматизирует наблюдение за программным обеспечением с помощью предупреждений и журналов, чтобы предотвратить превращение незначительных инцидентов в крупные.

#### 4.2 Мониторинг, измерение, отслеживание и анализ (Monitor, Measure, Track and Review)

Операции по разработке программного обеспечения контролируют производительность, непрерывность и доступность. С точки зрения DevOps, надежда не должна быть стратегией; вместо этого инженеры должны получать информацию о качестве системы и ее работоспособности с помощью фактических данных, таких как следующие ключевые показатели эффективности (KPI), которые доступны заинтересованным сторонам в режиме реального времени:

- Мониторинг производственной системы и телеметрия продукта,
- Действенные результаты проверки и валидации до и после запуска в производство,
- Активность конечного пользователя и использование ресурсов,
- Результаты анализа воздействия,
- Взаимозависимости, необходимые для работы системы,
- Изменения конфигурации, не связанные с утвержденными задачами развертывания, и
- Возможности обеспечения безопасности и отказоустойчивости.

#### 4.3 Поддержка операций (Operations Support)

Стандарты IEEE 12207 , IEEE 20000  и IEEE 2675  определите основные виды деятельности по разработке программного обеспечения, которые поддерживают операционные процессы — деятельность, обеспечивающую работу программного продукта в предполагаемой среде, — и основные виды деятельности, которые обеспечивают поддержку заказчиков программных продуктов. Действия по поддержке операций инициируются на стадии планирования проекта и затем выполняются, что часто требует методы и инструменты для активного мониторинга продукта и услуг и быстрого реагирования на события и инциденты. Мероприятия по поддержке часто описываются в соглашениях об уровне обслуживания.

#### 4.4 Отчетность по операционным услугам (Operations Service Reporting)

Сервисная отчетность направлена на получение согласованной, своевременной, надежной и точной информации для принятия решений. Каждый сервисный отчет помогает продемонстрировать, как работает операционная служба и достигла ли она определенных заявленных и согласованных целей конечного пользователя. Типичные отчеты об обслуживании содержат информацию о производительности по сравнению с целевыми показателями уровня обслуживания, а также о нарушениях безопасности, объеме транзакций и использовании ресурсов, инцидентах и сбоях, информацию о тенденциях и анализе удовлетворенности. Инженерам по эксплуатации необходимо создать автоматизированные системы и инструменты для измерения, чтобы выполнять следующие действия:

- Определите, доступны ли уже измерения или необходимы дополнительные инструменты для сбора, анализа и отчетности
- Выберите или разработайте структуру и инструменты, позволяющие координировать сбор данных измерений для анализа, отчетности и контроля

### 5 Практические соображения (Practical Considerations)

методы, позволяющие выявлять проблемы как можно раньше и предотвращать инциденты. Для этой цели необходимо собирать и анализировать данные, собранные на всех уровнях продуктового стека (включая прикладной уровень, уровень операционной системы и уровень инфраструктуры). Использование телеметрии продукта не только позволяет инженерам выявлять потенциальные неполадки, но и обеспечивает основу для определения источника проблемы.

В этом разделе представлены практические рекомендации по разработке программного обеспечения.

#### 5.1 Предотвращение инцидентов и проблем (Incident and Problem Prevention)

Для предотвращения инцидентов и проблем необходимо максимально автоматизировать весь операционный процесс, а автоматизированное тестирование должно быть интегрировано во весь процесс. Кроме того, телеметрия продукта должна быть реализована с надлежащей аналитикой методы, позволяющие выявлять проблемы как можно раньше и предотвращать инциденты. Для этой цели необходимо собирать и анализировать данные, собранные на всех уровнях продуктового стека (включая прикладной уровень, уровень операционной системы и уровень инфраструктуры). Использование телеметрии продукта не только позволяет инженерам выявлять потенциальные проблемы, но и обеспечивает основу для выявления источника проблемы.

#### 5.2 Управление операционными рисками (Operational Risk Management)

Инженеры по эксплуатации должны управлять рядом рисков. Стандарт IEEE 2675 определяет непрерывное управление рисками как непрерывный процесс, который может быть автоматизирован для постоянного мониторинга операций на предмет рисков, которые могут повлиять на доступность, масштабируемость и безопасность программного обеспечения. Инженеры по эксплуатации могут принимать меры для автоматизации оповещений. Чтобы решить, какие события вызовут тревогу, им необходимо проконсультироваться с владельцами продуктов и инженерами-программистами, чтобы установить согласованный уровень толерантности к риску. Другие возможности заключаются в выборе процесса развертывания, который соответствует профилю рисков данной службы и рискам раскрытия личных данных.

#### 5.3 Автоматизация операций по разработке программного обеспечения (Automating Software Engineering Operations)

В последние годы автоматизация занимает важное место в современных операциях. Инженеры-программисты добиваются наилучших результатов, объединяя автоматизацию приложений и операций. Хотя автоматизация в первую очередь направлена на управление жизненным циклом системы или инфраструктуры (например, создание учетной записи пользователя, подготовка среды и сервера, изменение конфигурации среды выполнения), она также может быть полезна в других случаях использования, когда могут быть разработаны сервисы, помогающие разработчикам программного обеспечения развертывать, тестировать и отлаживать процесс разработки. Тенденции в операционной деятельности

автоматизация направлена на снижение сложности, ускорение развертывания инфраструктуры, предоставление разработчикам сценариев операционных служб, определение приложений, автоматизацию рабочих процессов развертывания и тестирования.

#### 5.4 Операции по разработке программного обеспечения для небольших организаций (Software Engineering Operations for Small Organizations)

Очень небольшие организации (численностью до 25 человек) сталкиваются с трудностями при применении стандартов, разработанных крупными организациями и для них, поскольку их требования могут превосходить возможности небольших организаций. Именно здесь полезна серия стандартов ISO/IEC 29110, поскольку она содержит стандарты и рекомендации, адаптированные для очень небольших организаций, чтобы обеспечить качество их операций по разработке программного обеспечения. Инженеры-программисты должны знать, что операционные процессы могут быть адаптированы для небольших организаций и что для этой цели существует серия стандартов ISO/IEC 29110.

### 6 Инструменты разработки программного обеспечения  (Software Engineering Operations Tools)

В этом разделе рассматриваются инструменты, которые особенно важны при разработке программного обеспечения для максимально эффективного использования персонала. Автоматизация задач, связанных с разработкой, сопровождением и эксплуатацией, экономит инженерные ресурсы и повышает качество и скорость выполнения работ. При надлежащей реализации такие автоматизированные задачи, как правило, выполняются быстрее, проще и надежнее, чем если бы они выполнялись вручную разработчиками программного обеспечения и операционными инженерами. DevOps поддерживает такую автоматизацию для интеграции, создания, упаковки и развертывания надежных и безопасных систем. Он объединяет ресурсы и процедуры разработки, сопровождения и эксплуатации для выполнения CI, доставки, тестирования и развертывания.

Непрерывная поставка (CD) - это практика разработки программного обеспечения, которая использует автоматизированные средства для обеспечения частых выпусков новых систем (включая программное обеспечение) для промежуточных или различных тестовых сред. CD постоянно собирает новейший код и конфигурацию, начиная с head и заканчивая release candidates.

Непрерывное тестирование - это практика тестирования программного обеспечения, которая включает в себя тестирование программного обеспечения на каждом этапе жизненного цикла разработки программного обеспечения. Непрерывное тестирование направлено на оценку качества программного обеспечения на каждом этапе процесса разработки CD путем проведения раннего и частого тестирования. В непрерывном тестировании участвуют различные заинтересованные стороны, такие как разработчики, персонал DevOps, специалисты по контролю качества и конечные пользователи..

Непрерывное развертывание (оно же CD) - это автоматизированный процесс внедрения изменений в рабочую среду путем проверки предполагаемых функций и валидаций для снижения риска. Джез Хамбл и Дэвид Фарли  отметили, что “самый большой риск для любой разработки программного обеспечения заключается в том, что в конечном итоге вы создаете что-то бесполезное. Чем раньше и чаще вы будете знакомить реальных пользователей с работающим программным обеспечением, тем быстрее получите обратную связь, позволяющую понять, насколько оно действительно ценно”.

#### 6.1 Контейнеры и виртуализация (Containers and Virtualization)

Операционным инженерам доступны различные технологии контейнеризации/виртуализации и инструменты управления (также называемые оркестраторами), позволяющие повысить масштабируемость приложений и стандартизировать развертывание программного обеспечения у нескольких поставщиков компьютеров и серверов. Инженеры по эксплуатации используют свои знания о масштабах и сложности каждого проекта, чтобы определить наилучший инструмент для обеспечения гибкости, безопасности и мониторинга.

#### 6.2    Развертывание (Deployment)

Для управления развертыванием программного обеспечения в различных средах могут использоваться различные технологии и инструменты. Кроме того, различные инструменты обычно объединяются для охвата различных этапов и аспектов развертывания программного обеспечения, начиная от спецификации развертывания и настройки с использованием файлов-описателей и заканчивая автоматизированным развертыванием и управлением ресурсами производственной среды.

#### 6.3 Автоматизированное тестирование (Automated Test)

Чтобы обеспечить быструю и постоянную обратную связь с разработчиками, тестирование должно быть максимально автоматизировано на протяжении всего процесса поставки программного обеспечения, включая разработку и эксплуатацию. Для этого необходимо определить стратегию тестирования, охватывающую различные типы тестов (модульный тест, интеграционный тест, системный тест, приемочный тест пользователя), а также выбрать инструменты для поддержки и автоматизации различных этапов тестирования. Автоматизация тестирования имеет решающее значение для обеспечения постоянной обратной связи с инженерами-программистами, разрабатывающими код, и тем самым для повышения качества программного обеспечения.

#### 6.4 Мониторинг и телеметрия (Monitoring and Telemetry)

Мониторинг и телеметрия являются ключевыми аспектами разработки программного обеспечения. Они собирают данные на всех уровнях программной системы (включая приложение, операционную систему и сервер) и извлекают информацию, которая может быть использована для анализа и мониторинга различных аспектов системы с целью выявления проблем и отслеживания эволюции различных свойств. Джеймс Тернбулл описывает общую архитектуру системы мониторинга, используемую инженерными подразделениями во многих технологических организациях. Внедрение решений для мониторинга требует сочетания различных методов и инструментов для сбора данных на разных уровнях. Это включает журналы на уровне приложений, трассировки выполнения на уровне операционной системы и информацию об использовании ресурсов (например, процессора и памяти) на уровне сервера. Затем, основываясь на собранных данных, можно использовать различные методы аналитики (например, статистический анализ и методы машинного обучения) для извлечения соответствующей информации. Наконец, для визуализации извлеченной информации можно использовать информационные панели; для отображения соответствующей информации различным заинтересованным сторонам могут быть разработаны различные информационные панели.