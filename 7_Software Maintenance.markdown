# ГЛАВА 7

# ОБСЛУЖИВАНИЕ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE MAINTENANCE)

### АББРЕВИАТУРЫ (ABBREVIATIONS)

| | | |
|-- |-- |--|
|API |Application programming interface | Интерфейс прикладного программировани|
|CI | Continuous integration| Непрерывная интеграция|
|IEC |The international Electronics Engineers |Международная электротехническая комиссия |
|IEEE |The Institute of Electrical and Electronics Engineers | Институт инженеров электротехники и электроники|
|ISO |International	Organization for Standardization | Международная организация по стандартизации|
|KA | Knowledge area| Область знаний|
|LOC |Lines of code  | Строки кода|
| MR|Modification request | Запрос на изменение|
|PR | Problem report| Отчет о проблеме|
|SCM |Software configuration management | Управление конфигурацией программного обеспечения|
|SEE | Software engineering enviroment|Среда разработки программного обеспечения |
| SLA| Service-level agreement|Соглашение об уровне обслуживания |
|SLI |Service-level indicators  |Показатели уровня обслуживания |
|SLO |Service-level objectives |Цели на уровне обслуживания|
|SQA |Software quality assurance | Обеспечение качества программного обеспечения|
|V&V | Verification and validation| Проверка и валидация|
| XaaS| Anything as a service|Что угодно в качестве услуги |


## ВВЕДЕНИЕ (INTRODUCTION)

Результатом успешной разработки программного обеспечения является создание программного продукта, удовлетворяющего требованиям пользователей. По мере изменения этих требований и других факторов программный продукт должен развиваться: после ввода программного обеспечения в эксплуатацию обнаруживаются дефекты, меняются операционные среды и появляются новые требования пользователей. Этап технического обслуживания в жизненном цикле начинается по истечении гарантийного срока или после оказания поддержки после внедрения, но мероприятия по техническому обслуживанию выполняются гораздо раньше.Техническое обслуживание программного обеспечения является неотъемлемой частью жизненного цикла программного обеспечения. Однако ему не уделялось такого внимания, как другим видам деятельности по разработке программного обеспечения. Исторически сложилось так, что разработка программного обеспечения занимала гораздо более важное место, чем техническое обслуживание программного обеспечения. В настоящее время ситуация меняется, поскольку организации стремятся оптимизировать свои инвестиции в разработку программного обеспечения, обеспечивая непрерывную разработку, техническое обслуживание и эксплуатацию, постепенно устраняя организационные барьеры в этих областях. Растущее признание практик и инструментов DevOps привлекло дополнительное внимание к необходимости постоянного совершенствования программного обеспечения, обеспечивая при этом его бесперебойную работу в соответствии с требованиями пользователей, которые требуют от инженеров-программистов более быстрого обновления, чем в прошлом.

В данном руководстве SWEBOK техническое обслуживание программного обеспечения определяется как совокупность мероприятий, необходимых для обеспечения экономически эффективной поддержки программного обеспечения в процессе эксплуатации. Мероприятия по поддержке эксплуатации и техническому обслуживанию программного обеспечения выполняются на этапе подготовки к поставке и на этапе после поставки. Мероприятия, предшествующие доставке, включают планирование операций после доставки, техническое обслуживание

Результатом успешной разработки программного обеспечения является создание программного продукта, удовлетворяющего требованиям пользователей. По мере изменения этих требований и других факторов программный продукт должен развиваться: после ввода программного обеспечения в эксплуатацию обнаруживаются дефекты, меняются операционные среды и появляются новые требования пользователей. Этап технического обслуживания в жизненном цикле начинается по истечении гарантийного срока или после оказания поддержки после внедрения, но мероприятия по техническому обслуживанию выполняются гораздо раньше.

и определение материально-технической поддержки, необходимой для перехода от разработки к сопровождению.. Действия после поставки включают в себя мониторинг программного обеспечения, модификацию, обучение и управление или взаимодействие со службой технической поддержки.

Область знаний по сопровождению программного обеспечения (KA) связана со всеми другими аспектами разработки программного обеспечения. Таким образом, данное описание КА связано со всеми другими КА по разработке программного обеспечения в Руководстве.

## РАЗБИВКА ТЕМ ПО СОПРОВОЖДЕНИЮ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ ()

Разбивка тем по КА по сопровождению программного обеспечения приведена на рисунке 1.

### 1 Основы обслуживания программного обеспечения

В этом разделе представлены концепции и терминология, которые составляют основу для понимание роли и сферы применения технического обслуживания программного обеспечения. Среди этих понятий - различные категории технического обслуживания программного обеспечения. Изучение этих категорий имеет решающее значение для понимания того, что включает в себя эта область знаний и почему она так важна.

<div style="text-align:center">
<img src="Images/Chapter 5/7 глава.bmp"
alt="">
<br>Рисунок 1.1. Разбивка тем.
</div>

#### 1.1 Определения и терминология

Цель сопровождения программного обеспечения определена в международном стандарте по сопровождению программного обеспечения ISO/IEC/IEEE 14764 [1]. В контексте разработки программного обеспечения сопровождение программного обеспечения, по сути, является одним из многих технических процессов. Целью технического обслуживания программного обеспечения является модификация существующего программного обеспечения при сохранении его целостности. Международный стандарт также подчеркивает важность выполнения некоторых работ по техническому обслуживанию перед окончательной поставкой программного обеспечения (предварительная подготовка к поставке). Техническое обслуживание программного обеспечения делится знаниями и инструментами занимается разработкой и эксплуатацией программного обеспечения, а также имеет свои собственные процессы и методы

#### 1.2 Сущность обслуживания программного обеспечения (1.1.Definitions and Terminology)

Обслуживание программного обеспечения обеспечивает поддержку программного продукта на протяжении всего его жизненного цикла (от разработки до эксплуатации). Программное обеспечение проверяется на работоспособность, непрерывность и доступность. Запросы на внесение изменений (MRs) и отчеты об инцидентах или проблемах (PR) регистрируются и отслеживаются, определяется влияние предлагаемых изменений, код идругие программные продукты модифицируются, проводится тестирование и запускается в эксплуатацию новая версия программного продукта. Кроме того, пользователям предоставляется обучение и ежедневная постоянная поддержка. Специалист по сопровождению программного обеспечения определяется как должность или организация, выполняющая работы по техническому обслуживанию программного обеспечения. В данном случае этот термин иногда относится к лицам, выполняющим эти действия, чтобы противопоставить их роль роли разработчика программного обеспечения.

Специалисты по сопровождению могут извлечь уроки из знаний разработчиков и операторов о программном обеспечении. Своевременный контакт с разработчиками и вовлечение специалистов по сопровождению на раннем этапе могут снизить общие затраты на техническое обслуживание и затраты на усилия. Дополнительная проблема возникает, когда сопровождающие присоединяются к проекту после того, как первоначальные разработчики ушли или больше не доступны. Сопровождающие должны понимать и использовать программные артефакты разработки (например, код, тесты или документацию), немедленно поддерживать их и постепенно совершенствовать и поддерживать в рабочем состоянии.

#### 1.3 Необходимость технического обслуживания программного обеспечения (Nature of Software Maintenance)

Техническое обслуживание программного обеспечения необходимо для обеспечения того, чтобы программное обеспечение продолжало удовлетворять требованиям пользователей на протяжении всего срока его службы. Техническое обслуживание необходимо независимо от типа модели жизненного цикла программного обеспечения, используемой при его разработке (например, waterfall или Agile). Программные продукты изменяются в результате как корректирующих, так и некорректирующих действий. Техническое обслуживание программного обеспечения обычно выполняется для выполнения следующих действий:

- Устранения ошибок и скрытых дефектов
- Улучшать дизайн или производительность операционного программного обеспечения
- Внедрять усовершенствования
- Помочь пользователям разобраться в функциях программного обеспечения.
- Адаптироваться к изменениям в взаимодействующих системах или инфраструктуре
- Предотвращать угрозы безопасности
- Устранять техническое устаревание элементов системы или программного обеспечения
- Выводить программное обеспечение из эксплуатации

#### 1.4 Большая часть затрат на техническое обслуживание (Need for Software Maintenance)

Общепризнано, что относительная стоимость устранения ошибок возрастает на более поздних этапах жизненного цикла программного обеспечения. На техническое обслуживание также уходит значительная часть всех финансовых ресурсов, выделяемых на протяжении всего срока службы программного обеспечения. Распространено мнение, что техническое обслуживание программного обеспечения - это просто устранение неисправностей. Однако исследования и опросы, проведенные на протяжении многих лет, показали, что большая часть технического обслуживания программного обеспечения — более 80% — используется для улучшения и адаптации программного обеспечения [3]. Объединение улучшений и исправлений в управленческих отчетах способствует ошибочному представлению о том, что исправления стоят дороже, чем они есть на самом деле. Понимание категорий обслуживания программного обеспечения помогает нам понять структуру затрат на обслуживание программного обеспечения, то есть на что уходит большая часть этих расходов [7]. Кроме того, понимание факторов, влияющих на удобство обслуживания программного обеспечения, может помочь организациям снизить затраты. К факторам внешней среды, влияющим на затраты на обслуживание программного обеспечения, относятся следующие:

- Операционная среда (аппаратное и программное обеспечение)
- Организационная среда (политика, конкуренция, процессы, продукт и персонал)

#### 1.5 Эволюция программного обеспечения (Evolution of Software)

Техническое обслуживание программного обеспечения как деятельность, поддерживающая эволюцию программного обеспечения, впервые было рассмотрено в конце 1960-х годов. Исследования, проведенные Леманом и другими специалистами в течение двадцати лет, привели к формулировке восьми законов эволюции программного обеспечения:

- Постоянные изменения — программное обеспечение должно постоянно адаптироваться, иначе оно становится все менее удовлетворительным.
- Возрастающая сложность — по мере развития программного обеспечения его сложность возрастает, если не проводится работа по поддержанию или снижению этой сложности.
- Саморегулирование - Процесс разработки программы является саморегулирующимся с близким к нормальному распределением показателей характеристик продукта и процесса.
-  Неизменяемая скорость работы — средняя эффективная глобальная скорость работы в развивающемся программном пакете остается неизменной на протяжении всего срока службы продукта.
- Сохранение узнаваемости — по мере развития программного обеспечения все, кто с ним связан (например, разработчики, продавцы и пользователи), должны в совершенстве владеть его содержанием и поведением, чтобы добиться удовлетворительного развития. Чрезмерный рост снижает это мастерство. Следовательно, средний прирост остается неизменным по мере развития системы.
-  Непрерывный рост — функциональное наполнение программы должно постоянно увеличиваться, чтобы поддерживать удовлетворенность пользователей в течение всего срока ее службы.
-  Снижение качества — качество программного обеспечения, по-видимому, будет снижатьса если только он не будет тщательно обслуживаться и адаптироваться к изменениям в операционной среде.
- Система обратной связи — процессы разработки программного обеспечения представляют собой многоуровневые, многоконтурные, многоагентные системы обратной связи и должны рассматриваться как таковые для достижения значительных улучшений по сравнению с любой разумной базой (другими словами, процесс технического обслуживания аналогичен гибкому процессу).

Ключевые выводы исследования Lehman включают предположение о том, что техническое обслуживание - это эволюционное развитие и что принятие решений по техническому обслуживанию зависит от понимания того, что происходит с программным обеспечением с течением времени. Еще один способ представить техническое обслуживание как непрерывную разработку, которая учитывает дополнительные затраты (или ограничения) — другими словами, большие программы никогда не бывают завершенными и продолжают развиваться. По мере развития они становятся все более сложными, если не предпринимать действий по снижению этой сложности.

#### 1.6 Категории обслуживания программного обеспечения (Categories of Software Maintenance)

Для классификации запросов на техническое обслуживание были стандартизированы пять категорий (типов) технического обслуживания программного обеспечения: корректирующее, превентивное, адаптивное, добавочное и совершенное. Стандарт ISO/IEC/IEEE 14764 [1] группирует эти категории технического обслуживания как исправления или усовершенствования, как показано на рисунке 2.

<div style="text-align:center">
<img src="Images/Chapter 5/таблица.bmp"
alt="">
<br> Рисунок 2. Категории обслуживания программного обеспечения
</div>
<br> 

Стандарт ISO/IEC/IEEE 14764 [1] также определяет шестую категорию — аварийное обслуживание:

- Корректирующее обслуживание: реактивная модификация (или ремонт) программного продукта, выполняемая после поставки для устранения обнаруженных проблем.
-  Профилактическое обслуживание: модификация программного продукта после поставки для устранения скрытых неисправностей в программном продукте до того, как они возникнут в действующей системе.
- Адаптивное техническое обслуживание: модификация программного продукта, выполняемая после поставки, для обеспечения возможности использования программного продукта в измененной среде. Адаптивное обслуживание обеспечивает усовершенствования, необходимые для адаптации к изменениям в среде, в которой работает программный продукт (например, обновление операционной системы приводит к изменениям в приложениях).
- Дополнительное техническое обслуживание: модификация программного продукта, выполняемая после поставки с целью добавления функциональности или возможностей для улучшения использования продукта. Дополнительное техническое обслуживание отличается от полного технического обслуживания тем, что оно предоставляет дополнительные новые функции или возможности для улучшения удобства использования программного обеспечения производительность, ремонтопригодность или другие характеристики качества программного обеспечения, и оно добавляет функциональность или возможности с относительно большими дополнениями или изменениями для улучшения характеристик программного обеспечения после поставки.
- Оптимальное техническое обслуживание: Модификация программного продукта после поставки для предоставления улучшений пользователям, доработка программной документации и перекодирование для повышения производительности программного обеспечения, удобства обслуживания или других характеристик программного обеспечения.
- Экстренное техническое обслуживание: Внеплановая модификация, выполняемая для временного поддержания работоспособности системы в ожидании корректирующего технического обслуживания.

### 2 Ключевые проблемы при обслуживании программного обеспечения (Key Issues in Software Maintenanc)

Для обеспечения эффективного обслуживания программного обеспечения необходимо решить ряд ключевых проблем. Обслуживание программного обеспечения создает уникальные технические и управленческие проблемы для инженеров-программистов (например, проблема поиска неисправностей в большом сложном программном обеспечении, разработанном кем-то другим).

Аналогичным образом, в гибкой среде сопровождающие и разработчики постоянно стремятся к тому, чтобы клиенты видели ценность в конце каждой итерации, поэтому мероприятия по техническому обслуживанию должны конкурировать с разработкой новых функций для утверждения клиентами; планирование будущего выпуска, которое часто включает в себя кодирование

в следующем выпуске при рассылке экстренных исправлений для текущего выпуска также возникает проблема с балансировкой работы по техническому обслуживанию и разработке. В следующем разделе представлены технические проблемы и проблемы управления, связанные с обслуживанием программного обеспечения. Они сгруппированы по следующим темам:

- Технические проблемы
- Проблемы управления
- Затраты на обслуживание
- Измерение технического обслуживания.

#### 2.1 Технические вопросы (2.1.Technical Issues)

#### 2.1.1 Недостаточное понимание (Limited Understanding )

Ограниченное понимание - это первоначальное представление инженера-программиста о программном обеспечении, разработанном кем-то другим. Это отражается на том, насколько быстро инженер-программист может понять, где нужно внести изменения или исправить программное обеспечение. Исследования показывают, что около половины всех усилий по техническому обслуживанию приходится на понимание программного обеспечения, которое необходимо модифицировать. Естественно, что тема понимания программного обеспечения представляет большой интерес для инженеров-программистов. Был выделен ряд факторов понимания: 1) знание предметной области; 2) практика программирования (например, проблемы реализации); 3) документация; и 4) проблемы организации и представления. Понимание сложнее в текстовом представлении (например, в исходном коде), где часто бывает трудно проследить эволюцию программного обеспечения на протяжении его выпусков или версий, если изменения не документированы, а разработчики недоступны для их объяснения. Таким образом, инженеры-программисты могут изначально иметь ограниченное представление о программном обеспечении, и для исправления этого необходимо проделать большую работу. Различные методы могут помочь инженерам разобраться в существующем программном обеспечении, такие как визуализация и обратное проектирование с использованием графического представление кода на основе инструментов.

#### 2.1.2 Тестирование (Testing)

Планирование тестирования и другие действия выполняются во время обработки MRs и PRS. Повторное полное тестирование основного программного обеспечения обходится дорого как по времени, так и по деньгам. Чтобы убедиться, что модификация программного обеспечения подтверждена, специалист по сопровождению должен воспроизвести или подтвердить изменения, спланировав и выполнив соответствующие тесты — например, регрессионное тестирование важно при техническом обслуживании. Регрессионное тестирование - это выборочное повторное тестирование программного обеспечения или компонента для проверки того, что изменения не вызвали непредвиденных последствий. Еще одна проблема заключается в том, чтобы найти время для проведения как можно большего количества тестов. Координация тестов, когда разные члены команды технического обслуживания одновременно работают над разными проблемами, может быть сложной задачей. Перевод программного обеспечения в автономный режим для тестирования может быть затруднен, если программное обеспечение выполняет критически важные функции. В разделе "Тестирование программного обеспечения" содержится дополнительная информация и ссылки по тестированию программного обеспечения и его подразделу, посвященному регрессионному тестированию.

#### 2.1.3 Анализ воздействия (Impact Analysis)

Анализ воздействия - это полный анализ воздействия предлагаемого изменения в существующем программном обеспечении. Инженеры-программисты должны стремиться к тому, чтобы провести анализ как можно более экономично. Специалистам по сопровождению необходимы подробные знания о структуре и содержании программного обеспечения. Они используют эти знания для проведения анализа воздействия, который определяет все системы и программные продукты, на которые может повлиять запрос на изменение программного обеспечения, и

разрабатывает оценку ресурсов, необходимых для выполнения изменений. В ходе анализа также определяются риски, связанные с внесением изменений. Запрос на изменение, иногда называемый MR и часто называемый PR, сначала должен быть проанализирован и переведен на язык программного обеспечения. Анализ влияния выполняется после того, как запрос на изменение поступает в процесс управления конфигурацией программного обеспечения (SCM). В стандарте ISO/IEC/IEEE 14764 [1] указано, что задачи анализа влияния выполняются следующим образом:

- Разработать схему идентификации для MRs/PRs.
- Разработать схему категоризации и определения приоритетов MRs/PRS
- Определить процедуры отправки оператором MR/PR-запроса
- Определить информационные потребности и проблемы, которые необходимо отслеживать и сообщать пользователям, а также определить меры, обеспечивающие обратную связь по этим информационным потребностям и проблемам
- Определить, как операторам будут предоставляться временные обходные пути
- Отслеживайте все возможные действия вплоть до удаления
- Определите, какие последующие отзывы будут предоставлены пользователям

Специалисты по сопровождению программного обеспечения часто используют серьезность проблемы в качестве ориентира при принятии решения о том, как и когда ее устранить. Затем специалист по сопровождению определяет уязвимые компоненты, разрабатывает несколько возможных решений и, наконец, рекомендует план действий.

При анализе влияния предлагаемых изменений в обслуживании часто учитываются различные факторы, такие как категория действий по техническому обслуживанию, масштаб модификации, связанные с этим затраты, необходимые для внесения изменений, а также любые последствия для производительности, надежности и защищенности. Разработка программного обеспечения с учетом удобства обслуживания значительно облегчает анализ влияния.

Более подробную информацию можно найти в разделе Управление конфигурацией программного обеспечения.

#### 2.1.4 Надежность (Maintainability)

Стандарт ISO/IEC/IEEE 14764 [1] определяет ремонтопригодность как возможность модификации программного продукта. Модификации могут включать исправления, усовершенствования или адаптацию программного обеспечения к изменениям в окружающей среде, а также изменения в требованиях и функциональных спецификациях.

В качестве важной характеристики качества программного обеспечения следует определять, анализировать и контролировать удобство обслуживания в процессе разработки программного обеспечения, чтобы снизить затраты на техническое обслуживание. При успешном выполнении этих работ улучшается удобство обслуживания программного обеспечения. Часто бывает трудно обеспечить удобство обслуживания, поскольку оно часто не является основным при разработке программного обеспечения. Разработчики, как правило, больше сосредоточены на других видах деятельности и могут не уделять достаточного внимания требованиям к удобству обслуживания. Это может привести к неправильной архитектуре, отсутствию документации по программному обеспечению или тестовых сред, что является основной причиной трудностей с пониманием программы и последующим анализом последствий при обслуживании. Наличие систематизированных и продуманных процессов, методов и инструментов разработки программного обеспечения помогает повысить удобство обслуживания программного обеспечения.

Нарушения в обслуживании программного обеспечения, как правило, увеличивают нагрузку на инженеров-программистов, которые будут обслуживать программное обеспечение в будущем; другими словами, это создает техническую задолженность. Техническая задолженность обычно возникает, когда инженеры-программисты пытаются завершить разработку или техническое обслуживание до того, как они пройдут тщательную экспертизу.

Такая практика, как правило, приводит к возникновению технической задолженности, решение которой потребует дополнительного времени и усилий в процессе сопровождения. В частности, инженеры-программисты должны тщательно изучить три области при решении технической задолженности:

1. Соотношение качества кода и актуальности: Не все технические проблемы являются неотложными.
2. Соответствие задачам организации: Архитектура программного обеспечения должна отражать цели организации.
3. Потери в процессе: Необходимо обеспечить дополнительные навыки задействованных инженеров-программистов.

#### 2.2 Проблемы управления (Management Issues)

#### 2.2.1 Соответствие целям организации (Alignment with Organizational Objectives )

В этом разделе описывается, как оптимизировать деятельность по обслуживанию программного обеспечения и экономическую эффективность в соответствии с целями организации и приоритетами бизнеса, заказчиков и пользователей.

Во многих организациях первоначальная разработка программного обеспечения осуществляется на основе проекта с определенными сроками и бюджетом. Основная цель - предоставить продукт, отвечающий потребностям пользователей, в срок и в рамках бюджета. Напротив, техническое обслуживание программного обеспечения направлено на продление срока службы программного обеспечения и обеспечение его работоспособности как можно дольше. Кроме того, это может быть вызвано необходимостью удовлетворения потребностей пользователей в обновлениях и усовершенствованиях программного обеспечения.

В обоих случаях экономический эффект от сопровождения программного обеспечения не так очевиден, как от разработки программного обеспечения. На организационном уровне это может рассматриваться как деятельность, требующая значительных ресурсов и не приносящая четкой, количественно измеримой выгоды для организации. Как

как следствие, добавлению новых функций часто уделяется более приоритетное внимание, чем другим мероприятиям по техническому обслуживанию (таким как рефакторинг, повышение безопасности или производительности), чтобы соответствовать целям и задачам заказчиков программного обеспечения, а также с учетом таких ограничений, как время и бюджет. Однако такие организационные цели и ограничения должны быть сбалансированы с удобством обслуживания программного обеспечения и инженерными стандартами, чтобы избежать разрушения кода и технической задолженности.

Применение подходов управления продуктами к управлению разработкой и сопровождением программного обеспечения может помочь организациям:

- Понять общую стоимость эксплуатируемого программного обеспечения на протяжении всего его жизненного цикла
- Сравнить затраты и выгоды от разработки нового программного обеспечения с улучшением существующего программного обеспечения.
- Решите проблемы с персоналом и квалификацией, поскольку одна и та же команда может отвечать за обслуживание и разработку
- С самого начала уделяйте больше внимания требованиям к техническому обслуживанию, поскольку одна и та же команда отвечает как за разработку, так и за обслуживание

#### 2.2.2 Укомплектование персоналом (Staffing)

Поскольку техническое обслуживание программного обеспечения требует детального знания программного обеспечения, организации должны осознавать необходимость привлечения и удержания персонала по техническому обслуживанию программного обеспечения. Поскольку выполнение только технического обслуживания может восприниматься как менее интересное занятие, разработчики программного обеспечения могут чувствовать себя “гражданами второго сорта”, и в результате может пострадать моральный дух, что приведет к низкой производительности или высокой текучести кадров. Организациям необходимо тщательно продумывать команды и роли разработчиков и сопровождающих, а также предоставлять возможности профессионального развития своим сотрудникам.

#### 2.2.3 Процесс (Process)

Процесс жизненного цикла программного обеспечения - это набор действий, методов, практик и преобразований, которые люди используют для разработки и сопровождения программного обеспечения и связанных с ним продуктов. На технологическом уровне деятельность по сопровождению программного обеспечения имеет много общего с разработкой программного обеспечения (например, SCM является ключевым видом деятельности в обоих случаях). Техническое обслуживание также требует выполнения ряда действий, которых нет в разработке программного обеспечения. (см. раздел 3.2.)

#### 2.2.4 Управление поставщиками (Supplier Management)

Управление поставщиками обеспечивает надлежащее управление поставщиками организации и их производительностью для обеспечения бесперебойного предоставления качественных продуктов и услуг при заключении контрактов на техническое обслуживание с поставщиками. Характер взаимоотношений организации с поставщиками и ее подход к управлению поставщиками должны определяться характером этих продуктов и услуг. Для выполнения задач технического обслуживания можно нанять подрядчиков, а обслуживание программного обеспечения на аутсорсинге или офшоринге является важной отраслью промышленности. Аутсорсинг технического обслуживания означает замену внутренних возможностей на возможности внешнего поставщика. Подходы к контрактному техническому обслуживанию включают следующее:

- Единый источник или партнерство: один поставщик предоставляет все услуги, или внешний сервисный интегратор управляет взаимоотношениями организации со всеми поставщиками.
- Широкий спектр поставщиков: продукты и услуги предоставляются более чем один независимый поставщик. Они объединены в единую услугу (с поддержкой программного обеспечения). Все более распространенным становится использование нескольких источников в программных услугах, чему способствует развитие “всего как услуги” (XaaS), интерфейсов прикладного программирования (API) и источников данных.

Многие организации передают на аутсорсинг целые портфели программного обеспечения. Как правило, эти портфели включают программное обеспечение, которое не является критически важным, поскольку организации не хотят терять контроль над программным обеспечением, используемым в их основной деятельности. Одной из основных задач, стоящих перед аутсорсерами, является определение объема требуемых услуг по техническому обслуживанию, условий соглашения об уровне обслуживания (SLA) и деталей контракта. Аутсорсерам необходимо инвестировать в хорошую коммуникационную инфраструктуру и эффективную службу поддержки, укомплектованную людьми, способными эффективно взаимодействовать с клиентами и пользователями . Аутсорсинг требует значительных первоначальных инвестиций, а также настройки и анализа процессов обслуживания программного обеспечения, требующих автоматизации.

#### 2.2.5 Организационные аспекты технического обслуживания (Organizational Aspects of Maintenance)

Организационные аспекты сопровождения включают определение того, какие команды будут отвечать за обслуживание программного обеспечения. При использовании гибких моделей жизненного цикла разработчик также выполняет задачи по техническому обслуживанию, выступая одновременно в качестве разработчика и сопровождающего. Другие организации предпочитают, чтобы команда, разрабатывающая программное обеспечение, не обязательно выполняла его техническое обслуживание после ввода в эксплуатацию. При принятии решения о том, где будет размещаться служба поддержки программного обеспечения, организации, занимающиеся разработкой программного обеспечения, должны учитывать преимущества и недостатки каждой альтернативы. Существует ряд недостатков в том, что разработчик также поддерживает программного обеспечения после его запуска в производство, например, риск того, что новая разработка будет прервана, когда разработчикам придется устранять сбои, и потенциальная потеря знаний, когда разработчики покинут организацию, поскольку с программным обеспечением знакомо меньшее количество людей; это также может привести к снижению качества документации, поскольку меньшее количество в этом замешаны отдельные люди. Однако наличие отдельной функции обслуживания также сопряжено с определенными трудностями, поскольку многим инженерам-программистам не нравится ограничивать свою работу техническим обслуживанием и они с большей вероятностью уйдут на более интересную работу. Кроме того, между разработчиками и сопровождающими должен быть налажен процесс передачи функций, что иногда приводит к трениям между командами .

Внедрение процессов управления продуктами способствовало внедрению командного подхода, особенно при разработке и обслуживании программного обеспечения, которое должно быстро реагировать на изменения в потребностях клиентов и пользователей. Поскольку у каждого варианта есть много плюсов и минусов, решение следует принимать в каждом конкретном случае. Важно, чтобы организация делегировала задачи по техническому обслуживанию опытной группе или специалисту и вела качественную документацию по задачам по техническому обслуживанию и всем изменениям, внесенным в программное обеспечение, независимо от структуры организации.

#### 2.3 Расходы на техническое обслуживание программного обеспечения (Software Maintenance Costs)

Инженеры-программисты должны понимать различные категории обслуживания программного обеспечения, описанные в разделе 1.6. Представление тенденций затрат по категориям обслуживания может показать заказчикам, какие затраты на обслуживание затрачиваются на каждую поддерживаемую систему . Данные о затратах на обслуживание по категориям также могут быть использованы для точной оценки стоимости обслуживания программного обеспечения. Оценка затрат - это важный аспект планирования технического обслуживания программного обеспечения.

#### 2.3.1 Оценка стоимости технического долга (Technical	Debt	Cost	Estimation)

Техническая задолженность обычно приводит к тому, что обслуживание кода обходится дороже, чем это необходимо. Техническая задолженность представляет собой затраты на устранение проблем, которые остаются в коде после выпуска приложения. Несколько методов и показателей могут помочь инженерам оценить технический долг, в том числе размер, сложность и количество технических ошибок и нарушений надлежащего архитектурного проектирования и практики кодирования в исходном коде. ISO/IEC/IEEE 14764 содержит рекомендации по улучшению удобства сопровождения, в том числе: обеспечение разборчивости, использование структурированного кода, снижение сложности кода, предоставление точных комментариев к коду, использование идентификаторов и пробелов, устранение языковых недостатков и зависимых от компилятора конструкций, упрощение отслеживания ошибок, обеспечение прослеживаемости кода при разработке, проведении проверок и кодировании. рецензии.Программный продукт должен развиваться, добавляя новые функции и возможности, а его кодовая база должна оставаться удобной для обслуживания, легко понимаемой и легко поддающейся дальнейшему развитию. Распространенным препятствием на пути решения проблемы технической задолженности — или, по сути, реализации любых потенциальных улучшений — является неопределенность вознаграждения за это. Вот почему организациям так важно определить следующее:

- Качество их текущего программного обеспечения
- Текущую стоимость их технической задолженности
- Потенциальная экономия от инвестиций в повышение качества
- Влияние текущих проблем с качеством на их бизнес

Кроме того, техническая задолженность является лишь одним из факторов, приводящих к избыточной незапланированной работе.

Проблемы в работе команды или в процессе также могут потребовать понимания и решения. Современные инструменты могут помочь выявить такие проблемы, что означает, что с технической задолженностью следует обращаться не изолированно, а путем изучения ее коренных причин.

#### 2.3.2 Оценка затрат на техническое обслуживание (Maintenance     Cost      Estimation)

Оценка затрат на техническое обслуживание программного обеспечения должна быть подготовлена на ранней стадии процесса планирования программного обеспечения [1, c6s1.4]. Затраты должны зависеть от объема работ по техническому обслуживанию. В стандарте ISO/IEC/IEEE 14764 [1, c7s2.4] определены различные факторы, которые следует учитывать, например, следующие:

- Поездки в места расположения пользователей
- Обучение как сопровождающих, так и пользователей
- Стоимость и ежегодное обслуживание среды разработки программного обеспечения (SEE) и тестирования программного обеспечения
- Расходы на персонал (например, заработная плата, льготы)
- Затраты на другие ресурсы, такие как расходные материалы
- Расходы на обслуживание лицензий на программное обеспечение
- Внесение изменений в продукт, управление программами
- Выездные сервисные инженеры
- Аренда помещений для технического обслуживания

Более того, по мере продвижения работ по техническому обслуживанию и разработке, оценки должны корректироваться. Данные прошлых измерений следует использовать в качестве исходных данных для оценки затрат на техническое обслуживание. Кроме того, оценки затрат также требуются при анализе воздействия MR или PR. Должен быть описан метод оценки затрат (например, параметрическая модель, сравнение с аналоговыми системами, использование эмпирических и исторических данных). Оценки отдельных MRs или PR обычно включают предполагаемые усилия, связанные с выполнение изменения, оценка ресурсов и предполагаемый график внедрения изменения.

#### 2.4 Измерение технического обслуживания программного обеспечения (Software Maintenance Measurement)

Поддающиеся измерению артефакты технического обслуживания программного обеспечения включают процессы технического обслуживания, ресурсы и продукты [2*, c12s12.3.1]. Показатели включают размер, сложность, качество, понятность, ремонтопригодность и затраты труда. Одним из полезных показателей является количество усилий (в пересчете на ресурсы), затрачиваемых на корректирующее, профилактическое, адаптивное, дополнительное и совершенное техническое обслуживание.

Показатели сложности и технического долга программного обеспечения также могут быть получены с помощью доступных инструментов. Эти показатели являются хорошей отправной точкой для оценки качества программного обеспечения. Специалисты по сопровождению должны определить, какие показатели подходят для конкретной организации, исходя из потребностей этой организации. Программы измерения программного обеспечения обсуждаются в разделе "Управление разработкой программного обеспечения".

Модель качества программного обеспечения, описанная в Руководстве по качеству программного обеспечения, описывает показатели программного продукта и процесса, характерные для обслуживания программного обеспечения. Измеряемые характеристики ремонтопригодности включают следующее:

- Модульность определяет степень, в которой система или программное обеспечение состоит из независимых компонентов, так что изменение одного компонента оказывает минимальное влияние на другие компоненты.
- Возможность повторного использования определяет, насколько эффективно компонент может быть использован повторно.
- Анализируемость измеряет усилия или ресурсы, которые сопровождающий должен затратить для диагностики недостатков или причин неисправности или для определения компонентов, которые необходимо модифицировать.
- Модифицируемость измеряет усилия разработчиков, связанные с внедрением указанной модификации без появления дефектов или ухудшения качества существующего продукта.
- Тестируемость измеряет усилия разработчиков и пользователей, затрачиваемые на тестирование модифицированного программного обеспечения.

К другим показателям, используемым разработчиками программного обеспечения, относятся следующие:

- Надежность: степень, в которой система или программное обеспечение выполняет определенные функции в определенных условиях в течение определенного периода времени, включая следующие характеристики:
Надежность: Насколько хорошо система или программное обеспечение могут удовлетворить потребность в надежности.
Доступность: является ли система или программное обеспечение работоспособными и доступными.
Устойчивость к сбоям: насколько хорошо система или программное обеспечение работает, несмотря на аппаратные или программные сбои или восстанавливаемость: насколько хорошо система или программное обеспечение могут восстанавливать данные во время прерывания или сбоя
Размер программного обеспечения (например, функциональный размер, LOC)
- Количество запросов на обслуживание в разбивке по периодам времени
- Затраты на каждый запрос на обслуживание
- Характеристики программного обеспечения (например, платформа, аппаратное обеспечение, язык программирования, фреймворки)

Меры по техническому обслуживанию могут быть собраны, проанализированы и распределены по категориям, чтобы облегчить совершенствование и дать представление о том, на что расходуются затраты на техническое обслуживание. Информация о затратах на техническое обслуживание программного обеспечения для различных приложений, приведенная в разбивке по категориям, является ценной бизнес-информацией для пользователей и их организаций. Это также может позволить организации провести внутреннее сравнение профилей обслуживания программного обеспечения [7].

### 3 Процессы сопровождения программного обеспечения (Software Maintenance Processes)

В дополнение к стандартным процессам и действиям по разработке программного обеспечения, описанным в стандарте ISO/IEC/IEEE 14764 [1], ряд действий является уникальным для разработчиков.

#### 3.1 Процессы сопровождения программного обеспечения (Software Maintenance Processes)

Процессы технического обслуживания обеспечивают необходимые действия и подробные входные и выходные данные для этих действий, как описано в стандарте ISO/IEC/IEEE 14764 [1]. Техническое обслуживание является одним из процессов технического жизненного цикла, представленных в стандарте ISO/IEC/IEEE 12207 [9]. На рисунке 3 показано, как процессы технического обслуживания связаны с другими процессами разработки программного обеспечения, которые взаимодействуют для поддержки работы программного обеспечения. Процессы технического обслуживания программного обеспечения включают в себя следующее:

- Подготовка к техническому обслуживанию
- Выполнение технического обслуживания
- Выполнение логистической поддержки
- Управление результатами технического обслуживания и логистики

<div style="text-align:center">
<img src="Images/Chapter 5/Снимок1.bmp"
alt="">
<br>Рисунок 3. Процессы сопровождения программного обеспечения (ISO/IEC/IEEE 14764)
</div>
<br>

В последнее время гибкие методологии, способствующие упрощению процессов, также были адаптированы для технического обслуживания. Это требование возникло в связи с постоянно растущим спросом на быстрое выполнение работ по техническому обслуживанию. Совершенствование процессов сопровождения программного обеспечения поддерживается моделями зрелости сопровождения программного обеспечения.

#### 3.2 Действия и задачи по сопровождению программного обеспечения (Software	Maintenance	Activities and Tasks)

Процесс технического обслуживания включает в себя действия и задачи, необходимые для эксплуатации и модификации существующей программной системы при сохранении ее целостности. За эти действия и задачи отвечают оператор и сопровождающий. Как уже отмечалось, многие действия по техническому обслуживанию аналогичны действиям по разработке программного обеспечения. Специалисты по сопровождению выполняют анализ, проектирование, кодирование, тестирование и документирование. Они должны отслеживать требования в своей деятельности — как и в процессе разработки — и обновлять документацию по мере изменения базовых показателей. ISO/IEC/IEEE 14764
рекомендует, чтобы при использовании разработчиком процесса разработки этот процесс был адаптирован к конкретным потребностям.

Однако существует ряд процессов, действий и практик, которые специализированы на обслуживании программного обеспечения:

- Понимание программы: включает в себя действия, необходимые для получения общих знаний о том, что делает программный продукт и как его части работают вместе.
- Переход: Это контролируемая и скоординированная последовательность действий, в ходе которых программное обеспечение постепенно передается от разработчика команде по эксплуатации и техническому обслуживанию.
- Принятие/отклонение MR: Модификации, требующие выполнения работ, превышающих согласованный объем, трудоемкость или уровень сложности, могут быть отклонены сопровождающими и перенаправлены разработчику.
- Служба технической поддержки: Служба технической поддержки - это функция поддержки, координируемая конечными пользователями и обслуживанием, которая запускает оценку, определение приоритетов и стоимости MRS и инцидентов.
- Анализ воздействия: Анализ воздействия определяет области, на которые могут повлиять потенциальные изменения.
- Индикаторы уровня технического обслуживания (SLI), цели уровня обслуживания (SLO), соглашения об уровне обслуживания, а также программное обеспечение для технического обслуживания и лицензии и контракты на оборудование: Это договорные соглашения, в которых описываются услуги и цели в области качества третьих сторон.

#### 3.2.1 Деятельность по поддержке и мониторингу (Supporting and Monitoring Activities)

Специалисты по сопровождению могут также выполнять текущие действия по поддержке, такие как документирование, SCM, проверка и валидация (V&V), решение проблем, обеспечение качества программного обеспечения (SQA), обзоры и аудиты. Еще одной важной деятельностью по управлению результатами технического обслуживания является мониторинг удовлетворенности клиентов.

#### 3.2.2 Планирование мероприятия (lanning Activities)

Важным видом деятельности по техническому обслуживанию программного обеспечения является планирование, и этот процесс должен учитывать проблемы, связанные с рядом аспектов планирования, включая следующие:

- Бизнес-планирование (организационный уровень)
- Планирование технического обслуживания (переходный уровень)
- Планирование выпуска/версии (программный уровень)
- Планирование индивидуальных запросов на изменение программного обеспечения (уровень запросов)

На уровне индивидуальных запросов планирование выполняется во время анализа воздействия. (см. раздел 2.1.3, Анализ воздействия.) Для планирования выпуска/версии требуется, чтобы сопровождающий выполнил следующее:

- Сбор информации о датах доступности отдельных запросов
- Согласовывать с пользователями содержание последующих выпусков/версий
- Выявлять потенциальные конфликты и разрабатыватm альтернативы
- Оцените риск, связанный с данным выпуском, и разработайте план действий на случай возникновения проблем.
- Информировать все заинтересованные стороны

В то время как проекты по разработке программного обеспечения обычно длятся от нескольких месяцев до нескольких лет, этап технического обслуживания обычно длится много лет. Оценка ресурсов является ключевым элементом планирования технического обслуживания. Планирование технического обслуживания программного обеспечения должно начинаться с принятия решения о разработке нового программного продукта и должно учитывать цели в области качества. Следует разработать концептуальный документ, за которым последует план технического обслуживания, и в нем должны быть указаны следующие вопросы:

- Объем технического обслуживания программного обеспечения
- Адаптация процессов и инструментов технического обслуживания программного обеспечения
- Определение организации, занимающейся техническим обслуживанием программного обеспечения
- Оценка затрат на обслуживание программного обеспечения.

План технического обслуживания программного обеспечения должен быть подготовлен во время разработки программного обеспечения и должен указывать, как пользователи будут запрашивать изменения и сообщать о проблемах. Планирование технического обслуживания программного обеспечения описано в стандарте ISO/IEC/IEEE 14764 [1]. Наконец, на самом высоком уровне управления обслуживающая организация должна осуществлять бизнес-планирование обслуживания программного обеспечения (например, коммуникационную, бюджетную, финансовую и кадровую деятельность). 

#### 3.2.3 Управление конфигурацией (Configuration Management)

Стандарт ISO/IEC/IEEE 14764 [1] описывает SCM как систему или сервис, обеспечивающий поддержку процесса технического обслуживания. Процедуры SCM

следует предусмотреть проверку, валидацию и аудит каждого шага, необходимого для идентификации, авторизации, внедрения и выпуска программного продукта и его ИТ-активов, подвергающихся изменениям.

Недостаточно отслеживать только MRs или PRS. Необходимо контролировать любые изменения, вносимые в программный продукт и его базовую инфраструктуру. Этот контроль осуществляется путем внедрения и обеспечения соблюдения утвержденного процесса SCM. В SCM KA более подробно рассматривается SCM, а также процесс отправки, оценки и утверждения запросов на внесение изменений. SCM для сопровождения программного обеспечения отличается от SCM для разработки программного обеспечения количеством небольших изменений, которые необходимо контролировать в операционной среде. Процесс SCM реализуется путем разработки и соблюдения плана SCM и операционных процедур. Специалисты по сопровождению участвуют в работе советов по управлению конфигурацией, чтобы определить содержание следующего выпуска или версии в рабочей среде.

#### 3.2.4 Качество программного обеспечения (Software Quality)

Недостаточно просто надеяться на то, что обслуживание программного обеспечения приведет к повышению качества программного обеспечения. Специалисты по сопровождению должны иметь эффективную программу обеспечения качества. Они должны внедрять процессы, способствующие постоянному совершенствованию процессов обслуживания программного обеспечения. Мероприятия и методы для SQA, V&V, проверок и аудитов должны выбираться в соответствии со всеми другими процессами для достижения желаемого уровня качества. Также рекомендуется, чтобы как при эксплуатации программного обеспечения, так и при его обслуживании были адаптированы и использовались результаты процесса разработки программного обеспечения, его методы и конечные результаты (например, инструменты тестирования и документация), а также результаты тестирования. Более подробную информацию о качестве программного обеспечения можно найти в разделе "Качество программного обеспечения".

### 4 Методы сопровождения программного обеспечения (Software Maintenance Techniques)

В этом разделе представлены общепринятые методы, используемые при обслуживании программного обеспечения.

#### 4.1 Понимание программ (Program Comprehension)

Программисты тратят значительное время на чтение и понимание программ, чтобы внести изменения. Обозреватели кода являются ключевыми инструментами для понимания программы и используются для организации и представления исходного кода. Ясная и краткая документация также способствует пониманию программы.

#### 4.2 Реинжиниринг программного обеспечения (Software Reengineering)


Реинжиниринг программного обеспечения - это изучение и изменение программного обеспечения с целью его воссоздания в новой форме. Он включает в себя последующее внедрение новой формы. Часто это делается не для улучшения удобства обслуживания, а для замены устаревающего программного обеспечения.

Рефакторинг - это метод реинжиниринга, целью которого является реорганизация программы без изменения ее поведения. Рефакторинг направлен на улучшение внутренней структуры и удобства обслуживания программного обеспечения. Методы рефакторинга могут быть использованы во время работ по техническому обслуживанию для очистки кодовой базы до и после внесения изменений в код.
В контексте гибкой разработки программного обеспечения постепенный характер непрерывной интеграции (CI) часто требует постоянного рефакторинга кода для поддержания его качества и надежности. Следовательно, непрерывный рефакторинг поддерживает нестабильный жизненный цикл программного обеспечения, предоставляя лучшие способы снижения сложности программных систем и управления ими при одновременном повышении производительности разработчиков.

#### 4.3 Обратное проектирование (Reverse Engineering)

Обратный инжиниринг - это процесс анализа программного обеспечения с целью идентификации компонентов программного обеспечения и их взаимосвязей и создания представлений программного обеспечения в другой форме или на более высоких уровнях абстракции. Обратный инжиниринг является пассивным; он не изменяет программное обеспечение и не приводит к созданию нового программного обеспечения. При обратном проектировании обычно создаются графические представления различных программных артефактов, таких как графики вызовов и потоков управления, из исходного кода. К типам обратного проектирования относятся следующие: 

- Повторное документирование
- Восстановление проекта
- Реверс—инжиниринг данных - восстановление логических схем из физических баз данных.

Инструменты являются ключевыми для реверс-инжиниринга и связанных с ним задач, таких как повторное документирование и восстановление дизайна. Визуализация программного обеспечения - это распространенный метод реверс-инжиниринга, который помогает инженерам исследовать, анализировать и понимать структуру программных систем, а также их разработку и эволюцию. Визуализация программного обеспечения включает в себя визуальное кодирование и анализ программных систем, включая методы разработки программного обеспечения, эволюцию, структуру и поведение программного обеспечения во время выполнения, с использованием визуализации информации, компьютерной графики и взаимодействия человека и компьютера. Как правило, инструменты визуализации программного обеспечения сопровождаются различными функциями обеспечения качества, такими как показатели качества расчет, оценка технической задолженности и выявление ошибок в проектировании и кодировании (запах кода).

#### 4.4 Непрерывная интеграция, поставка, тестирование и развертывание (Continuous Integration, Delivery, Testing and Deployment)

Автоматизация задач, связанных с разработкой, эксплуатацией и техническим обслуживанием, экономит инженерные ресурсы. При надлежащей реализации такие автоматизированные задачи, как правило, выполняются быстрее, проще и надежнее, чем если бы они выполнялись вручную. Согласно стандарту ISO14764, автоматизация включает распространение и установку программного обеспечения. DevOps поддерживает такую автоматизацию при создании, упаковке и развертывании надежных и безопасных систем. Она объединяет ресурсы и процедуры разработки, эксплуатации и технического обслуживания для выполнения CI, доставки, тестирования и развертывания. 

CI - это практика разработки программного обеспечения, которая постоянно объединяет артефакты, включая обновления исходного кода от всех разработчиков в команде, в общую магистраль для создания и тестирования разработанной системы. С помощью CI члены команды могут часто интегрировать свои изменения, и каждая интеграция может быть проверена с помощью автоматизированной сборки (включая тестирование) для максимально быстрого обнаружения ошибок интеграции. Основная цель CI - автоматически выявлять проблемные изменения как можно раньше. CI помогает гарантировать рабочее состояние программной системы на различных этапах от сборки до выпуска, тем самым повышая доверие к программным продуктам и их качество, а также производительность команд. В частности, CI автоматизирует процессы сборки и выпуска за счет непрерывной сборки, непрерывной доставки, непрерывного тестирования и непрерывного развертывания.

Непрерывная поставка - это практика разработки программного обеспечения, которая позволяет часто выпускать новые системы (включая программное обеспечение) в промежуточных или различных тестовых средах с помощью автоматизированных средств. Непрерывная поставка обеспечивает непрерывную сборку новейшего кода и конфигурации для создания версий-кандидатов.

Непрерывное тестирование - это практика тестирования программного обеспечения, которая включает в себя тестирование программного обеспечения на каждом этапе жизненного цикла разработки программного обеспечения. Цель непрерывного тестирования - оценить качество программного обеспечения на каждом этапе процесса непрерывной поставки путем проведения раннего и частого тестирования. В непрерывном тестировании участвуют различные заинтересованные стороны, такие как разработчики и команды DevOps, SQA и операционных систем.

Непрерывное развертывание - это автоматизированный процесс внедрения изменений в рабочую среду путем проверки предполагаемых функций и валидаций для снижения риска. Как отметил Мартин Фаулер в книге “Непрерывная поставка", "Самый большой риск для любого программного обеспечения заключается в том, что в конечном итоге вы создаете что-то бесполезное. Чем раньше и чаще вы будете знакомить реальных пользователей с работающим программным обеспечением, тем быстрее получите обратную связь, чтобы понять, насколько оно на самом деле ценно”.

### 5 Инструменты сопровождения программного обеспечения (Software Maintenance Tools)

В этом разделе рассматриваются инструменты, которые особенно важны для программного обеспечения при обслуживании существующего программного обеспечения вносятся изменения. Инструменты сопровождения взаимосвязаны со средствами разработки и эксплуатации. Все вместе они являются частью SEE. Ниже приведены примеры инструментов сопровождения:

- Инструменты управления конфигурацией, контроля версий и проверки кода
- инструменты тестирования программного обеспечения,
- Инструменты оценки качества программного обеспечения (для оценки технической задолженности и качества кода)
- Разделители программ, которые выбирают только те части программы, на которые повлияли изменения
- Статические анализаторы, которые позволяют просматривать общее содержимое программы и составлять сводки по нему
- Динамические анализаторы, которые позволяют разработчику отслеживать путь выполнения программы
- Анализаторы потоков данных, которые позволяют разработчику отслеживать все возможные потоки данных программы
- Средства перекрестных ссылок, которые генерируют индексы компонентов программы
- Анализаторы зависимостей, которые помогают разработчикам анализировать и понимать взаимосвязи между компонентами программы

Инструменты обратного проектирования поддерживают этот процесс, работая в обратном направлении с существующим продуктом для создания артефактов, таких как спецификации и описания дизайна, которые затем могут быть преобразованы для создания нового продукта на основе старого. Сопровождающие также используют тесты программного обеспечения, SCM, документацию по программному обеспечению и средства измерения программного обеспечения.