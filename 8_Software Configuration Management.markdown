# ГЛАВА 8 

## УПРАВЛЕНИЕ КОНФИГУРАЦИЕЙ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ (SOFTWARE CONFIGURATION MANAGEMENT)

### АББРЕВИАТУРЫ (ABBREVIATIONS)

| | | |
|-- |-- |-- |
|CCB |Configuration control board |Панель управления конфигурацией |
|CI |Configuration item | Элемент конфигурации|
|CM |Configuration management |Управление конфигурацией |
| FCA|Functional configuration audit  |Аудит функциональной конфигурации |
| PCA | Physical configuration audit | Аудит физической конфигурации|
|QA  | Quality assurance| Гарантия качества|
|SCCB | Software configuration control board| Панель управления конфигурацией программного обеспечения|
| SCI|Software configuration item | Элемент настройки программного обеспечения|
| SCM| Software configuration management | Управление конфигурацией программного обеспечения|
|SCMP | Software configuration management plan|План управления конфигурацией программного обеспечения |
| SCR|Software change request | Запрос на изменение программного обеспечения|
| SCSA|Software configuration status accounting |Учет состояния конфигурации программного обеспечения |
| CMMI|Capability Maturity model Integration | Интеграция модели зрелости возможностей|
| SLCP |Software life cycle process  | Процесс жизненного цикла программного обеспечения|
|SQA |Software quality assurance  |Обеспечение качества программного обеспечения |
|V&V |Verification and validation |Проверка и валидация |
|KA |Knowledge area | Область знаний|
|MBX |Model Based Experience  |Опыт, основанный на модели |
|SBOM |Software Bill of Materials  |Спецификация программного обеспечения |
|CR  |Change Request | Запрос на изменение|
|VDD | Version Description Document|Документ с описанием версии| |
| CMDB| Configuration management Database|База данных для управления конфигурацией |

## ВВЕДЕНИЕ (INTRODUCTION)

Управление конфигурацией программного обеспечения (SCM) формально определяется как “процесс применения управления конфигурацией [CM]".

На протяжении всего жизненного цикла программного обеспечения для обеспечения полноты и корректности CIS [элементов конфигурации]”, при этом CM определяется как “дисциплина, применяющая техническое и административное руководство и надзор для идентификации и документирования функциональных и физических характеристик элемента конфигурации, контроля изменений в этих характеристиках, регистрации и представления отчетов об обработке и внедрении изменений статус, и проверить соответствие установленным требованиям”. SCM - это процесс жизненного цикла программного обеспечения (SLCP), который поддерживает управление проектами, разработку и техническое обслуживание, контроль качества (QA), а также заказчиков и пользователей конечного продукта.

Концепции CM применимы ко всем контролируемым элементам, хотя существуют некоторые различия между внедрением аппаратного CM и программного CM. CM в равной степени применима к итеративной и инкрементальной методологии разработки программного обеспечения.

SCM тесно связана с обеспечением качества программного обеспечения (SQA). Как определено в Области знаний о качестве программного обеспечения, процессы SQA обеспечивают соответствие программных продуктов и процессов в жизненном цикле проекта установленным требованиям, требуя от инженеров-программистов планирования, внедрения и выполнения ряда действий, которые демонстрируют, что эти спецификации встроены в программное обеспечение. Действия SCM поддерживают эти цели SQA с помощью действий по настройке программного обеспечения (представленных далее в этой главе). Деятельность по аудиту конфигурации может быть описана как проверка CIs и тесно связана с проверками, определенными в плане обеспечения качества.

Мероприятия SCM должны включать в себя управление процессами SCM и планирование, идентификацию конфигурации программного обеспечения, контроль изменений конфигурации программного обеспечения, учет состояния конфигурации программного обеспечения (SCSA), аудит конфигурации программного обеспечения, а также управление выпусками программного обеспечения и его поставку. Эта операционализация:

1. Определяет, что, как ожидается, будет находиться под контролем в ходе разработки проекта
2. Определяет и регистрирует, кто разработал какой CI, а также когда и где он размещен
3. Позволяет контролировать изменения
4. Отслеживает взаимосвязи между CI, чтобы показать, как изменения, затрагивающие один CI, могут повлиять на другие CI
5. Контролирует версии CI
6. Гарантирует, что качество поставляемых CIS соответствует требованиям для использования по назначению

Раздел SCM связан со всеми другими разделами, поскольку объектом SCM является артефакт, создаваемый и используемый на протяжении всего процесса разработки программного обеспечения.

РАСПРЕДЕЛЕНИЕ ТЕМ ДЛЯ УПРАВЛЕНИЯ КОНФИГУРАЦИЕЙ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ
На рисунке 1 показано распределение тем для разделов SCM.

### 1 Управление процессом SCM (Management of the SCM Process)

SCM контролирует эволюцию и целостность продукта, идентифицируя его элементы (известные как CIS), управляя изменениями и контролируя их, а также проверяя информацию о конфигурации, записывая ее и предоставляя отчеты. С точки зрения инженера-программиста, SCM облегчает разработку и внедрение изменений. Успешное внедрение SCM требует тщательного планирования и управления, что требует глубокого понимания организационный контекст и ограничения, накладываемые на разработку и внедрение процесса SCM. План SCM может быть разработан один раз для организации, а затем скорректирован по мере необходимости для отдельных проектов.

#### 1.1 Организационный контекст для SCM (Organizational Context for SCM)

Чтобы спланировать процесс SCM для проекта, необходимо понимать организационный контекст и взаимосвязи между организационными элементами. SCM взаимодействует не
только с конкретным проектом, но и с несколькими другими подразделениями организации.

Организационные элементы, ответственные за процессы разработки программного обеспечения, могут быть структурированы по-разному. Общая ответственность за SCM часто возлагается на отдельную часть организации или на специально назначенное лицо. Однако ответственность за выполнение определенных задач SCM может быть возложена на другие подразделения организации (например, на отдел разработки).

Программное обеспечение часто разрабатывается как часть более крупной системы, содержащей элементы аппаратного обеспечения и встроенного ПО. В этом случае операции SCM выполняются параллельно с операциями CM по аппаратному обеспечению и встроенному ПО и должны быть согласованы с CM на системном уровне. Обратите внимание, что встроенное ПО содержит аппаратное и программное обеспечение, поэтому применимы как аппаратные, так и программные концепции CM.

SCM может взаимодействовать с деятельностью организации по обеспечению качества в таких вопросах, как управление записями и несоответствующие элементы. Что касается первого, то записи проекта, подпадающие под действие положений программы обеспечения качества организации, также могут находиться под контролем SCM. Команда контроля качества обычно отвечает за управление несоответствующими элементами. Однако SCM может помочь с отслеживанием и составлением отчетов по элементам конфигурации программного обеспечения (SCI) в этой категории.

Возможно, наиболее тесная связь существует с разработкой и обслуживанием программного обеспечения организации. Именно в этом контексте выполняются многие задачи по управлению конфигурацией программного обеспечения. Часто одни и те же инструменты используются для разработки, сопровождения и SCM.

<div style="text-align:center">
<img src="Images/Chapter 8/Рисунок 8.1.bmp"
alt="Рисунок 8.1. Разбивка тем для КА по управлению конфигурацией программного обеспечения.">
<br>Рисунок 8.1. Разбивка тем для КА по управлению конфигурацией программного обеспечения.
</div>

#### 1.2 Ограничения и рекомендации для процесса SCM (Constraints and Guidance for the SCM Process)

Ограничения, влияющие на процесс SCM, и рекомендации по его реализации исходят из многих источников. Политики и процедуры, установленные на корпоративном или другом организационном уровне, могут влиять на разработку и внедрение процесса SCM для проекта или предписывать их. Кроме того, контракт между покупателем и поставщиком может содержать положения, влияющие на процесс SCM (например, может потребоваться определенный аудит конфигурации, или контракт может быть указано, что определенные элементы должны быть помещены в CM). Если разрабатываемое программное обеспечение может повлиять на общественную безопасность, внешние регулирующие органы могут наложить ограничения. Наконец, SLCP, выбранный для проекта программного обеспечения, и уровень формализма, выбранный для реализации, также будут влиять на разработку и внедрение SLCP.

Инженеры-программисты также могут найти рекомендации по проектированию и внедрению процесса SCM в соответствии с “наилучшей практикой”, отраженной в стандартах разработки программного обеспечения, выпущенных различными компаниями организации по стандартизации. (Более подробную информацию об этих стандартах смотрите в приложении В.)

#### 1.3 Планирование SCM (Planning for SCM)

 Планирование процесса SCM для проекта должно соответствовать организационному контексту, применимым ограничениям, общепринятым
рекомендациям и характеру проекта (например,,
размер, критичность к безопасности). Основными мероприятиями, предусмотренными планом, являются определение конфигурации программного обеспечения, контроль конфигурации программного обеспечения, SCSA, аудит конфигурации программного обеспечения, а также управление выпусками программного обеспечения и его поставка. Кроме того, обычно учитываются такие вопросы, как организация и обязанности, ресурсы и графики, выбор и внедрение инструментов, контроль поставщиков и субподрядчиков, а также управление интерфейсами. Результаты деятельности по планированию отражаются в плане SCM (SCMP), который подлежит проверке и аудиту SQA.

Стратегии ветвления и слияния должны быть тщательно спланированы и доведены до сведения пользователей, поскольку они влияют на многие действия SCM. SCM определяет ветвление как набор изменяющихся версий исходного файла. Слияние заключается в объединении различных изменений в одном файле. Как правило, это происходит, когда несколько человек меняют CI. Существует множество стратегий ветвления и слияния, которые широко используются. (Подробнее об этом читайте в разделе "Дальнейшее чтение").

Выбранная модель жизненного цикла разработки программного обеспечения (см. <a href="/4_Software Construction.markdown#21-строительство-в-моделях-жизненного-цикла-construction-in-life-cycle-models">Модели жизненного цикла программного обеспечения</a> в разделе <a href="/4_Software Construction.markdown">"Процесс разработки программного обеспечения"</a>) также влияет на деятельность SCM, и при планировании SCM это следует учитывать. Например, многие подходы к разработке программного обеспечения используют непрерывную интеграцию, которая характеризуется частой сборкой, тестированием и развертыванием циклы. Очевидно, что деятельность SCM должна планироваться соответствующим образом.

#### 1.3.1 Организация и обязанности SCM (SCM Organization and Responsibilities)

Роли в организации должны быть четко определены, чтобы избежать путаницы в отношении того, кто будет выполнять конкретные действия или задачи SCM. Эти обязанности также должны быть распределены между подразделениями организации; это может быть четко указано в должности ответственного лица или путем указания организационного подразделения или секции в дополнение к ответственному лицу в рамках этой секции. Также следует определить общие полномочия и каналы отчетности для SCM, хотя это может быть сделано на этапе управления проектом или планирования контроля качества.

#### 1.3.2 Ресурсы и графики SCM (SCM Resources and Schedules)

 При планировании SCM определяются ресурсы,
включая персонал и инструменты, задействованные в выполнении мероприятий и задач SCM. В нем также определяется необходимая последовательность задач SCM и определяется место каждой задачи в расписании проекта и ее положение относительно контрольных точек, установленных на этапе планирования управления проектом. Также указываются любые требования к обучению для реализации планов и обучения новых сотрудников.

##### 1.3.3 Выбор и внедрение инструментов (Tool Selection and Implementation)

Как и в любой области разработки программного обеспечения, выбор и внедрение инструментов SCM должны быть тщательно спланированы. Следует рассмотреть следующие вопросы:

- Организация: Что мотивирует приобретение инструментов с точки зрения организации?
- Инструменты: Можем ли мы использовать коммерческие инструменты или нам нужно разработать свои собственные инструменты специально для этого проекта?
- Окружение: Какие ограничения накладываются организацией и ее техническим контекстом?
- Наследие: Как проекты будут использовать (или не использовать) новые инструменты?
- Финансирование: Кто будет оплачивать приобретение, обслуживание, обучение и настройку инструментов?
- Сфера применения: Как будут внедряться новые инструменты — например, во всей организации или только в конкретных проектах?
- Собственник: Кто отвечает за внедрение новых инструментов?
- Будущее: Каков план использования инструментов
в будущем?
- Изменения: Насколько инструменты адаптируемы?
- Ветвление и слияние: Совместимы ли возможности инструментов с запланированными стратегиями ветвления и слияния?
- Интеграция: Интегрируются ли различные инструменты SCM между собой? Интегрируются ли они с другими инструментами, используемыми в организации?
- Миграция: Можно ли перенести репозиторий, поддерживаемый средством контроля версий, в другое средство контроля версий с сохранением полной истории содержащихся в нем CIS?

Для SCM требуется набор инструментов, а не один инструмент. Такие наборы инструментов иногда называют верстаками. В рамках планирования выбора инструментов команда должна определить, будет ли SCM workbench открытым (инструменты от разных поставщиков будут использоваться в различных процессах SCM) или интегрированным (элементы workbench предназначены для совместной работы).

Размер организации и тип задействованных проектов также могут влиять на выбор инструментов. (см. <a href="#7-инструменты-управления-конфигурацией-программного-обеспечения-software-configuration-management-tools">Инструменты SCM</a>, раздел 7 этой главы)

#### 1.3.4 Контроль поставщиков/субподрядчиков (Vendor/Subcontractor Control)

Программный проект может включать в себя приобретение или использование приобретенных программных продуктов, таких как компиляторы или другие инструменты. При планировании SCM учитывается, будут ли эти элементы управляться с помощью управления конфигурацией (например, интегрированы в библиотеки проекта) и как будут оцениваться изменения или обновления и управляться ими.

Аналогичные соображения применимы и к программному обеспечению, поставляемому по субподряду. Когда в проекте используется программное обеспечение, поставляемое по субподряду, необходимо установить как требования SCM, предъявляемые к процессу SCM субподрядчика, так и средства контроля за соблюдением требований. Последнее включает в себя определение того, какая информация SCM должна быть доступна для эффективного мониторинга соответствия требованиям.

#### 1.3.5 Управление интерфейсом (Interface Control)

Когда программный элемент взаимодействует с другим программным обеспечением или аппаратным обеспечением, изменение одного элемента может повлиять на другой. При планировании процесса SCM учитывается, как будут идентифицироваться взаимодействующие элементы и как будут управляться изменения в элементах и как они будут сообщаться. Роль SCM может быть частью более масштабного процесса спецификации и контроля интерфейса на системном уровне, включающего спецификации интерфейса, планы управления интерфейсом и документы по управлению интерфейсом. В этом случае планирование SCM для управления интерфейсом выполняется в контексте процесса системного уровня.

#### 1.4 План SCM (SCM Plan)

Результаты планирования SCM для данного проекта регистрируются в SCMP, “живом документе”, который служит справочным материалом для процесса SCM. SCMP поддерживается (обновляется и утверждается) по мере необходимости в течение жизненного цикла программного обеспечения. Для внедрения SCMP командам, как правило, требуется разработать ряд более подробных, подчиненных процедур, определяющих, как будут выполняться конкретные требования в ходе повседневной деятельности (например, какие стратегии ветвления будут использоваться, как часто будут выполняться сборки, как часто будут проводиться автоматизированные тесты всех видов). быть запущенным).

SCMP должен включать следующие разделы:

- Введение (цель, область применения, используемые термины)
- Управление SCM (организация, обязанности, полномочия, применимые политики, директивы, процедуры)
- Мероприятия SCM (определение конфигурации, контроль конфигурации и т.д.)
- Графики SCM (координация с другими мероприятиями проекта)
- Ресурсы SCMP (инструменты, физические и кадровые ресурсы)
- Техническое обслуживание SCMP

#### 1.5 Мониторинг управления конфигурацией программного обеспечения (Monitoring of Software Configuration Management)

После внедрения процесса SCM может
потребоваться некоторое наблюдение для обеспечения надлежащего выполнения положений SCMP
.План, скорее всего, будет включать конкретные требования SQA для обеспечения соответствия определенным процессам и процедурам SCM. Лицо, ответственное за SCM, следит за тем, чтобы те, у кого есть назначенные ответственность правильно выполняйте определенные задачи SCM. В рамках проверки соответствия требованиям орган SQA также может осуществлять такой надзор.

Использование интегрированных инструментов SCM с возможностью управления технологическим процессом может упростить задачу наблюдения. Некоторые инструменты облегчают соблюдение требований к технологическому процессу, предоставляя инженеру-программисту гибкость в адаптации процедур. Другие инструменты обеспечивают выполнение конкретного процесса, оставляя инженеру-программисту меньшую гибкость. Требования к системам наблюдения и уровень гибкости, предоставляемый инженеру-программисту, являются важными факторами при выборе инструмента.

#### 1.5.1 Измерения SCM и сам процесс измерения (SCM Measures and Measurement)

Показатели SCM могут быть разработаны для предоставления конкретной информации о развивающемся продукте, но они также могут дать представление о том, насколько хорошо функционирует процесс SCM, и выявить возможности для улучшения процесса. Измерения процесса SCM позволяют командам отслеживать эффективность деятельности SCM на постоянной основе. Эти измерения полезны для характеристики текущего состояния процесса и обеспечения основы для сравнения с течением времени. Анализ измерений может дать информацию, которая приведет к изменениям в процессе и соответствующим обновлениям SCMP.

Библиотеки программного обеспечения и различные возможности инструментов SCM позволяют командам извлекать полезную информацию о характеристиках процессов SCM (а также информацию о проектах и управлении). Например, информация о времени, необходимом для выполнения различных типов изменений, была бы полезна при оценке критериев для определения того, какие уровни полномочий являются оптимальными для санкционирования определенных изменений, и при оценке ресурсов, необходимых для внесения изменений в будущем.

Необходимо следить за тем, чтобы наблюдение было сосредоточено на информации, которую можно получить в результате измерений, а не на самих измерениях. Процесс разработки программного обеспечения и измерение продукта более подробно рассматриваются в разделе "Процесс разработки программного обеспечения". Программы измерения программного обеспечения описаны в разделе "Управление разработкой программного обеспечения".

#### 1.5.2 Аудит SCM в процессе производства (In-Process Audits of SCM)

Аудиты могут проводиться в процессе разработки программного обеспечения для изучения состояния конкретных элементов конфигурации или для оценки реализации процесса SCM. Аудит SCM в процессе производства предоставляет более формальный механизм мониторинга отдельных аспектов процесса и может быть скоординирован с функцией SQA. (См. раздел Аудит конфигурации программного обеспечения.)

### 2 Идентификация конфигурации программного обеспечения (Software Configuration Identification)

Идентификация конфигурации программного обеспечения определяет объекты, подлежащие контролю, устанавливает схемы идентификации объектов и их версий, а также устанавливает инструменты и методы, которые будут использоваться при приобретении контролируемых объектов и управлении ими. Эти действия обеспечивают основу для других действий SCM.

#### 2.1 Определение предметов, подлежащих контролю (Identifying Items to Be Controlled)

Первым шагом в управлении изменениями является определение программных элементов, которые необходимо контролировать. Это включает в себя понимание конфигурации программного обеспечения в контексте конфигурации системы, выбор SCI и разработку стратегии маркировки программных элементов.

#### 2.1.1 Конфигурация программного обеспечения (Software Configuration)

Конфигурация программного обеспечения - это функциональные и физические характеристики аппаратного или программного обеспечения, изложенные в технической документации или реализованные в продукте. Их можно рассматривать как часть общей конфигурации системы.

#### 2.1.1 Элемент конфигурации программного обеспечения (Software Configuration Item)

CI - это элемент или совокупность аппаратных средств, программного обеспечения или того и другого, предназначенных для управления как единым целым. SCI - это программный объект, который был создан как CI. SCM управляет различными элементами в дополнение к самому коду. Программные продукты, которые потенциально могут стать SCI, включают планы, спецификации и проектную документацию, материалы для тестирования, программные инструменты, исходный и исполняемый код, библиотеки кода, данные и словари данных, а также документацию по установке, техническому обслуживанию, эксплуатации и использованию программного обеспечения.

Выбор SCIs - важный процесс, в ходе которого должен быть достигнут баланс между обеспечением надлежащей видимости для целей управления проектом и обеспечением управляемого количества контролируемых элементов.

#### 2.2 Идентификаторы и атрибуты элементов конфигурации (Configuration Item Identifiers and Attributes)

Операция по учету статуса (описанная ниже) собирает информацию о CIS по мере их разработки. Схема CI определена для того, чтобы определить, какая информация должна собираться и отслеживаться для каждого CI. Отслеживаются уникальные идентификаторы и версии.

Примерная схема может включать следующее:

| | | |
|--|--|--|
| CL|name| |
| CL| qnique lenter| |
| CL| description| |
| CL| date(s)| |
| CL|type| |
| CL| owner| |
| CL|version| |

Для уникального идентификатора CI может использоваться значимая или незначимая кодификация. Примером значимой кодификации может быть XX-YY, где XX - сокращение итерации (в случае использования итеративного метода разработки), а YY - сокращение CI.

#### 2.3 Определение базовой линии (Baseline Identification)

Базовый уровень программного обеспечения - это официально утвержденная версия CI (независимо от типа носителя), которая официально назначается и фиксируется в определенный момент времени в течение жизненного цикла CI. Этот термин также относится к конкретной версии согласованного SCI. Базовый уровень может быть изменен только с помощью формальных процедур контроля изменений. Базовый уровень со всеми утвержденными изменениями в базовом уровне представляет текущую утвержденную конфигурацию. Базовый уровень состоит из одного или нескольких связанных CIS.

#### 2.4 Атрибуты базового уровня (Baseline Attributes)

Атрибуты базовой линии используются в операции учета состояния и указывают информацию об установленной базовой линии.

Примеры атрибутов базовой линии могут включать следующее:

|  |  |  |
|--|--|--|
|Baseline| name
|Baseline| unique identifier
|Baseline|description
|Baseline| date of creation
|Baseline |CIs

#### 2.5 Определение схемы взаимоотношений (Relationships Scheme Definition)

Взаимоотношения обеспечивают связи, необходимые для создания и поддержания структуры. Способность сообщать о намерениях и управлять результатами значительно улучшается при наличии эффективных взаимоотношений (структурирования) (например, платформ, основанных на опыте (MBX)). Обмен информацией о взаимоотношениях и функциональная совместимость необходимы для поддержки применимых типов взаимоотношений. Операция учета статуса отвечает за сбор информации о взаимоотношениях между CIS.

Общие типы взаимоотношений могут быть описаны в соответствии со следующими схемами:

Зависимости: CI-1 и CI-2 зависят друг от друга.

Пример: CI-1 зависит от C1-2, и наоборот, например, модель класса зависит от диаграммы последовательности, поскольку любое изменение в любой из моделей обоих типов влияет на другие.

Вывод: Один CI является производным от другого, как правило, в последовательной связи, не из-за нехватки ресурсов для обработки обоих CI, а из-за ограничения, которое требует, например, завершения CI-1 до разработки CI-2.

#### 2.5 Определение схемы взаимосвязей (Relationships Scheme Definition)

Последовательность: Программные элементы развиваются по мере реализации программного проекта. Версия программного элемента - это идентифицированный экземпляр элемента. Его можно рассматривать как состояние развивающегося элемента. Это то, что отражает отношение преемственности, и оно является рефлексивным в том смысле, что каждый CI имеет такое отношение сам к себе. Последовательность возникает при первом создании CI. Каждый раз, когда он изменяется, появляется новая последовательность, и отслеживание этих последовательностей - это способ отслеживания версий CI.

Пример: Версии CI на временной шкале.

|  |  |  |
|--|--|--|
|CI CODE |  PREVIOUS VERSION |NEXT VERSION  | |

Варианты - это версии программы, созданные на основе разработанных альтернативных вариантов. Этот тип взаимосвязи не так распространен, как описанный выше, поскольку его обслуживание обходится дороже

Запись о выводе: в соответствии со схемой, определенной выше для вывода, CI-3 

отслеживание некоторых взаимосвязей может потребовать дополнительной работы. С другой стороны, отслеживание таких взаимосвязей может облегчить принятие решений по запросам на изменение (CRS) для CI.

Взаимосвязи между CIS можно отследить в спецификации программного обеспечения (SBOM). SBOM - это формальная запись, содержащая детали и взаимосвязи в цепочке поставок CIS, используемые при создании программного обеспечения. CIS в SBOM часто называются компонентами. Компонентами могут быть исходный код, библиотеки, модули и другие артефакты; они могут быть с открытым исходным кодом или проприетарными, бесплатными или платными; а данные могут быть общедоступными или с ограниченным доступом.

Простой пример взаимосвязей между тремя CI в SBOM, называемыми CI-1, CI-2 и CI-3, проиллюстрирован на рисунке 2:

<div style="text-align:center">
<img src="Images/Chapter 8/Рисунок 8.2.bmp"
alt="Рисунок 8.2.">
<br>Рисунок 8.2.
</div>

#### 2.6 Библиотеки программного обеспечения (Software Libraries)

 Библиотека программного обеспечения - это контролируемая коллекция исходного кода, скриптов, объектного кода, документации и связанных с ними артефактов.
Требования и тестовые примеры хранятся в репозиторий и должен быть связан с разработанными базовыми версиями кода. Исходный код хранится в системе контроля версий, которая обеспечивает отслеживаемость и безопасность разработанных базовых версий. В системах контроля версий поддерживается несколько потоков разработки, связанных с двоичными объектами (например, объектным кодом), полученными в процессе сборки. Эти двоичные объекты обычно хранятся в репозитории, который должен содержать криптографические хэши, используемые для выполнения аудита физической конфигурации (PCA).

Библиотека definitive media содержит базовые версии артефактов, которые могут быть развернуты в системах тестирования, стадии разработки и производства. Процесс управления выпуском зависит от этих программных библиотек, которые управляют развернутыми артефактами. Что касается контроля доступа и средств резервного копирования, безопасность является ключевым аспектом управления библиотекой.

### 3 Контроль изменения конфигурации программного обеспечения (Software Configuration Change Control)

Контроль изменений конфигурации программного обеспечения связан с изменениями, необходимыми для CIS в течение жизненного цикла программного обеспечения. Он охватывает процесс определения того, какие изменения необходимо внести, полномочия по утверждению определенных изменений, поддержку внедрения этих изменений и концепцию формальных отклонений от требований проекта, а также отказ от них. Информация, полученная в результате этих действий, полезна для оценки трафика изменений и поломок, а также аспектов доработки.

Учитывая, что переход на CIs может осуществляться по определенным правилам в зависимости от отрасли, региона, компании и т.д., очень важно определить эти правила в контексте программного проекта, для которого разрабатывается процесс SCM, и строго придерживаться этих правил. Остальная часть этого раздела может быть полезна, когда в компании или промышленном секторе, где находится разрабатываемый программный проект, не существует специальных правил, касающихся контроля изменений.

#### 3.1 Запрос, оценка и утверждение изменений в программном обеспечении (Requesting, Evaluating and Approving Software Changes)

Первым шагом в управлении изменениями в контролируемых элементах является определение того, какие изменения необходимо внести. Запрос на изменение программного обеспечения (SCR)

процесс (рис. 3) предусматривает формальные процедуры подачи и регистрации кредитов; оценки потенциальной стоимости и воздействия предлагаемого изменения; а также принятия, модификации, отсрочки или отклонения предлагаемого изменения. CR - это запрос на расширение или сокращение масштабов проекта; изменение политики, процессов, планов или процедур; изменение затрат или бюджетов; или пересмотр графиков. Запросы на внесение изменений в SCIs могут исходить от кого угодно на любом этапе жизненного цикла программного обеспечения и могут включать предлагаемое решение и запрашиваемый приоритет. Одним из источников получения кредита является инициирование корректирующих действий в ответ на сообщения о проблемах. Независимо от источника, тип изменения (например, дефект или усовершенствование) обычно отображается на экране.

<div style="text-align:center">
<img src="Images/Chapter 8/Рисунок 8.3.bmp"
alt="Рисунок 8.3. Последовательность процесса управления изменениями.">
<br>Рисунок 8.3. Последовательность процесса управления изменениями.
</div>
<br>

Запись в SCR позволяет разработчикам программного обеспечения отслеживать дефекты и собирать данные об активности изменений по их типу. После получения SCR выполняется техническая оценка (также известная как анализ влияния), чтобы определить объем необходимых изменений, если CR будет принят. Для решения этой задачи важно хорошо понимать взаимосвязи между программными (и, возможно, аппаратными) элементами. Информация о взаимосвязях между CI может быть полезна для принятия решений, затрагивающих любой CI, учитывая потенциальное влияние на другие CI. Наконец, компетентный орган, соответствующий затронутым исходным условиям, задействованному SCI и характеру изменений, оценит технические и управленческие аспекты CR и примет, модифицировав, отклонив или отложив предлагаемое изменение.

#### 3.1.1 Панель управления конфигурацией программного обеспечения. (Software Configuration Control Board)

Полномочия по принятию или отклонению предлагаемых изменений принадлежат организации, известной как совет по управлению конфигурацией (CCB). В небольших проектах эти полномочия могут принадлежать руководителю или назначенному лицу, а не совету из нескольких человек. Может быть несколько уровней полномочий на внесение изменений в зависимости от различных критериев, таких как критичность соответствующего элемента, характер изменений (например, влияние на бюджет и график) или стадия жизненного цикла проекта. Состав CCB, используемых для системы, варьируется в зависимости от этих критериев (но представитель SCM всегда присутствует). Представлены все заинтересованные стороны, соответствующие уровню CCB. Когда сфера полномочий ЦКБ ограничивается программным обеспечением, этот совет называется Советом по управлению конфигурацией программного обеспечения (SCCB). Деятельность ЦКБ подлежит аудиту или обзору качества программного обеспечения.

#### 3.1.2 Процесс запроса на изменение программного обеспечения (Software Change Request Process)

Эффективный процесс SCR требует использования вспомогательных инструментов и процедур для создания CRS, обеспечения выполнения процесса внесения изменений, сбора решений CCB и представления информации о процессе внесения изменений. Объединение возможностей этого инструмента с системой отчетности о проблемах может облегчить отслеживание устранения проблем и ускорить разработку решений.

#### 3.1.3 Определение форм запроса на изменение программного обеспечения (Software Change Request Forms Definition)

Заявка на получение кредита должна содержать следующее:

Форма подтверждения, в которой должен быть описан запрос и приведено его обоснование.
Форма подтверждения изменений (необходима, если сертификат предоставлен)

Этими формами можно управлять с помощью соответствующего вспомогательного инструмента, но за разработку форм отвечают люди.

#### 3.2 Внесение изменений в программное обеспечение. (Implementing Software Changes)

Утвержденные SCR реализуются с использованием определенных программных процедур в соответствии с
применимыми требованиями к расписанию. Поскольку
одновременно может быть внедрено несколько утвержденных SCR, поэтому необходимо предоставить средства отслеживания того, какие SCR включены в конкретные версии программного обеспечения, и базовые параметры. В конце процесса внесения изменений завершенные изменения могут быть подвергнуты аудиту конфигурации и проверке качества программного обеспечения, что включает в себя проверку того, были ли внесены только утвержденные изменения. Процесс SCR обычно документирует SCM изменения и другую информацию об утверждении.

Изменения могут поддерживаться средствами контроля версий исходного кода. Эти инструменты позволяют команде инженеров-программистов или одному инженеру-программисту отслеживать и документировать изменения в исходном коде. Эти инструменты предоставляют единый репозиторий для хранения исходного кода, что позволяет предотвратить одновременное редактирование одного и того же модуля несколькими инженерами-программистами, и записывают все изменения, внесенные в исходный код. Инженеры-программисты извлекают модули из репозитория, вносят изменения, документируют результаты. Измените, а затем сохраните отредактированные модули в репозитории. При необходимости изменения также можно отменить, восстановив предыдущую базовую версию. Более мощные инструменты могут поддерживать параллельную разработку и географически распределенные среды. Эти инструменты могут быть представлены в виде отдельных специализированных приложений под управлением независимой группы SCM. Они также могут быть интегрированы в среду разработки программного обеспечения. И, наконец, они могут быть такими же элементарными, как элементарная система управления изменениями, которая поставляется вместе с операционной системой.

#### 3.3 Отклонения и отказы (Deviations and Waivers)

Ограничения, налагаемые на разработку программного обеспечения, или спецификации, подготовленные в ходе разработки, могут содержать положения, которые, по мнению тех, кто работает над проектом, не могут быть выполнены на определенном этапе жизненного цикла. Отклонение - это письменное разрешение, выданное перед изготовлением изделия, на отклонение от определенных эксплуатационных характеристик или требований к дизайну на определенное количество единиц или на определенный период времени. Отказ - это письменное разрешение на то, чтобы КИ или другой обозначенный элемент в ответ на проблему, обнаруженную во время производства или после отправки проекта на проверку, отклонялся от установленных требований, когда КИ или проект, тем не менее, считаются пригодными для использования, либо в том виде, в котором они есть, либо после доработки с помощью утвержденного метода. В этих случаях используется формальная процедура для получения разрешения на отклонения от положений или отказ от них.

### 4 Учет состояния конфигурации программного обеспечения (Software Configuration Status Accounting)

В соответствии с логическими схемами, определенными в разделе Определение конфигурации деятельности для CIS, исходных данных и взаимосвязей для сбора информации.

#### 4.1 Информация о состоянии конфигурации программного обеспечения (Software Configuration Status Information)

В рамках деятельности SCSA разрабатывается и эксплуатируется система сбора, проверки достоверности и представления необходимой информации по ходу жизненного цикла. Как и в любой информационной системе, необходимо идентифицировать, собирать и поддерживать информацию о состоянии конфигурации, которой необходимо управлять для изменяющихся конфигураций. Кроме того, сама информация должна быть защищена там, где это уместно. Информация и измерения SCSA необходимы для поддержки процесса SCM и удовлетворения потребностей в отчетности о состоянии конфигурации для управления, разработки программного обеспечения, обеспечения безопасности, производительности и других связанных с этим видов деятельности.

Доступные типы информации включают, но не ограничиваются ими, следующее:

- Определение текущей и утвержденной конфигурации
- Текущий статус внедрения изменений
- Затронутые CIS и связанные с ними системы
- Отклонения и отказы от ответственности
- Мероприятия по проверке и валидации (V&V)

Автоматизированные средства поддерживают SCSA при выполнении задач, а отчеты доступны в удобном для пользователя формате.

SCSA - это действие CM, состоящее из записи и представления информации, необходимой для эффективного управления конфигурацией в отношении CIS, базовых параметров и взаимосвязей между CIS. Это действие должно выполняться с помощью

#### 4.2 Создание отчетов о состоянии конфигурации программного обеспечения (Software Configuration Status Reporting)

Представленная информация может использоваться различными организационными элементами и элементами проекта, включая команду разработчиков, операции,
безопасность, команду технического обслуживания, проект менеджмент, группы контроля качества программного обеспечения и другие. Отчетность может принимать различные формы: автоматизированные отчеты, специальные запросы для ответа на конкретные вопросы и регулярное составление готовых отчетов, в том числе разработанных с учетом требований безопасности, законодательства или нормативных актов. Другими словами, информация, полученная в результате деятельности SCSA на протяжении всего жизненного цикла, может быть использована для обеспечения контроля качества и безопасности, а также для предоставления доказательств соответствия нормативным актам, требованиям управления и т.д.

В дополнение к сообщению о текущем состоянии конфигурации, информация, полученная SCSA, может служить основой для различных измерений. Современная SCM включает в себя более широкий объем информации, включая, но не ограничиваясь этим, следующее:
Индикаторы целостности (например, MAC (код аутентификации сообщения), SHA1 (алгоритм безопасного хэширования), MD5 (Дайджест сообщений))
Индикаторы состояния безопасности (например, управление рисками и соответствие требованиям)
Доказательства выполнения мероприятий по V&V (например, выполнение требований)
Базовый статус
Количество сертификатов качества на SCI
Среднее время, необходимое для реализации CR

### 5 Аудит конфигурации программного обеспечения (Software Configuration Auditing)

Аудит программного обеспечения - это независимая проверка рабочего продукта или набора рабочих продуктов для оценки соответствия техническим требованиям, безопасности, правовым и нормативным требованиям, спецификациям, стандартам, контрактным соглашениям или другим критериям. Аудит проводится в соответствии с четко определенным процессом, включающим различные роли и обязанности аудитора. Из-за этой сложности каждый аудит должен быть тщательно спланирован. Аудит может потребовать от нескольких лиц проведения выполняйте различные задачи в течение достаточно короткого времени. Инструменты, помогающие планировать и проводить аудит, могут значительно облегчить этот процесс.

Аудит конфигурации программного обеспечения определяет, в какой степени изделие удовлетворяет требованиям к функциональным и физическим характеристикам. Неофициальные аудиты могут проводиться на ключевых этапах жизненного цикла. В соответствии с действующим контрактом (например, контрактом, охватывающим критически важное программное обеспечение) могут потребоваться два вида формальных аудитов: аудит функциональной конфигурации (FCA) и PCA. Успешное завершение этих аудитов может быть необходимым условием для определения базового уровня продукта.

#### 5.1 Аудит функциональной конфигурации программного обеспечения (Software Functional Configuration Audit)

FCA по программному обеспечению гарантирует, что проверяемый программный продукт соответствует своим основным спецификациям. Результаты деятельности по проверке программного обеспечения (см. раздел <a>"Проверка и валидация"</a> в разделе <a>"Управление качеством программного обеспечения"</a>) являются ключевыми для данного аудита.

#### 5.2 Аудит физической конфигурации программного обеспечения (Software Physical Configuration Audit)

Сертификат соответствия качества программного обеспечения гарантирует, что проектная и справочная документация соответствуют готовому программному продукту.

#### 5.3 Аудит базового уровня программного обеспечения в процессе производства (In-Process Audits of a Software Baseline)

В процессе разработки могут проводиться аудиты для изучения состояния конкретных элементов конфигурации. Аудиты в процессе работы могут применяться ко всем базовым элементам, чтобы убедиться, что производительность соответствует спецификациям или что разрабатываемая документация продолжает соответствовать разрабатываемому базовому элементу.

Эта задача применима к каждому ИЦ, который должен быть утвержден в качестве базового уровня. Аудит заключается в проверке ИЦ, чтобы определить, соответствует ли он требованиям. Порядок проведения проверки и ожидаемый результат должны быть описаны в плане обеспечения качества или, если план обеспечения качества отсутствует, определены для деятельности по аудиту конфигурации программного обеспечения.

Постоянные проверки CIS, указанные в деятельности по идентификации конфигурации, помогают проверить соответствие требованиям руководства и нормативным требованиям. Проверки аудита конфигурации проводятся на протяжении всей разработки проекта, всякий раз, когда необходимо проверить CI.

### 6 Управление выпусками программного обеспечения и их поставка (Software Release Management and Delivery)

В данном контексте под выпуском понимается распространение программного обеспечения и связанных с ним артефактов за пределами деятельности по разработке, включая внутренние выпуски и распространение среди клиентов. Когда для поставки доступны разные версии программного обеспечения (например, версии для разных платформ или версии с различными возможностями), часто возникает необходимость в повторном создании конкретных версий и упаковке необходимых материалов для доставки версий. Библиотека программного обеспечения является ключевым элементом в выполнении задач по выпуску и доставке.

#### 6.1 Разработка программного обеспечения (Software Building)

Разработка программного обеспечения создает правильные версии SCIs, используя соответствующие
данные конфигурации, в виде программного пакета
для доставки заказчику или другому получателю, например команде, выполняющей тестирование. Для систем с аппаратным обеспечением или встроенным ПО исполняемая программа поставляется в процессе сборки системы. Инструкции по сборке помогают обеспечить выполнение необходимых шагов сборки в правильной последовательности. В дополнение к созданию программное обеспечение для новых выпусков, SCM, как правило, должен иметь возможность воспроизводить предыдущие выпуски для целей восстановления, тестирования, обслуживания или дополнительного выпуска.

Программное обеспечение создается с использованием вспомогательных средств, таких как компиляторы. (Смотрите раздел <a>Основы компиляции в руководстве Computing Foundations</a>.) Например, если необходимо перестроить точную копию ранее созданного SCI, вспомогательные инструменты и связанные с ними инструкции по сборке должны находиться под контролем SCM, чтобы обеспечить доступность правильных версий инструментов.

Инструментальные возможности полезны для выбора правильных версий программных элементов для целевой среды и автоматизации процесса создания программного обеспечения на основе выбранной версии и данных конфигурации. Эти возможности необходимы для проектов с параллельными или распределенными средами разработки. Большинство сред разработки программного обеспечения предоставляют такую возможность. Однако эти инструменты различаются по сложности; некоторые требуют от инженера-программиста изучения специализированного языка сценариев, в то время как другие используют более ориентированный на графику подход, который скрывает большую часть сложности “интеллектуальной” сборки.

Процесс сборки и продукты часто подвергаются проверке качества программного обеспечения. Результаты процесса сборки могут понадобиться для использования в будущем. Они могут стать записями о качестве, безопасности или соответствии организационным или нормативным требованиям. Список артефактов, включенных в сборку, в SBOM является важным результатом CM.

При непрерывной интеграции создание программного обеспечения выполняется автоматически, когда изменения в CIs передаются в хранилище системы управления версиями. Инструменты, работающие на локальном или облачном сервере, отслеживают исходный код проекта контролируйте систему и запускайте последовательность шагов, которые необходимо выполнять при каждом внесении изменений в определенную ветвь или область хранилища исходного кода. Инструмент настроен на получение новой копии полного исходного кода для проекта и выполнение необходимых команд для компиляции и компоновки кода. Эта конфигурация часто сочетается с этапами проверки стандартов кодирования с помощью автоматизированного статического анализа, выполнения модульных тестов и определения показателей покрытия кода или извлечения документации из исходного кода. Полученные артефакты затем развертываются в рамках процесса управления выпуском.

#### 6.2 Управление выпуском программного обеспечения (Software Release Management)

Управление выпуском программного обеспечения включает в себя идентификацию, упаковку и доставку
элементов продукта (например, исполняемого файла программа, документация, примечания к выпуску или данные конфигурации). Учитывая, что изменения в продукте могут происходить постоянно, одной из задач управления выпуском является определение времени выпуска выпуска. На это решение влияют серьезность проблем, связанных с выпуском, и результаты измерений плотности ошибок в предыдущих выпусках. Задача упаковки определяет, какие элементы продукта должны быть доставлены, а затем выбирает правильные варианты этих элементов, учитывая предполагаемое применение продукта. Информация, документирующая физическое содержимое выпуска, называется документом описания версии (VDD). В примечаниях к выпуску описываются новые возможности, известные проблемы и требования к платформе, необходимые для правильной работы продукта. Пакет, который будет выпущен, также содержит инструкции по установке или обновлению. Последнее может быть сложным, поскольку у некоторых пользователей могут быть версии, устаревшие на несколько выпусков. В некоторых случаях управление выпуском может потребоваться для отслеживания распространения продукта среди различных клиентов или целевых систем (например, когда требуется поставщик для уведомления клиента о новых сообщенных проблемах). Наконец, может быть реализован механизм, помогающий гарантировать целостность выпущенного продукта (например, путем добавления цифровой подписи).

Для поддержки этих функций управления выпуском необходим инструмент. Например, подключение к инструменту, поддерживающему процесс CR, полезно для сопоставления содержимого релиза с полученными SCR. Этот инструмент может также поддерживать информацию о различных целевых платформах и клиентских средах.

При непрерывной доставке создается конвейер для непрерывной сборки программного обеспечения, как описано в предыдущем разделе. В результате процесса сборки появляются исполняемый код и библиотеки, которые затем могут быть объединены в установочный пакет и развернуты в среде для проверки или производственного использования.

### 7 Инструменты управления конфигурацией программного обеспечения (Software Configuration Management Tools)

Многие инструменты могут помочь с CM на разных уровнях. Сфера применения этих инструментов варьируется в
зависимости от того, кто их использует. CM наиболее
эффективна при интеграции с другими процессами и, как следствие, с другими существующими инструментами. Выбор инструмента CM может быть сделан в зависимости от области применения этого инструмента.

Обзор инструментов:

- Система управления конфигурацией (CMS) предоставляет технологию и логику, облегчающие работу с CM.
- Система управления версиями хранит исходный код, файлы конфигурации и связанные с ними артефакты.

- Для обеспечения непрерывной доставки создана система автоматизации сборки (конвейер).
- В репозитории хранятся двоичные файлы, созданные в процессе сборки, для извлечения последних артефактов сборки и повторного развертывания их по мере необходимости, которые используются в процессе проверки выпуска.
- База данных управления конфигурацией (CMDB) или аналогичное постоянное хранилище.
- Инструменты управления изменениями.
- Инструменты выпуска/развертывания.

CMS поддерживает уникальную идентификацию артефактов. Как отдельные артефакты, так и коллекции задаются в системах CM и связанных с ними репозиториях. Структурирование создает логическую взаимосвязь между артефактами. Проверка и выпуск устанавливают целостность артефактов как часть процесса управления выпуском. Для обеспечения стабильности определяются базовые параметры. Например, управление интерфейсами определяется и контролируется, что делает его частью базового процесса. Управление изменениями, включая варианты и несоответствия, рассматривается и утверждается, а также планируется его внедрение. Действия по проверке и аудиту выполняются в рамках процесса идентификации, внесения изменений и управления выпуском. Учет состояния и производительности регистрируется по мере возникновения событий и становится доступным через CMS.

Для небольших организаций или групп разработчиков, которые не выпускают варианты своих программных продуктов или не сталкиваются с другими сложными требованиями к SCM, обычно достаточно отдельных инструментов поддержки. Ниже приведены примеры этих инструментов:

- Инструменты контроля версий: эти инструменты отслеживают, документируют и хранят отдельные версии, такие как исходный код и внешняя документация.
- Инструменты для обработки сборки: В своей простейшей форме такие инструменты компилируют и компонуют исполняемую версию программного обеспечения. Более продвинутые инструменты для сборки извлекают последнюю версию из программного обеспечения для контроля версий, выполняют проверку качества, регрессионные тесты и создают различные формы отчетов, а также выполняют другие задачи.
- Инструменты управления изменениями: Эти инструменты в основном поддерживают управление CRS и уведомлениями о событиях (например, об изменениях статуса CRS, достигнутых этапах).
- Инструменты поддержки, связанные с проектами, в основном поддерживают управление рабочим пространством для групп разработчиков и интеграторов. Кроме того, они могут поддерживать распределенные среды разработки. Такие инструменты подходят для средних и крупных организаций, которые используют различные варианты своих программных продуктов и параллельную разработку и не имеют требований к сертификации.
- Инструменты поддержки процессов в масштабах всей компании позволяют автоматизировать отдельные части процессов в масштабах всей компании, обеспечивая поддержку управления рабочими процессами, ролями и обязанностями. Они могут обрабатывать множество элементов, большие объемы данных и многочисленные жизненные циклы. Кроме того, такие инструменты дополняют поддержку, связанную с проектом, поддерживая более формальный процесс разработки, включая требования к сертификации.